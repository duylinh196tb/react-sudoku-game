{"version":3,"sources":["/Users/duylinh196tb/WORK/Learn/React/react-sudoku-game/pages/index.js"],"names":["LoupeIcon","RemoveIcon","ReloadIcon","ReturnIcon","Description","cellWidth","LightBlue100","LightBlue200","LightBlue300","Indigo700","DeepOrange200","DeepOrange600","ControlNumberColor","CellStyle","ActionsStyle","ControlStyle","NumberControlStyle","PuzzleStyle","CirculuarProgressStyle","CircularPathD","getBackGroundColor","conflict","isPeer","sameValue","isSelected","getFontColor","value","prefilled","GenerationUI","props","generateGame","state","setState","Color","darken","hsl","string","lighten","propTypes","PropTypes","func","isRequired","NumberControl","number","onClick","completionPercentage","defaultProps","Cell","notes","backgroundColor","fontColor","range","map","i","has","bool","instanceOf","CirclularProgress","percent","getClickHandler","onDoubleClick","delay","timeoutID","event","setTimeout","clearTimeout","makeCountObject","countObj","push","makeBoard","puzzle","rows","Array","from","keys","columns","squares","result","row","cell","j","Math","floor","fromJS","selected","choices","updateBoardWithNumber","x","y","fill","board","get","getIn","delete","set","increment","rowPath","columnPath","squarePath","setIn","getNumberOfGroupsAssignedForNumber","groups","reduce","accumulator","Index","finalCount","solution","makePuzzle","pluck","history","List","of","historyOffSet","addNumberAsNote","selectedCell","getSelectedCell","currentValue","Set","add","updateBoard","newBoard","slice","size","canUndo","redo","min","undo","max","eraseSelected","fillNumber","fillSelectedWithSolution","setNumber","selectCell","navigator","serviceWorker","register","then","reg","console","log","scope","catch","err","warn","message","toJSON","rowConflict","columnConflict","squareConflict","isConflict","peer","areCoordinatePeers","clickHandle","undefined","getNumberValueCount","renderCell","toArray","renderNumberControl","renderActions","renderGenerationUI","renderHeader","renderPuzzle","renderControls"],"mappings":"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","file":"4.f832b0521b958db54ec3.hot-update.js","sourcesContent":["/* eslint-disable jsx-a11y/accessible-emoji */\nimport React, { Component } from 'react';\nimport { Set, List, fromJS } from 'immutable';\nimport PropTypes from 'prop-types';\nimport NextHead from 'next/head';\nimport Color from 'color';\nimport InputRange from 'react-input-range';\n\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport css from 'styled-jsx/css';\n\nimport RangeStyle from '../input-range-style';\nimport LoupeIcon from '../svg/loupe.svg';\nimport RemoveIcon from '../svg/remove.svg';\nimport ReloadIcon from '../svg/reload.svg';\nimport ReturnIcon from '../svg/return.svg';\n\nimport { makePuzzle, pluck, isPeer as areCoordinatePeers, range } from '../sudoku';\nimport { backGroundBlue } from '../colors';\nimport Tip from '../components/tool-tip';\n\n\nconst Description = 'Discover the next evolution of Sudoku with amazing graphics, animations, and user-friendly features. Enjoy a Sudoku experience like you never have before with customizable game generation, cell highlighting, intuitive controls and more!';\nconst cellWidth = 2.5;\n\nconst LightBlue100 = '#B3E5FC';\nconst LightBlue200 = '#81D4FA';\nconst LightBlue300 = '#4FC3F7';\nconst Indigo700 = '#303F9F';\nconst DeepOrange200 = '#FFAB91';\nconst DeepOrange600 = '#F4511E';\nconst ControlNumberColor = Indigo700;\n\n// eslint-disable-next-line no-lone-blocks\n{ /* language=CSS */ }\nconst CellStyle = css`\n.cell {\n    height: ${cellWidth}em;\n    width: ${cellWidth}em;\n    display: flex;\n    flex-wrap: wrap;\n    align-items: center;\n    justify-content: center;\n    font-size: 1.1em;\n    font-weight: bold;\n    transition: background-color .3s ease-in-out;\n}\n.cell:nth-child(3n+3):not(:last-child) {\n    border-right: 2px solid black;\n}\n.cell:not(:last-child) {\n    border-right: 1px solid black;\n}\n.note-number {\n    font-size: .6em;\n    width: 33%;\n    height: 33%;\n    box-sizing: border-box;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n`;\n\n// eslint-disable-next-line no-lone-blocks\n{ /* language=CSS */ }\nconst ActionsStyle = css`\n.actions {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    width: 100%;\n    max-width: 400px;\n    margin-top: .5em;\n    padding: 0 .6em;\n}\n.action {\n    display: flex;\n    align-items: center;\n    flex-direction: column;\n}\n.action :global(svg) {\n    width: 2.5em;\n    margin-bottom: .2em;\n}\n.redo :global(svg) {\n    transform: scaleX(-1);\n}\n`;\n\n// eslint-disable-next-line no-lone-blocks\n{ /* language=CSS */ }\nconst ControlStyle = css`\n.control {\n    padding: 0 2em;\n    cursor: pointer;\n    display: inline-flex;\n    align-items: center;\n    flex-wrap: wrap;\n    justify-content: center;\n    font-family: 'Special Elite', cursive;\n    transition: filter .5s ease-in-out;\n    width: 100%;\n}\n`;\n\n// eslint-disable-next-line no-lone-blocks\n{ /* language=CSS */ }\nconst NumberControlStyle = css`\n.number {\n    display: flex;\n    position: relative;\n    justify-content: center;\n    align-items: center;\n    font-size: 2em;\n    margin: .1em;\n    width: 1.5em;\n    height: 1.5em;\n    color: ${ControlNumberColor};\n    box-shadow: 0 1px 2px rgba(0,0,0,0.16), 0 1px 2px rgba(0,0,0,0.23);\n    border-radius: 50%;\n}\n.number > div {\n    margin-top: .3em;\n}\n`;\n\n// eslint-disable-next-line no-lone-blocks\n{ /* language=CSS */ }\nconst PuzzleStyle = css`\n.puzzle {\n    margin-top: .5em;\n    width: ${cellWidth * 9}em;\n    cursor: pointer;\n    box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);\n}\n.row {\n    display: flex;\n    align-items: center;\n    flex: 0;\n    width: ${cellWidth * 9}em;\n}\n.row:not(:last-child) {\n    border-bottom: 1px solid black;\n}\n.row:nth-child(3n+3):not(:last-child) {\n    border-bottom: 2px solid black !important;\n}\n`;\n\n// eslint-disable-next-line no-lone-blocks\n{ /* language=CSS */ }\nconst CirculuarProgressStyle = css`\n.circular-progress {\n    display: block;\n    width: 100%;\n    position: absolute;\n    top: 0;\n    left: 0;\n    transition: filter .4s ease-in-out;\n}\n\n.circle-bg {\n    fill: none;\n    stroke: #eee;\n    stroke-width: 3.8;\n}\n\n.circle {\n    stroke: ${ControlNumberColor};\n    transition: stroke-dasharray .4s ease-in-out;\n    fill: none;\n    stroke-width: 2.8;\n    stroke-linecap: round;\n}\n`;\n\nconst CircularPathD = 'M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831';\n\nfunction getBackGroundColor({\n  conflict, isPeer, sameValue, isSelected,\n}) {\n  if (conflict && isPeer && sameValue) {\n    return DeepOrange200;\n  } else if (sameValue) {\n    return LightBlue300;\n  } else if (isSelected) {\n    return LightBlue200;\n  } else if (isPeer) {\n    return LightBlue100;\n  }\n  return false;\n}\n\nfunction getFontColor({ value, conflict, prefilled }) {\n  if (conflict && !prefilled) {\n    return DeepOrange600;\n  } else if (!prefilled && value) {\n    return ControlNumberColor;\n  }\n  return false;\n}\n\nclass GenerationUI extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { value: 30 };\n  }\n\n  generateGame = () => {\n    this.props.generateGame(this.state.value);\n  }\n\n  render() {\n    return (\n      <div className=\"generation\">\n        <div className=\"copy\">Bắt đầu với {this.state.value} ô điền trước </div>\n        <InputRange\n          maxValue={81}\n          minValue={17}\n          value={this.state.value}\n          onChange={value => this.setState({ value })}\n        />\n        <div className=\"button\" onClick={this.generateGame}>Play Sudoku</div>\n        { /* language=CSS */ }\n        <style jsx>{`\n            .copy {\n                text-align: center;\n                font-size: 1.3em;\n                margin-bottom: .5em;\n            }\n            .generation {\n                display: flex;\n                justify-content: center;\n                flex-direction: column;\n                width: 100%;\n                align-items: center;\n            }\n            :global(.input-range) {\n                width: 80%;\n                max-width: 500px;\n            }\n            .button {\n              margin-top: .5em;\n              border-radius: .25em;\n              cursor: pointer;\n              font-weight: bold;\n              text-decoration: none;\n              color: #fff;\n              position: relative;\n              display: inline-block;\n              transition: all .25s;\n              padding: 5px 10px;\n              font-size: 1.4em;\n            }\n            .button:active {\n              transform: translate(0px, 5px);\n              box-shadow: 0 1px 0 0;\n            }\n\n            .button {\n              background-color: ${backGroundBlue};\n              box-shadow: 0 2px 4px 0 ${Color(backGroundBlue).darken(0.5).hsl().string()};\n              display: flex;\n              align-items: center;\n            }\n\n            .button:hover {\n              background-color: ${Color(backGroundBlue).lighten(0.2).hsl().string()};\n            }\n        `}\n        </style>\n      </div>\n    );\n  }\n}\n\nGenerationUI.propTypes = {\n  generateGame: PropTypes.func.isRequired,\n};\n\nconst NumberControl = ({ number, onClick, completionPercentage }) => (\n  <div\n    key={number}\n    className=\"number\"\n    onClick={onClick}\n  >\n    <div>{number}</div>\n    <CirclularProgress percent={completionPercentage} />\n    <style jsx>{NumberControlStyle}</style>\n  </div>\n);\n\nNumberControl.propTypes = {\n  number: PropTypes.number.isRequired,\n  onClick: PropTypes.func,\n  completionPercentage: PropTypes.number.isRequired,\n};\n\nNumberControl.defaultProps = {\n  onClick: null,\n};\n\nconst Cell = (props) => {\n  const {\n    value, onClick, isPeer, isSelected, sameValue, prefilled, notes, conflict,\n  } = props;\n  const backgroundColor = getBackGroundColor({\n    conflict, isPeer, sameValue, isSelected,\n  });\n  const fontColor = getFontColor({ conflict, prefilled, value });\n  return (\n    <div className=\"cell\" onClick={onClick}>\n      {\n        notes ?\n          range(9).map(i =>\n            (\n              <div key={i} className=\"note-number\">\n                {notes.has(i + 1) && (i + 1)}\n              </div>\n            )) :\n          value && value\n      }\n      {/* language=CSS */}\n      <style jsx>{CellStyle}</style>\n      <style jsx>{`\n                .cell {\n                    background-color: ${backgroundColor || 'initial'};\n                    color: ${fontColor || 'initial'};\n                }\n            `}\n      </style>\n    </div>\n  );\n};\n\nCell.propTypes = {\n  // current number value\n  value: PropTypes.number,\n  // cell click handler\n  onClick: PropTypes.func.isRequired,\n  // if the cell is a peer of the selected cell\n  isPeer: PropTypes.bool.isRequired,\n  // if the cell is selected by the user\n  isSelected: PropTypes.bool.isRequired,\n  // current cell has the same value if the user selected cell\n  sameValue: PropTypes.bool.isRequired,\n  // if this was prefilled as a part of the puzzle\n  prefilled: PropTypes.bool.isRequired,\n  // current notes taken on the cell\n  notes: PropTypes.instanceOf(Set),\n  // if the current cell does not satisfy the game constraint\n  conflict: PropTypes.bool.isRequired,\n};\n\nCell.defaultProps = {\n  notes: null,\n  value: null,\n};\n\nconst CirclularProgress = ({ percent }) => (\n  <svg viewBox=\"0 0 36 36\" className=\"circular-progress\">\n    <path\n      className=\"circle-bg\"\n      d={CircularPathD}\n    />\n    <path\n      className=\"circle\"\n      strokeDasharray={`${percent * 100}, 100`}\n      d={CircularPathD}\n    />\n    { /* language=CSS */ }\n    <style jsx>{CirculuarProgressStyle}</style>\n  </svg>\n);\n\nCirclularProgress.propTypes = {\n  percent: PropTypes.number.isRequired,\n};\n\nfunction getClickHandler(onClick, onDoubleClick, delay = 250) {\n  let timeoutID = null;\n  return (event) => {\n    if (!timeoutID) {\n      timeoutID = setTimeout(() => {\n        onClick(event);\n        timeoutID = null;\n      }, delay);\n    } else {\n      timeoutID = clearTimeout(timeoutID);\n      onDoubleClick(event);\n    }\n  };\n}\n\n/**\n * make size 9 array of 0s\n * @returns {Array}\n */\nfunction makeCountObject() {\n  const countObj = [];\n  for (let i = 0; i < 10; i += 1) countObj.push(0);\n  return countObj;\n}\n\n/**\n * given a 2D array of numbers as the initial puzzle, generate the initial game state\n * @param puzzle\n * @returns {any}\n */\nfunction makeBoard({ puzzle }) {\n  // create initial count object to keep track of conflicts per number value\n  const rows = Array.from(Array(9).keys()).map(() => makeCountObject());\n  const columns = Array.from(Array(9).keys()).map(() => makeCountObject());\n  const squares = Array.from(Array(9).keys()).map(() => makeCountObject());\n  const result = puzzle.map((row, i) => (\n    row.map((cell, j) => {\n      if (cell) {\n        rows[i][cell] += 1;\n        columns[j][cell] += 1;\n        squares[((Math.floor(i / 3)) * 3) + Math.floor(j / 3)][cell] += 1;\n      }\n      return {\n        value: puzzle[i][j] > 0 ? puzzle[i][j] : null,\n        prefilled: !!puzzle[i][j],\n      };\n    })\n  ));\n  return fromJS({ puzzle: result, selected: false, choices: { rows, columns, squares } });\n}\n\n/**\n * give the coordinate update the current board with a number choice\n * @param x\n * @param y\n * @param number\n * @param fill whether to set or unset\n * @param board the immutable board given to change\n */\nfunction updateBoardWithNumber({\n  x, y, number, fill = true, board,\n}) {\n  let cell = board.get('puzzle').getIn([x, y]);\n  // delete its notes\n  cell = cell.delete('notes');\n  // set or unset its value depending on `fill`\n  cell = fill ? cell.set('value', number) : cell.delete('value');\n  const increment = fill ? 1 : -1;\n  // update the current group choices\n  const rowPath = ['choices', 'rows', x, number];\n  const columnPath = ['choices', 'columns', y, number];\n  const squarePath = ['choices', 'squares',\n    ((Math.floor(x / 3)) * 3) + Math.floor(y / 3), number];\n  return board.setIn(rowPath, board.getIn(rowPath) + increment)\n    .setIn(columnPath, board.getIn(columnPath) + increment)\n    .setIn(squarePath, board.getIn(squarePath) + increment)\n    .setIn(['puzzle', x, y], cell);\n}\n\nfunction getNumberOfGroupsAssignedForNumber(number, groups) {\n  return groups.reduce((accumulator, row) =>\n    accumulator + (row.get(number) > 0 ? 1 : 0), 0);\n}\n// eslint-disable-next-line react/no-multi-comp\nexport default class Index extends Component {\n  state = {};\n\n  componentDidMount() {\n    // eslint-disable-next-line no-undef\n    if ('serviceWorker' in navigator) {\n      // eslint-disable-next-line no-undef\n      navigator.serviceWorker\n        .register('/service-worker.js')\n        .then((reg) => {\n          console.log('ServiceWorker scope: ', reg.scope);\n          console.log('service worker registration successful');\n        })\n        .catch((err) => {\n          console.warn('service worker registration failed', err.message);\n        });\n    }\n  }\n  getSelectedCell() {\n    const { board } = this.state;\n    const selected = board.get('selected');\n    return selected && board.get('puzzle').getIn([selected.x, selected.y]);\n  }\n\n  // get the min between its completion in rows, columns and squares.\n  getNumberValueCount(number) {\n    const rows = this.state.board.getIn(['choices', 'rows']);\n    const columns = this.state.board.getIn(['choices', 'columns']);\n    const squares = this.state.board.getIn(['choices', 'squares']);\n    return Math.min(\n      getNumberOfGroupsAssignedForNumber(number, squares),\n      Math.min(\n        getNumberOfGroupsAssignedForNumber(number, rows),\n        getNumberOfGroupsAssignedForNumber(number, columns),\n      ),\n    );\n  }\n\n  generateGame = (finalCount = 20) => {\n    // get a filled puzzle generated\n    const solution = makePuzzle();\n    // pluck values from cells to create the game\n    const { puzzle } = pluck(solution, finalCount);\n    // initialize the board with choice counts\n    const board = makeBoard({ puzzle });\n    this.setState({\n      board, history: List.of(board), historyOffSet: 0, solution,\n    });\n  }\n\n  addNumberAsNote = (number) => {\n    let { board } = this.state;\n    let selectedCell = this.getSelectedCell();\n    if (!selectedCell) return;\n    const prefilled = selectedCell.get('prefilled');\n    if (prefilled) return;\n    const { x, y } = board.get('selected');\n    const currentValue = selectedCell.get('value');\n    if (currentValue) {\n      board = updateBoardWithNumber({\n        x, y, number: currentValue, fill: false, board: this.state.board,\n      });\n    }\n    let notes = selectedCell.get('notes') || Set();\n    if (notes.has(number)) {\n      notes = notes.delete(number);\n    } else {\n      notes = notes.add(number);\n    }\n    selectedCell = selectedCell.set('notes', notes);\n    selectedCell = selectedCell.delete('value');\n    board = board.setIn(['puzzle', x, y], selectedCell);\n    this.updateBoard(board);\n  };\n\n  updateBoard = (newBoard) => {\n    let { history } = this.state;\n    const { historyOffSet } = this.state;\n    // anything before current step is still in history\n    history = history.slice(0, historyOffSet + 1);\n    // add itself onto the history\n    history = history.push(newBoard);\n    // update the game\n    this.setState({ board: newBoard, history, historyOffSet: history.size - 1 });\n  };\n\n  canUndo = () => this.state.historyOffSet > 0\n\n  redo = () => {\n    const { history } = this.state;\n    let { historyOffSet } = this.state;\n    if (history.size) {\n      historyOffSet = Math.min(history.size - 1, historyOffSet + 1);\n      const board = history.get(historyOffSet);\n      this.setState({ board, historyOffSet });\n    }\n  };\n\n  undo = () => {\n    const { history } = this.state;\n    let { historyOffSet, board } = this.state;\n    if (history.size) {\n      historyOffSet = Math.max(0, historyOffSet - 1);\n      board = history.get(historyOffSet);\n      this.setState({ board, historyOffSet, history });\n    }\n  };\n\n  eraseSelected = () => {\n    const selectedCell = this.getSelectedCell();\n    if (!selectedCell) return;\n    this.fillNumber(false);\n  }\n\n  fillSelectedWithSolution = () => {\n    const { board, solution } = this.state;\n    const selectedCell = this.getSelectedCell();\n    if (!selectedCell) return;\n    const { x, y } = board.get('selected');\n    this.fillNumber(solution[x][y]);\n  }\n\n\n  // fill currently selected cell with number\n  fillNumber = (number) => {\n    let { board } = this.state;\n    const selectedCell = this.getSelectedCell();\n    // no-op if nothing is selected\n    if (!selectedCell) return;\n    const prefilled = selectedCell.get('prefilled');\n    // no-op if it is refilled\n    if (prefilled) return;\n    const { x, y } = board.get('selected');\n    const currentValue = selectedCell.get('value');\n    // remove the current value and update the game state\n    if (currentValue) {\n      board = updateBoardWithNumber({\n        x, y, number: currentValue, fill: false, board: this.state.board,\n      });\n    }\n    // update to new number if any\n    const setNumber = currentValue !== number && number;\n    if (setNumber) {\n      board = updateBoardWithNumber({\n        x, y, number, fill: true, board,\n      });\n    }\n    this.updateBoard(board);\n  };\n\n  selectCell = (x, y) => {\n    let { board } = this.state;\n    board = board.set('selected', { x, y });\n    this.setState({ board });\n  };\n\n  isConflict(i, j) {\n    const { value } = this.state.board.getIn(['puzzle', i, j]).toJSON();\n    if (!value) return false;\n    const rowConflict =\n      this.state.board.getIn(['choices', 'rows', i, value]) > 1;\n    const columnConflict =\n      this.state.board.getIn(['choices', 'columns', j, value]) > 1;\n    const squareConflict =\n      this.state.board.getIn(['choices', 'squares',\n        ((Math.floor(i / 3)) * 3) + Math.floor(j / 3), value]) > 1;\n    return rowConflict || columnConflict || squareConflict;\n  }\n\n  renderCell(cell, x, y) {\n    const { board } = this.state;\n    const selected = this.getSelectedCell();\n    const { value, prefilled, notes } = cell.toJSON();\n    const conflict = this.isConflict(x, y);\n    const peer = areCoordinatePeers({ x, y }, board.get('selected'));\n    const sameValue = !!(selected && selected.get('value')\n      && value === selected.get('value'));\n\n    const isSelected = cell === selected;\n    return (<Cell\n      prefilled={prefilled}\n      notes={notes}\n      sameValue={sameValue}\n      isSelected={isSelected}\n      isPeer={peer}\n      value={value}\n      onClick={() => { this.selectCell(x, y); }}\n      key={y}\n      x={x}\n      y={y}\n      conflict={conflict}\n    />);\n  }\n\n  renderNumberControl() {\n    const selectedCell = this.getSelectedCell();\n    const prefilled = selectedCell && selectedCell.get('prefilled');\n    return (\n      <div className=\"control\">\n        {range(9).map((i) => {\n          const number = i + 1;\n          // handles binding single click and double click callbacks\n          const clickHandle = getClickHandler(\n            () => { this.fillNumber(number); },\n            () => { this.addNumberAsNote(number); },\n          );\n          return (\n            <NumberControl\n              key={number}\n              number={number}\n              onClick={!prefilled ? clickHandle : undefined}\n              completionPercentage={this.getNumberValueCount(number) / 9}\n            />);\n        })}\n        <style jsx>{ControlStyle}</style>\n      </div>\n    );\n  }\n\n  renderActions() {\n    const { history } = this.state;\n    const selectedCell = this.getSelectedCell();\n    const prefilled = selectedCell && selectedCell.get('prefilled');\n    return (\n      <div className=\"actions\">\n        <div className=\"action\" onClick={history.size ? this.undo : null}>\n          <ReloadIcon />Hoàn tác\n        </div>\n        <div className=\"action redo\" onClick={history.size ? this.redo : null}>\n          <ReloadIcon />Khôi phục\n        </div>\n        <div className=\"action\" onClick={!prefilled ? this.eraseSelected : null}>\n          <RemoveIcon />Xoá\n        </div>\n        <div\n          className=\"action\"\n          onClick={!prefilled ?\n          this.fillSelectedWithSolution : null}\n        >\n          <LoupeIcon />Gợi ý\n        </div>\n        <style jsx>{ActionsStyle}</style>\n      </div>\n    );\n  }\n\n  renderPuzzle() {\n    const { board } = this.state;\n    return (\n      <div className=\"puzzle\">\n        {board.get('puzzle').map((row, i) => (\n          // eslint-disable-next-line react/no-array-index-key\n          <div key={i} className=\"row\">\n            {\n              row.map((cell, j) => this.renderCell(cell, i, j)).toArray()\n            }\n          </div>\n        )).toArray()}\n        <style jsx>{PuzzleStyle}</style>\n      </div>\n    );\n  }\n\n  renderControls() {\n    return (\n      <div className=\"controls\">\n        {this.renderNumberControl()}\n        {this.renderActions()}\n        { /* language=CSS */ }\n        <style jsx>{`\n            .controls {\n                margin-top: .3em;\n                display: flex;\n                flex-wrap: wrap;\n                justify-content: center;\n                width: 100%;\n                padding: .5em 0;\n            }\n        `}\n        </style>\n      </div>\n    );\n  }\n\n  renderGenerationUI() {\n    return (\n      <GenerationUI generateGame={this.generateGame} />\n    );\n  }\n\n  renderHeader() {\n    return (\n      <div className=\"header\">\n        <div className=\"new-game\" onClick={() => this.setState({ board: false })}>\n          <ReturnIcon />\n          <div>Trò chơi mới</div>\n        </div>\n        {/* <Tip /> */}\n        { /* language=CSS */ }\n        <style jsx>{`\n            .header {\n                display: flex;\n                width: 100%;\n                justify-content: space-between;\n                max-width: 500px;\n                padding: 0 0.5em;\n                box-sizing: border-box;\n            }\n            .new-game {\n                cursor: pointer;\n                margin-top: .2em;\n                display: inline-flex;\n                justify-content: center;\n                align-items: center;\n                padding: .2em 0;\n            }\n            .new-game :global(svg) {\n                height: 1em;\n                margin-bottom: .3em;\n            }\n        `}\n        </style>\n      </div>\n    );\n  }\n\n  render() {\n    const { board } = this.state;\n    return (\n      <div className=\"body\">\n        <NextHead>\n          <title>Sudoku Evolved</title>\n          <meta name=\"viewport\" content=\"initial-scale=1.0, width=device-width\" />\n          <meta name=\"description\" content={Description} />\n          <link href=\"https://fonts.googleapis.com/css?family=Special+Elite\" rel=\"stylesheet\" />\n          <meta property=\"og:url\" content=\"https://sudoku.sitianliu.com/\" />\n          <meta property=\"og:title\" content=\"Sudoku Evolved\" />\n          <meta property=\"og:type\" content=\"website\" />\n          <meta property=\"og:description\" content={Description} />\n          <meta property=\"og:image\" content=\"https://sudoku.sitianliu.com/static/og-image.png\" />\n        </NextHead>\n        {!board && this.renderGenerationUI()}\n        {board && this.renderHeader()}\n        {board && this.renderPuzzle()}\n        {board && this.renderControls()}\n        {/* <div className=\"rooter\">\n          Made with <span>❤️</span>️ By <a href=\"https://www.sitianliu.com/\">Sitian Liu</a> | <a href=\"https://medium.com/@sitianliu_57680/building-a-sudoku-game-in-react-ca663915712\">Blog Post</a>\n        </div> */}\n        { /* language=CSS */ }\n        <style jsx>{`\n            :global(body), .body {\n                font-family: 'Special Elite', cursive;\n            }\n            .body {\n                display: flex;\n                flex-direction: column;\n                align-items: center;\n                justify-content: center;\n                height: 100vh;\n                width: 100vw;\n                position: relative;\n            }\n            @media (min-width: 800px) and (min-height: 930px){\n                :global(.header, .puzzle, .controls) {\n                    font-size: 1.5em;\n                }\n            }\n            @media (max-width: 800px) and (min-width: 600px){\n                :global(.header, .puzzle, .controls) {\n                    font-size: 1.2em;\n                }\n            }\n            @media (max-height: 930px) and (min-height: 800px) and (min-width: 600px){\n                :global(.header, .puzzle, .controls) {\n                    font-size: 1.2em;\n                }\n            }\n            @media (max-height: 800px) and (min-height: 600px) and (min-width: 370px){\n                :global(.header, .puzzle, .controls) {\n                    font-size: 1em;\n                }\n            }\n            @media (max-width: 370px){\n                :global(.header, .puzzle, .controls) {\n                    font-size: .8em;\n                }\n            }\n            @media (max-height: 600px){\n                :global(.header, .puzzle, .controls) {\n                    font-size: .8em;\n                }\n            }\n            :global(body) {\n                margin: 0;\n            }\n            .rooter {\n                position: fixed;\n                bottom: 0;\n                font-size: .8em;\n                width: 100%;\n                text-align: center;\n            }\n        `}\n        </style>\n        <style jsx global>{RangeStyle}</style>\n      </div>\n    );\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./pages/index.js"],"sourceRoot":""}