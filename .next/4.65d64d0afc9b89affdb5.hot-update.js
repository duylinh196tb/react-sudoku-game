webpackHotUpdate(4,{

/***/ "./pages/index.js":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_styled_jsx_style__ = __webpack_require__("./node_modules/styled-jsx/style.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_styled_jsx_style___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_styled_jsx_style__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_react__ = __webpack_require__("./node_modules/react/cjs/react.development.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_react__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_immutable__ = __webpack_require__("./node_modules/immutable/dist/immutable.es.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_prop_types__ = __webpack_require__("./node_modules/prop-types/index.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_prop_types___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_prop_types__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_next_head__ = __webpack_require__("./node_modules/next/head.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_next_head___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_next_head__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_color__ = __webpack_require__("./node_modules/color/index.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_color___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5_color__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_react_input_range__ = __webpack_require__("./node_modules/react-input-range/lib/js/index.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_react_input_range___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6_react_input_range__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__input_range_style__ = __webpack_require__("./input-range-style.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__sudoku__ = __webpack_require__("./sudoku.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__colors__ = __webpack_require__("./colors.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__components_tool_tip__ = __webpack_require__("./components/tool-tip.js");
var _jsxFileName = "/Users/duylinh196tb/WORK/Learn/React/react-sudoku-game/pages/index.js";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();



(function () {
  var enterModule = __webpack_require__("./node_modules/react-hot-loader/patch.js").enterModule;

  enterModule && enterModule(module);
})();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/* eslint-disable jsx-a11y/accessible-emoji */







// eslint-disable-next-line import/no-extraneous-dependencies




var LoupeIcon = function LoupeIcon(props) {
  return __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
    "svg",
    props,
    __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement("path", {
      d: "M457.602 54.355c-72.417-72.416-190.245-72.416-262.661 0-35.081 35.079-54.399 81.721-54.399 131.331 0 45.193 16.039 87.917 45.413 121.688l-22.119 22.119-22.542-22.542a13.173 13.173 0 0 0-18.628 0L17.055 412.563C6.057 423.559 0 438.18 0 453.733c0 15.552 6.057 30.174 17.053 41.17 10.998 10.998 25.619 17.054 41.17 17.054 15.551 0 30.174-6.057 41.17-17.053l105.612-105.61a13.173 13.173 0 0 0 0-18.628l-22.542-22.542 22.126-22.126c34.793 30.215 78.234 45.331 121.682 45.331 47.561 0 95.123-18.104 131.331-54.311C492.68 281.938 512 235.298 512 185.688c0-49.613-19.318-96.254-54.398-131.333zM80.765 476.275c-6.021 6.021-14.026 9.337-22.542 9.337-8.515 0-16.521-3.317-22.542-9.338-6.02-6.02-9.337-14.026-9.337-22.54s3.317-16.521 9.338-22.542l58.934-58.934L139.7 417.34l-58.935 58.935zm77.565-77.564l-45.084-45.084 18.734-18.734 45.084 45.085-18.734 18.733zm280.643-100.323c-62.144 62.146-163.259 62.146-225.403 0-30.104-30.104-46.683-70.128-46.683-112.702s16.579-82.598 46.683-112.701c31.072-31.072 71.887-46.609 112.702-46.609 40.814 0 81.63 15.535 112.702 46.609 30.104 30.103 46.683 70.128 46.683 112.701s-16.58 82.598-46.684 112.702z"
    }),
    __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement("path", {
      d: "M417.234 94.721c-50.158-50.156-131.769-50.158-181.927 0-50.156 50.158-50.156 131.769.001 181.927 25.079 25.077 58.02 37.617 90.963 37.617s65.885-12.54 90.964-37.617v-.001c50.156-50.156 50.156-131.768-.001-181.926zM398.605 258.02c-39.886 39.886-104.783 39.886-144.669.001-39.886-39.886-39.886-104.784-.001-144.67 19.945-19.946 46.136-29.914 72.336-29.914 26.193 0 52.394 9.974 72.334 29.914 39.886 39.885 39.886 104.783 0 144.669z"
    }),
    __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement("path", {
      d: "M375.321 136.636c-27.048-27.045-71.053-27.045-98.1 0-5.144 5.144-5.144 13.484 0 18.63 5.144 5.144 13.484 5.144 18.63 0 16.772-16.774 44.068-16.774 60.842 0a13.128 13.128 0 0 0 9.314 3.858 13.13 13.13 0 0 0 9.314-3.858c5.144-5.144 5.144-13.485 0-18.63z"
    })
  );
};

LoupeIcon.defaultProps = {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 512 512"
};

var RemoveIcon = function RemoveIcon(props) {
  return __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
    "svg",
    props,
    __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement("path", {
      d: "M60.197 418.646H27.571c-6.978 0-12.634 5.657-12.634 12.634s5.656 12.634 12.634 12.634h32.627c6.978 0 12.634-5.657 12.634-12.634-.001-6.976-5.658-12.634-12.635-12.634zM114.205 467.363c-4.934-4.932-12.933-4.934-17.867 0l-23.07 23.07c-4.934 4.934-4.935 12.933 0 17.868a12.598 12.598 0 0 0 8.933 3.701c3.233 0 6.467-1.234 8.933-3.701l23.07-23.07c4.935-4.934 4.936-12.933.001-17.868zM484.431 424.963H262.965l226.699-226.688c9.851-9.852 9.852-25.881.001-35.733L334.522 7.388c-9.853-9.851-25.882-9.851-35.735 0l-247.99 247.99c-14.318 14.318-22.203 33.354-22.203 53.602 0 20.247 7.885 39.284 22.203 53.602l74.701 74.699c8.351 8.351 19.455 12.951 31.266 12.951H484.43c6.978 0 12.634-5.657 12.634-12.634.001-6.977-5.655-12.635-12.633-12.635zm-327.666 0c-5.062 0-9.82-1.972-13.401-5.551l-74.699-74.699c-19.704-19.704-19.704-51.765 0-71.468l40.557-40.557 133.335 133.336c2.467 2.466 5.7 3.7 8.933 3.7s6.467-1.234 8.933-3.7c4.934-4.934 4.935-12.933.001-17.868L127.09 214.821 316.655 25.254l155.142 155.155L227.23 424.963h-70.465z"
    })
  );
};

RemoveIcon.defaultProps = {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 512.001 512.001"
};

var ReloadIcon = function ReloadIcon(props) {
  return __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
    "svg",
    props,
    __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement("path", {
      d: "M482.195 226.196C482.195 101.471 380.725 0 256.001 0S29.805 101.471 29.805 226.196c0 7.409 6.007 13.416 13.416 13.416s13.416-6.008 13.416-13.416c0-109.93 89.434-199.363 199.363-199.363s199.363 89.434 199.363 199.363c0 109.928-89.434 199.362-199.363 199.362h-23.276l33.282-37.255c4.937-5.525 4.458-14.007-1.067-18.944-5.525-4.937-14.008-4.457-18.944 1.068l-47.576 53.255c-7.788 8.718-7.788 21.866 0 30.584l47.576 53.255a13.379 13.379 0 0 0 10.01 4.478c3.181 0 6.375-1.126 8.934-3.41 5.526-4.937 6.004-13.419 1.067-18.944l-33.282-37.255H256c124.725 0 226.195-101.471 226.195-226.194z"
    })
  );
};

ReloadIcon.defaultProps = {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 512 512"
};

var ReturnIcon = function ReturnIcon(props) {
  return __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
    "svg",
    props,
    __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement("path", {
      d: "M384.834 180.699H36.101l73.326-82.187c4.755-5.33 4.289-13.505-1.041-18.26-5.328-4.754-13.505-4.29-18.26 1.041l-82.582 92.56c-10.059 11.278-10.058 28.282.001 39.557l82.582 92.561a12.897 12.897 0 0 0 9.654 4.323c3.064 0 6.139-1.083 8.606-3.282 5.33-4.755 5.795-12.93 1.041-18.26l-73.326-82.188h348.733c55.858 0 101.3 45.444 101.3 101.3s-45.443 101.3-101.3 101.3h-61.58c-7.143 0-12.933 5.791-12.933 12.933 0 7.142 5.79 12.933 12.933 12.933h61.58c70.12 0 127.166-57.046 127.166-127.166-.001-70.119-57.047-127.165-127.167-127.165z"
    })
  );
};

ReturnIcon.defaultProps = {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 512.001 512.001"
};






var Description = "Discover the next evolution of Sudoku with amazing graphics, animations, and user-friendly features. Enjoy a Sudoku experience like you never have before with customizable game generation, cell highlighting, intuitive controls and more!";
var cellWidth = 2.5;

var LightBlue100 = "#B3E5FC";
var LightBlue200 = "#81D4FA";
var LightBlue300 = "#4FC3F7";
var Indigo700 = "#303F9F";
var DeepOrange200 = "#FFAB91";
var DeepOrange600 = "#F4511E";
var ControlNumberColor = Indigo700;

// eslint-disable-next-line no-lone-blocks
{
  /* language=CSS */
}
var CellStyle = new String(".cell{height:" + cellWidth + "em;width:" + cellWidth + "em;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;font-size:1.1em;font-weight:bold;-webkit-transition:background-color 0.3s ease-in-out;transition:background-color 0.3s ease-in-out;}.cell:nth-child(3n + 3):not(:last-child){border-right:2px solid black;}.cell:not(:last-child){border-right:1px solid black;}.note-number{font-size:0.6em;width:33%;height:33%;box-sizing:border-box;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=pages/index.js */");

// eslint-disable-next-line no-lone-blocks
CellStyle.__hash = "1389903698";
CellStyle.__scoped = ".cell.jsx-1317397587{height:" + cellWidth + "em;width:" + cellWidth + "em;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;font-size:1.1em;font-weight:bold;-webkit-transition:background-color 0.3s ease-in-out;transition:background-color 0.3s ease-in-out;}.cell.jsx-1317397587:nth-child(3n + 3):not(:last-child){border-right:2px solid black;}.cell.jsx-1317397587:not(:last-child){border-right:1px solid black;}.note-number.jsx-1317397587{font-size:0.6em;width:33%;height:33%;box-sizing:border-box;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=pages/index.js */";
CellStyle.__scopedHash = "1317397587";
{
  /* language=CSS */
}
var ActionsStyle = new String(".actions{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;width:100%;max-width:400px;margin-top:0.5em;padding:0 0.6em;}.action{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;}.action svg{width:2.5em;margin-bottom:0.2em;}.redo svg{-webkit-transform:scaleX(-1);-ms-transform:scaleX(-1);transform:scaleX(-1);}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=pages/index.js */");

// eslint-disable-next-line no-lone-blocks
ActionsStyle.__hash = "1619006800";
ActionsStyle.__scoped = ".actions.jsx-1465932113{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;width:100%;max-width:400px;margin-top:0.5em;padding:0 0.6em;}.action.jsx-1465932113{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;}.action.jsx-1465932113 svg{width:2.5em;margin-bottom:0.2em;}.redo.jsx-1465932113 svg{-webkit-transform:scaleX(-1);-ms-transform:scaleX(-1);transform:scaleX(-1);}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBhZ2VzL2luZGV4LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTJFd0IsQUFHa0IsQUFTQSxBQUtELEFBSVMsWUFIRCxvQkFDdEIsMENBZnFCLEFBU0EsQ0FTckIsNEZBakJnQyxBQVNSLDhFQUN4QixxQ0FUYSxXQUNLLGdCQUNDLGlCQUNELGdCQUNsQiIsImZpbGUiOiJwYWdlcy9pbmRleC5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvZHV5bGluaDE5NnRiL1dPUksvTGVhcm4vUmVhY3QvcmVhY3Qtc3Vkb2t1LWdhbWUiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBqc3gtYTExeS9hY2Nlc3NpYmxlLWVtb2ppICovXG5pbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBTZXQsIExpc3QsIGZyb21KUyB9IGZyb20gXCJpbW11dGFibGVcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcbmltcG9ydCBOZXh0SGVhZCBmcm9tIFwibmV4dC9oZWFkXCI7XG5pbXBvcnQgQ29sb3IgZnJvbSBcImNvbG9yXCI7XG5pbXBvcnQgSW5wdXRSYW5nZSBmcm9tIFwicmVhY3QtaW5wdXQtcmFuZ2VcIjtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby1leHRyYW5lb3VzLWRlcGVuZGVuY2llc1xuaW1wb3J0IGNzcyBmcm9tIFwic3R5bGVkLWpzeC9jc3NcIjtcblxuaW1wb3J0IFJhbmdlU3R5bGUgZnJvbSBcIi4uL2lucHV0LXJhbmdlLXN0eWxlXCI7XG5pbXBvcnQgTG91cGVJY29uIGZyb20gXCIuLi9zdmcvbG91cGUuc3ZnXCI7XG5pbXBvcnQgUmVtb3ZlSWNvbiBmcm9tIFwiLi4vc3ZnL3JlbW92ZS5zdmdcIjtcbmltcG9ydCBSZWxvYWRJY29uIGZyb20gXCIuLi9zdmcvcmVsb2FkLnN2Z1wiO1xuaW1wb3J0IFJldHVybkljb24gZnJvbSBcIi4uL3N2Zy9yZXR1cm4uc3ZnXCI7XG5cbmltcG9ydCB7XG4gIG1ha2VQdXp6bGUsXG4gIHBsdWNrLFxuICBpc1BlZXIgYXMgYXJlQ29vcmRpbmF0ZVBlZXJzLFxuICByYW5nZSxcbn0gZnJvbSBcIi4uL3N1ZG9rdVwiO1xuaW1wb3J0IHsgYmFja0dyb3VuZEJsdWUgfSBmcm9tIFwiLi4vY29sb3JzXCI7XG5pbXBvcnQgVGlwIGZyb20gXCIuLi9jb21wb25lbnRzL3Rvb2wtdGlwXCI7XG5cbmNvbnN0IERlc2NyaXB0aW9uID1cbiAgXCJEaXNjb3ZlciB0aGUgbmV4dCBldm9sdXRpb24gb2YgU3Vkb2t1IHdpdGggYW1hemluZyBncmFwaGljcywgYW5pbWF0aW9ucywgYW5kIHVzZXItZnJpZW5kbHkgZmVhdHVyZXMuIEVuam95IGEgU3Vkb2t1IGV4cGVyaWVuY2UgbGlrZSB5b3UgbmV2ZXIgaGF2ZSBiZWZvcmUgd2l0aCBjdXN0b21pemFibGUgZ2FtZSBnZW5lcmF0aW9uLCBjZWxsIGhpZ2hsaWdodGluZywgaW50dWl0aXZlIGNvbnRyb2xzIGFuZCBtb3JlIVwiO1xuY29uc3QgY2VsbFdpZHRoID0gMi41O1xuXG5jb25zdCBMaWdodEJsdWUxMDAgPSBcIiNCM0U1RkNcIjtcbmNvbnN0IExpZ2h0Qmx1ZTIwMCA9IFwiIzgxRDRGQVwiO1xuY29uc3QgTGlnaHRCbHVlMzAwID0gXCIjNEZDM0Y3XCI7XG5jb25zdCBJbmRpZ283MDAgPSBcIiMzMDNGOUZcIjtcbmNvbnN0IERlZXBPcmFuZ2UyMDAgPSBcIiNGRkFCOTFcIjtcbmNvbnN0IERlZXBPcmFuZ2U2MDAgPSBcIiNGNDUxMUVcIjtcbmNvbnN0IENvbnRyb2xOdW1iZXJDb2xvciA9IEluZGlnbzcwMDtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWxvbmUtYmxvY2tzXG57XG4gIC8qIGxhbmd1YWdlPUNTUyAqL1xufVxuY29uc3QgQ2VsbFN0eWxlID0gY3NzYFxuICAuY2VsbCB7XG4gICAgaGVpZ2h0OiAke2NlbGxXaWR0aH1lbTtcbiAgICB3aWR0aDogJHtjZWxsV2lkdGh9ZW07XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBmbGV4LXdyYXA6IHdyYXA7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICBmb250LXNpemU6IDEuMWVtO1xuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICAgIHRyYW5zaXRpb246IGJhY2tncm91bmQtY29sb3IgMC4zcyBlYXNlLWluLW91dDtcbiAgfVxuICAuY2VsbDpudGgtY2hpbGQoM24gKyAzKTpub3QoOmxhc3QtY2hpbGQpIHtcbiAgICBib3JkZXItcmlnaHQ6IDJweCBzb2xpZCBibGFjaztcbiAgfVxuICAuY2VsbDpub3QoOmxhc3QtY2hpbGQpIHtcbiAgICBib3JkZXItcmlnaHQ6IDFweCBzb2xpZCBibGFjaztcbiAgfVxuICAubm90ZS1udW1iZXIge1xuICAgIGZvbnQtc2l6ZTogMC42ZW07XG4gICAgd2lkdGg6IDMzJTtcbiAgICBoZWlnaHQ6IDMzJTtcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgfVxuYDtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWxvbmUtYmxvY2tzXG57XG4gIC8qIGxhbmd1YWdlPUNTUyAqL1xufVxuY29uc3QgQWN0aW9uc1N0eWxlID0gY3NzYFxuICAuYWN0aW9ucyB7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBtYXgtd2lkdGg6IDQwMHB4O1xuICAgIG1hcmdpbi10b3A6IDAuNWVtO1xuICAgIHBhZGRpbmc6IDAgMC42ZW07XG4gIH1cbiAgLmFjdGlvbiB7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIH1cbiAgLmFjdGlvbiA6Z2xvYmFsKHN2Zykge1xuICAgIHdpZHRoOiAyLjVlbTtcbiAgICBtYXJnaW4tYm90dG9tOiAwLjJlbTtcbiAgfVxuICAucmVkbyA6Z2xvYmFsKHN2Zykge1xuICAgIHRyYW5zZm9ybTogc2NhbGVYKC0xKTtcbiAgfVxuYDtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWxvbmUtYmxvY2tzXG57XG4gIC8qIGxhbmd1YWdlPUNTUyAqL1xufVxuY29uc3QgQ29udHJvbFN0eWxlID0gY3NzYFxuICAuY29udHJvbCB7XG4gICAgcGFkZGluZzogMCAyZW07XG4gICAgY3Vyc29yOiBwb2ludGVyO1xuICAgIGRpc3BsYXk6IGlubGluZS1mbGV4O1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgZmxleC13cmFwOiB3cmFwO1xuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgIGZvbnQtZmFtaWx5OiBcIlNwZWNpYWwgRWxpdGVcIiwgY3Vyc2l2ZTtcbiAgICB0cmFuc2l0aW9uOiBmaWx0ZXIgMC41cyBlYXNlLWluLW91dDtcbiAgICB3aWR0aDogMTAwJTtcbiAgfVxuYDtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWxvbmUtYmxvY2tzXG57XG4gIC8qIGxhbmd1YWdlPUNTUyAqL1xufVxuY29uc3QgTnVtYmVyQ29udHJvbFN0eWxlID0gY3NzYFxuICAubnVtYmVyIHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIGZvbnQtc2l6ZTogMmVtO1xuICAgIG1hcmdpbjogMC4xZW07XG4gICAgd2lkdGg6IDEuNWVtO1xuICAgIGhlaWdodDogMS41ZW07XG4gICAgY29sb3I6ICR7Q29udHJvbE51bWJlckNvbG9yfTtcbiAgICBib3gtc2hhZG93OiAwIDFweCAycHggcmdiYSgwLCAwLCAwLCAwLjE2KSwgMCAxcHggMnB4IHJnYmEoMCwgMCwgMCwgMC4yMyk7XG4gICAgYm9yZGVyLXJhZGl1czogNTAlO1xuICB9XG4gIC5udW1iZXIgPiBkaXYge1xuICAgIG1hcmdpbi10b3A6IDAuM2VtO1xuICB9XG5gO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbG9uZS1ibG9ja3NcbntcbiAgLyogbGFuZ3VhZ2U9Q1NTICovXG59XG5jb25zdCBQdXp6bGVTdHlsZSA9IGNzc2BcbiAgLnB1enpsZSB7XG4gICAgbWFyZ2luLXRvcDogMC41ZW07XG4gICAgd2lkdGg6ICR7Y2VsbFdpZHRoICogOX1lbTtcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgYm94LXNoYWRvdzogMCAzcHggNnB4IHJnYmEoMCwgMCwgMCwgMC4xNiksIDAgM3B4IDZweCByZ2JhKDAsIDAsIDAsIDAuMjMpO1xuICB9XG4gIC5yb3cge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICBmbGV4OiAwO1xuICAgIHdpZHRoOiAke2NlbGxXaWR0aCAqIDl9ZW07XG4gIH1cbiAgLnJvdzpub3QoOmxhc3QtY2hpbGQpIHtcbiAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgYmxhY2s7XG4gIH1cbiAgLnJvdzpudGgtY2hpbGQoM24gKyAzKTpub3QoOmxhc3QtY2hpbGQpIHtcbiAgICBib3JkZXItYm90dG9tOiAycHggc29saWQgYmxhY2sgIWltcG9ydGFudDtcbiAgfVxuYDtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWxvbmUtYmxvY2tzXG57XG4gIC8qIGxhbmd1YWdlPUNTUyAqL1xufVxuY29uc3QgQ2lyY3VsdWFyUHJvZ3Jlc3NTdHlsZSA9IGNzc2BcbiAgLmNpcmN1bGFyLXByb2dyZXNzIHtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgICB3aWR0aDogMTAwJTtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgdG9wOiAwO1xuICAgIGxlZnQ6IDA7XG4gICAgdHJhbnNpdGlvbjogZmlsdGVyIDAuNHMgZWFzZS1pbi1vdXQ7XG4gIH1cblxuICAuY2lyY2xlLWJnIHtcbiAgICBmaWxsOiBub25lO1xuICAgIHN0cm9rZTogI2VlZTtcbiAgICBzdHJva2Utd2lkdGg6IDMuODtcbiAgfVxuXG4gIC5jaXJjbGUge1xuICAgIHN0cm9rZTogJHtDb250cm9sTnVtYmVyQ29sb3J9O1xuICAgIHRyYW5zaXRpb246IHN0cm9rZS1kYXNoYXJyYXkgMC40cyBlYXNlLWluLW91dDtcbiAgICBmaWxsOiBub25lO1xuICAgIHN0cm9rZS13aWR0aDogMi44O1xuICAgIHN0cm9rZS1saW5lY2FwOiByb3VuZDtcbiAgfVxuYDtcblxuY29uc3QgQ2lyY3VsYXJQYXRoRCA9XG4gIFwiTTE4IDIuMDg0NSBhIDE1LjkxNTUgMTUuOTE1NSAwIDAgMSAwIDMxLjgzMSBhIDE1LjkxNTUgMTUuOTE1NSAwIDAgMSAwIC0zMS44MzFcIjtcblxuZnVuY3Rpb24gZ2V0QmFja0dyb3VuZENvbG9yKHsgY29uZmxpY3QsIGlzUGVlciwgc2FtZVZhbHVlLCBpc1NlbGVjdGVkIH0pIHtcbiAgaWYgKGNvbmZsaWN0ICYmIGlzUGVlciAmJiBzYW1lVmFsdWUpIHtcbiAgICByZXR1cm4gRGVlcE9yYW5nZTIwMDtcbiAgfSBlbHNlIGlmIChzYW1lVmFsdWUpIHtcbiAgICByZXR1cm4gTGlnaHRCbHVlMzAwO1xuICB9IGVsc2UgaWYgKGlzU2VsZWN0ZWQpIHtcbiAgICByZXR1cm4gTGlnaHRCbHVlMjAwO1xuICB9IGVsc2UgaWYgKGlzUGVlcikge1xuICAgIHJldHVybiBMaWdodEJsdWUxMDA7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBnZXRGb250Q29sb3IoeyB2YWx1ZSwgY29uZmxpY3QsIHByZWZpbGxlZCB9KSB7XG4gIGlmIChjb25mbGljdCAmJiAhcHJlZmlsbGVkKSB7XG4gICAgcmV0dXJuIERlZXBPcmFuZ2U2MDA7XG4gIH0gZWxzZSBpZiAoIXByZWZpbGxlZCAmJiB2YWx1ZSkge1xuICAgIHJldHVybiBDb250cm9sTnVtYmVyQ29sb3I7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5jbGFzcyBHZW5lcmF0aW9uVUkgZXh0ZW5kcyBDb21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcblxuICAgIHRoaXMuc3RhdGUgPSB7IHZhbHVlOiAzMCB9O1xuICB9XG5cbiAgZ2VuZXJhdGVHYW1lID0gKCkgPT4ge1xuICAgIHRoaXMucHJvcHMuZ2VuZXJhdGVHYW1lKHRoaXMuc3RhdGUudmFsdWUpO1xuICB9O1xuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJnZW5lcmF0aW9uXCI+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29weVwiPkLhuq90IMSR4bqndSB24bubaSB7dGhpcy5zdGF0ZS52YWx1ZX0gw7QgxJFp4buBbiB0csaw4bubYyA8L2Rpdj5cbiAgICAgICAgPElucHV0UmFuZ2VcbiAgICAgICAgICBtYXhWYWx1ZT17ODF9XG4gICAgICAgICAgbWluVmFsdWU9ezE3fVxuICAgICAgICAgIHZhbHVlPXt0aGlzLnN0YXRlLnZhbHVlfVxuICAgICAgICAgIG9uQ2hhbmdlPXsodmFsdWUpID0+IHRoaXMuc2V0U3RhdGUoeyB2YWx1ZSB9KX1cbiAgICAgICAgLz5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJidXR0b25cIiBvbkNsaWNrPXt0aGlzLmdlbmVyYXRlR2FtZX0+XG4gICAgICAgICAgUGxheSBTdWRva3VcbiAgICAgICAgPC9kaXY+XG4gICAgICAgIHsvKiBsYW5ndWFnZT1DU1MgKi99XG4gICAgICAgIDxzdHlsZSBqc3g+XG4gICAgICAgICAge2BcbiAgICAgICAgICAgIC5jb3B5IHtcbiAgICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgICAgICAgICAgICBmb250LXNpemU6IDEuM2VtO1xuICAgICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAwLjVlbTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC5nZW5lcmF0aW9uIHtcbiAgICAgICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgICAgICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgOmdsb2JhbCguaW5wdXQtcmFuZ2UpIHtcbiAgICAgICAgICAgICAgd2lkdGg6IDgwJTtcbiAgICAgICAgICAgICAgbWF4LXdpZHRoOiA1MDBweDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC5idXR0b24ge1xuICAgICAgICAgICAgICBtYXJnaW4tdG9wOiAwLjVlbTtcbiAgICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogMC4yNWVtO1xuICAgICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICAgICAgICAgICAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG4gICAgICAgICAgICAgIGNvbG9yOiAjZmZmO1xuICAgICAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICAgICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICAgICAgICAgICAgdHJhbnNpdGlvbjogYWxsIDAuMjVzO1xuICAgICAgICAgICAgICBwYWRkaW5nOiA1cHggMTBweDtcbiAgICAgICAgICAgICAgZm9udC1zaXplOiAxLjRlbTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC5idXR0b246YWN0aXZlIHtcbiAgICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoMHB4LCA1cHgpO1xuICAgICAgICAgICAgICBib3gtc2hhZG93OiAwIDFweCAwIDA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC5idXR0b24ge1xuICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke2JhY2tHcm91bmRCbHVlfTtcbiAgICAgICAgICAgICAgYm94LXNoYWRvdzogMCAycHggNHB4IDBcbiAgICAgICAgICAgICAgICAke0NvbG9yKGJhY2tHcm91bmRCbHVlKS5kYXJrZW4oMC41KS5oc2woKS5zdHJpbmcoKX07XG4gICAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC5idXR0b246aG92ZXIge1xuICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke0NvbG9yKGJhY2tHcm91bmRCbHVlKVxuICAgICAgICAgICAgICAgIC5saWdodGVuKDAuMilcbiAgICAgICAgICAgICAgICAuaHNsKClcbiAgICAgICAgICAgICAgICAuc3RyaW5nKCl9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIGB9XG4gICAgICAgIDwvc3R5bGU+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG5cbkdlbmVyYXRpb25VSS5wcm9wVHlwZXMgPSB7XG4gIGdlbmVyYXRlR2FtZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbn07XG5cbmNvbnN0IE51bWJlckNvbnRyb2wgPSAoeyBudW1iZXIsIG9uQ2xpY2ssIGNvbXBsZXRpb25QZXJjZW50YWdlIH0pID0+IChcbiAgPGRpdiBrZXk9e251bWJlcn0gY2xhc3NOYW1lPVwibnVtYmVyXCIgb25DbGljaz17b25DbGlja30+XG4gICAgPGRpdj57bnVtYmVyfTwvZGl2PlxuICAgIDxDaXJjbHVsYXJQcm9ncmVzcyBwZXJjZW50PXtjb21wbGV0aW9uUGVyY2VudGFnZX0gLz5cbiAgICA8c3R5bGUganN4PntOdW1iZXJDb250cm9sU3R5bGV9PC9zdHlsZT5cbiAgPC9kaXY+XG4pO1xuXG5OdW1iZXJDb250cm9sLnByb3BUeXBlcyA9IHtcbiAgbnVtYmVyOiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWQsXG4gIG9uQ2xpY2s6IFByb3BUeXBlcy5mdW5jLFxuICBjb21wbGV0aW9uUGVyY2VudGFnZTogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkLFxufTtcblxuTnVtYmVyQ29udHJvbC5kZWZhdWx0UHJvcHMgPSB7XG4gIG9uQ2xpY2s6IG51bGwsXG59O1xuXG5jb25zdCBDZWxsID0gKHByb3BzKSA9PiB7XG4gIGNvbnN0IHtcbiAgICB2YWx1ZSxcbiAgICBvbkNsaWNrLFxuICAgIGlzUGVlcixcbiAgICBpc1NlbGVjdGVkLFxuICAgIHNhbWVWYWx1ZSxcbiAgICBwcmVmaWxsZWQsXG4gICAgbm90ZXMsXG4gICAgY29uZmxpY3QsXG4gIH0gPSBwcm9wcztcbiAgY29uc3QgYmFja2dyb3VuZENvbG9yID0gZ2V0QmFja0dyb3VuZENvbG9yKHtcbiAgICBjb25mbGljdCxcbiAgICBpc1BlZXIsXG4gICAgc2FtZVZhbHVlLFxuICAgIGlzU2VsZWN0ZWQsXG4gIH0pO1xuICBjb25zdCBmb250Q29sb3IgPSBnZXRGb250Q29sb3IoeyBjb25mbGljdCwgcHJlZmlsbGVkLCB2YWx1ZSB9KTtcbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT1cImNlbGxcIiBvbkNsaWNrPXtvbkNsaWNrfT5cbiAgICAgIHtub3Rlc1xuICAgICAgICA/IHJhbmdlKDkpLm1hcCgoaSkgPT4gKFxuICAgICAgICAgICAgPGRpdiBrZXk9e2l9IGNsYXNzTmFtZT1cIm5vdGUtbnVtYmVyXCI+XG4gICAgICAgICAgICAgIHtub3Rlcy5oYXMoaSArIDEpICYmIGkgKyAxfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgKSlcbiAgICAgICAgOiB2YWx1ZSAmJiB2YWx1ZX1cbiAgICAgIHsvKiBsYW5ndWFnZT1DU1MgKi99XG4gICAgICA8c3R5bGUganN4PntDZWxsU3R5bGV9PC9zdHlsZT5cbiAgICAgIDxzdHlsZSBqc3g+XG4gICAgICAgIHtgXG4gICAgICAgICAgLmNlbGwge1xuICAgICAgICAgICAgYmFja2dyb3VuZDogJHshYmFja2dyb3VuZENvbG9yXG4gICAgICAgICAgICAgID8gXCJsaW5lYXItZ3JhZGllbnQoMTgwZGVnLCByZ2JhKDI1NSwyNTUsMjU1LDEpIDAlLHJnYmEoMjU1LDI1NSwyNTUsMSkgNTElLCByZ2JhKDIzNywxODcsMTQ4LDEpIDEwMCUpXCJcbiAgICAgICAgICAgICAgOiBcImluaXRpYWxcIn07XG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke2JhY2tncm91bmRDb2xvciB8fCBcImluaXRpYWxcIn07XG4gICAgICAgICAgICBjb2xvcjogJHtmb250Q29sb3IgfHwgXCJpbml0aWFsXCJ9O1xuICAgICAgICAgIH1cbiAgICAgICAgYH1cbiAgICAgIDwvc3R5bGU+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5DZWxsLnByb3BUeXBlcyA9IHtcbiAgLy8gY3VycmVudCBudW1iZXIgdmFsdWVcbiAgdmFsdWU6IFByb3BUeXBlcy5udW1iZXIsXG4gIC8vIGNlbGwgY2xpY2sgaGFuZGxlclxuICBvbkNsaWNrOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAvLyBpZiB0aGUgY2VsbCBpcyBhIHBlZXIgb2YgdGhlIHNlbGVjdGVkIGNlbGxcbiAgaXNQZWVyOiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkLFxuICAvLyBpZiB0aGUgY2VsbCBpcyBzZWxlY3RlZCBieSB0aGUgdXNlclxuICBpc1NlbGVjdGVkOiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkLFxuICAvLyBjdXJyZW50IGNlbGwgaGFzIHRoZSBzYW1lIHZhbHVlIGlmIHRoZSB1c2VyIHNlbGVjdGVkIGNlbGxcbiAgc2FtZVZhbHVlOiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkLFxuICAvLyBpZiB0aGlzIHdhcyBwcmVmaWxsZWQgYXMgYSBwYXJ0IG9mIHRoZSBwdXp6bGVcbiAgcHJlZmlsbGVkOiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkLFxuICAvLyBjdXJyZW50IG5vdGVzIHRha2VuIG9uIHRoZSBjZWxsXG4gIG5vdGVzOiBQcm9wVHlwZXMuaW5zdGFuY2VPZihTZXQpLFxuICAvLyBpZiB0aGUgY3VycmVudCBjZWxsIGRvZXMgbm90IHNhdGlzZnkgdGhlIGdhbWUgY29uc3RyYWludFxuICBjb25mbGljdDogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcbn07XG5cbkNlbGwuZGVmYXVsdFByb3BzID0ge1xuICBub3RlczogbnVsbCxcbiAgdmFsdWU6IG51bGwsXG59O1xuXG5jb25zdCBDaXJjbHVsYXJQcm9ncmVzcyA9ICh7IHBlcmNlbnQgfSkgPT4gKFxuICA8c3ZnIHZpZXdCb3g9XCIwIDAgMzYgMzZcIiBjbGFzc05hbWU9XCJjaXJjdWxhci1wcm9ncmVzc1wiPlxuICAgIDxwYXRoIGNsYXNzTmFtZT1cImNpcmNsZS1iZ1wiIGQ9e0NpcmN1bGFyUGF0aER9IC8+XG4gICAgPHBhdGhcbiAgICAgIGNsYXNzTmFtZT1cImNpcmNsZVwiXG4gICAgICBzdHJva2VEYXNoYXJyYXk9e2Ake3BlcmNlbnQgKiAxMDB9LCAxMDBgfVxuICAgICAgZD17Q2lyY3VsYXJQYXRoRH1cbiAgICAvPlxuICAgIHsvKiBsYW5ndWFnZT1DU1MgKi99XG4gICAgPHN0eWxlIGpzeD57Q2lyY3VsdWFyUHJvZ3Jlc3NTdHlsZX08L3N0eWxlPlxuICA8L3N2Zz5cbik7XG5cbkNpcmNsdWxhclByb2dyZXNzLnByb3BUeXBlcyA9IHtcbiAgcGVyY2VudDogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkLFxufTtcblxuZnVuY3Rpb24gZ2V0Q2xpY2tIYW5kbGVyKG9uQ2xpY2ssIG9uRG91YmxlQ2xpY2ssIGRlbGF5ID0gMjUwKSB7XG4gIGxldCB0aW1lb3V0SUQgPSBudWxsO1xuICByZXR1cm4gKGV2ZW50KSA9PiB7XG4gICAgaWYgKCF0aW1lb3V0SUQpIHtcbiAgICAgIHRpbWVvdXRJRCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBvbkNsaWNrKGV2ZW50KTtcbiAgICAgICAgdGltZW91dElEID0gbnVsbDtcbiAgICAgIH0sIGRlbGF5KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGltZW91dElEID0gY2xlYXJUaW1lb3V0KHRpbWVvdXRJRCk7XG4gICAgICBvbkRvdWJsZUNsaWNrKGV2ZW50KTtcbiAgICB9XG4gIH07XG59XG5cbi8qKlxuICogbWFrZSBzaXplIDkgYXJyYXkgb2YgMHNcbiAqIEByZXR1cm5zIHtBcnJheX1cbiAqL1xuZnVuY3Rpb24gbWFrZUNvdW50T2JqZWN0KCkge1xuICBjb25zdCBjb3VudE9iaiA9IFtdO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IDEwOyBpICs9IDEpIGNvdW50T2JqLnB1c2goMCk7XG4gIHJldHVybiBjb3VudE9iajtcbn1cblxuLyoqXG4gKiBnaXZlbiBhIDJEIGFycmF5IG9mIG51bWJlcnMgYXMgdGhlIGluaXRpYWwgcHV6emxlLCBnZW5lcmF0ZSB0aGUgaW5pdGlhbCBnYW1lIHN0YXRlXG4gKiBAcGFyYW0gcHV6emxlXG4gKiBAcmV0dXJucyB7YW55fVxuICovXG5mdW5jdGlvbiBtYWtlQm9hcmQoeyBwdXp6bGUgfSkge1xuICAvLyBjcmVhdGUgaW5pdGlhbCBjb3VudCBvYmplY3QgdG8ga2VlcCB0cmFjayBvZiBjb25mbGljdHMgcGVyIG51bWJlciB2YWx1ZVxuICBjb25zdCByb3dzID0gQXJyYXkuZnJvbShBcnJheSg5KS5rZXlzKCkpLm1hcCgoKSA9PiBtYWtlQ291bnRPYmplY3QoKSk7XG4gIGNvbnN0IGNvbHVtbnMgPSBBcnJheS5mcm9tKEFycmF5KDkpLmtleXMoKSkubWFwKCgpID0+IG1ha2VDb3VudE9iamVjdCgpKTtcbiAgY29uc3Qgc3F1YXJlcyA9IEFycmF5LmZyb20oQXJyYXkoOSkua2V5cygpKS5tYXAoKCkgPT4gbWFrZUNvdW50T2JqZWN0KCkpO1xuICBjb25zdCByZXN1bHQgPSBwdXp6bGUubWFwKChyb3csIGkpID0+XG4gICAgcm93Lm1hcCgoY2VsbCwgaikgPT4ge1xuICAgICAgaWYgKGNlbGwpIHtcbiAgICAgICAgcm93c1tpXVtjZWxsXSArPSAxO1xuICAgICAgICBjb2x1bW5zW2pdW2NlbGxdICs9IDE7XG4gICAgICAgIHNxdWFyZXNbTWF0aC5mbG9vcihpIC8gMykgKiAzICsgTWF0aC5mbG9vcihqIC8gMyldW2NlbGxdICs9IDE7XG4gICAgICB9XG4gICAgICByZXR1cm4ge1xuICAgICAgICB2YWx1ZTogcHV6emxlW2ldW2pdID4gMCA/IHB1enpsZVtpXVtqXSA6IG51bGwsXG4gICAgICAgIHByZWZpbGxlZDogISFwdXp6bGVbaV1bal0sXG4gICAgICB9O1xuICAgIH0pXG4gICk7XG4gIHJldHVybiBmcm9tSlMoe1xuICAgIHB1enpsZTogcmVzdWx0LFxuICAgIHNlbGVjdGVkOiBmYWxzZSxcbiAgICBjaG9pY2VzOiB7IHJvd3MsIGNvbHVtbnMsIHNxdWFyZXMgfSxcbiAgfSk7XG59XG5cbi8qKlxuICogZ2l2ZSB0aGUgY29vcmRpbmF0ZSB1cGRhdGUgdGhlIGN1cnJlbnQgYm9hcmQgd2l0aCBhIG51bWJlciBjaG9pY2VcbiAqIEBwYXJhbSB4XG4gKiBAcGFyYW0geVxuICogQHBhcmFtIG51bWJlclxuICogQHBhcmFtIGZpbGwgd2hldGhlciB0byBzZXQgb3IgdW5zZXRcbiAqIEBwYXJhbSBib2FyZCB0aGUgaW1tdXRhYmxlIGJvYXJkIGdpdmVuIHRvIGNoYW5nZVxuICovXG5mdW5jdGlvbiB1cGRhdGVCb2FyZFdpdGhOdW1iZXIoeyB4LCB5LCBudW1iZXIsIGZpbGwgPSB0cnVlLCBib2FyZCB9KSB7XG4gIGxldCBjZWxsID0gYm9hcmQuZ2V0KFwicHV6emxlXCIpLmdldEluKFt4LCB5XSk7XG4gIC8vIGRlbGV0ZSBpdHMgbm90ZXNcbiAgY2VsbCA9IGNlbGwuZGVsZXRlKFwibm90ZXNcIik7XG4gIC8vIHNldCBvciB1bnNldCBpdHMgdmFsdWUgZGVwZW5kaW5nIG9uIGBmaWxsYFxuICBjZWxsID0gZmlsbCA/IGNlbGwuc2V0KFwidmFsdWVcIiwgbnVtYmVyKSA6IGNlbGwuZGVsZXRlKFwidmFsdWVcIik7XG4gIGNvbnN0IGluY3JlbWVudCA9IGZpbGwgPyAxIDogLTE7XG4gIC8vIHVwZGF0ZSB0aGUgY3VycmVudCBncm91cCBjaG9pY2VzXG4gIGNvbnN0IHJvd1BhdGggPSBbXCJjaG9pY2VzXCIsIFwicm93c1wiLCB4LCBudW1iZXJdO1xuICBjb25zdCBjb2x1bW5QYXRoID0gW1wiY2hvaWNlc1wiLCBcImNvbHVtbnNcIiwgeSwgbnVtYmVyXTtcbiAgY29uc3Qgc3F1YXJlUGF0aCA9IFtcbiAgICBcImNob2ljZXNcIixcbiAgICBcInNxdWFyZXNcIixcbiAgICBNYXRoLmZsb29yKHggLyAzKSAqIDMgKyBNYXRoLmZsb29yKHkgLyAzKSxcbiAgICBudW1iZXIsXG4gIF07XG4gIHJldHVybiBib2FyZFxuICAgIC5zZXRJbihyb3dQYXRoLCBib2FyZC5nZXRJbihyb3dQYXRoKSArIGluY3JlbWVudClcbiAgICAuc2V0SW4oY29sdW1uUGF0aCwgYm9hcmQuZ2V0SW4oY29sdW1uUGF0aCkgKyBpbmNyZW1lbnQpXG4gICAgLnNldEluKHNxdWFyZVBhdGgsIGJvYXJkLmdldEluKHNxdWFyZVBhdGgpICsgaW5jcmVtZW50KVxuICAgIC5zZXRJbihbXCJwdXp6bGVcIiwgeCwgeV0sIGNlbGwpO1xufVxuXG5mdW5jdGlvbiBnZXROdW1iZXJPZkdyb3Vwc0Fzc2lnbmVkRm9yTnVtYmVyKG51bWJlciwgZ3JvdXBzKSB7XG4gIHJldHVybiBncm91cHMucmVkdWNlKFxuICAgIChhY2N1bXVsYXRvciwgcm93KSA9PiBhY2N1bXVsYXRvciArIChyb3cuZ2V0KG51bWJlcikgPiAwID8gMSA6IDApLFxuICAgIDBcbiAgKTtcbn1cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC9uby1tdWx0aS1jb21wXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBJbmRleCBleHRlbmRzIENvbXBvbmVudCB7XG4gIHN0YXRlID0ge307XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gICAgaWYgKFwic2VydmljZVdvcmtlclwiIGluIG5hdmlnYXRvcikge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gICAgICBuYXZpZ2F0b3Iuc2VydmljZVdvcmtlclxuICAgICAgICAucmVnaXN0ZXIoXCIvc2VydmljZS13b3JrZXIuanNcIilcbiAgICAgICAgLnRoZW4oKHJlZykgPT4ge1xuICAgICAgICAgIGNvbnNvbGUubG9nKFwiU2VydmljZVdvcmtlciBzY29wZTogXCIsIHJlZy5zY29wZSk7XG4gICAgICAgICAgY29uc29sZS5sb2coXCJzZXJ2aWNlIHdvcmtlciByZWdpc3RyYXRpb24gc3VjY2Vzc2Z1bFwiKTtcbiAgICAgICAgfSlcbiAgICAgICAgLmNhdGNoKChlcnIpID0+IHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oXCJzZXJ2aWNlIHdvcmtlciByZWdpc3RyYXRpb24gZmFpbGVkXCIsIGVyci5tZXNzYWdlKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICB9XG4gIGdldFNlbGVjdGVkQ2VsbCgpIHtcbiAgICBjb25zdCB7IGJvYXJkIH0gPSB0aGlzLnN0YXRlO1xuICAgIGNvbnN0IHNlbGVjdGVkID0gYm9hcmQuZ2V0KFwic2VsZWN0ZWRcIik7XG4gICAgcmV0dXJuIHNlbGVjdGVkICYmIGJvYXJkLmdldChcInB1enpsZVwiKS5nZXRJbihbc2VsZWN0ZWQueCwgc2VsZWN0ZWQueV0pO1xuICB9XG5cbiAgLy8gZ2V0IHRoZSBtaW4gYmV0d2VlbiBpdHMgY29tcGxldGlvbiBpbiByb3dzLCBjb2x1bW5zIGFuZCBzcXVhcmVzLlxuICBnZXROdW1iZXJWYWx1ZUNvdW50KG51bWJlcikge1xuICAgIGNvbnN0IHJvd3MgPSB0aGlzLnN0YXRlLmJvYXJkLmdldEluKFtcImNob2ljZXNcIiwgXCJyb3dzXCJdKTtcbiAgICBjb25zdCBjb2x1bW5zID0gdGhpcy5zdGF0ZS5ib2FyZC5nZXRJbihbXCJjaG9pY2VzXCIsIFwiY29sdW1uc1wiXSk7XG4gICAgY29uc3Qgc3F1YXJlcyA9IHRoaXMuc3RhdGUuYm9hcmQuZ2V0SW4oW1wiY2hvaWNlc1wiLCBcInNxdWFyZXNcIl0pO1xuICAgIHJldHVybiBNYXRoLm1pbihcbiAgICAgIGdldE51bWJlck9mR3JvdXBzQXNzaWduZWRGb3JOdW1iZXIobnVtYmVyLCBzcXVhcmVzKSxcbiAgICAgIE1hdGgubWluKFxuICAgICAgICBnZXROdW1iZXJPZkdyb3Vwc0Fzc2lnbmVkRm9yTnVtYmVyKG51bWJlciwgcm93cyksXG4gICAgICAgIGdldE51bWJlck9mR3JvdXBzQXNzaWduZWRGb3JOdW1iZXIobnVtYmVyLCBjb2x1bW5zKVxuICAgICAgKVxuICAgICk7XG4gIH1cblxuICBnZW5lcmF0ZUdhbWUgPSAoZmluYWxDb3VudCA9IDIwKSA9PiB7XG4gICAgLy8gZ2V0IGEgZmlsbGVkIHB1enpsZSBnZW5lcmF0ZWRcbiAgICBjb25zdCBzb2x1dGlvbiA9IG1ha2VQdXp6bGUoKTtcbiAgICAvLyBwbHVjayB2YWx1ZXMgZnJvbSBjZWxscyB0byBjcmVhdGUgdGhlIGdhbWVcbiAgICBjb25zdCB7IHB1enpsZSB9ID0gcGx1Y2soc29sdXRpb24sIGZpbmFsQ291bnQpO1xuICAgIC8vIGluaXRpYWxpemUgdGhlIGJvYXJkIHdpdGggY2hvaWNlIGNvdW50c1xuICAgIGNvbnN0IGJvYXJkID0gbWFrZUJvYXJkKHsgcHV6emxlIH0pO1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgYm9hcmQsXG4gICAgICBoaXN0b3J5OiBMaXN0Lm9mKGJvYXJkKSxcbiAgICAgIGhpc3RvcnlPZmZTZXQ6IDAsXG4gICAgICBzb2x1dGlvbixcbiAgICB9KTtcbiAgfTtcblxuICBhZGROdW1iZXJBc05vdGUgPSAobnVtYmVyKSA9PiB7XG4gICAgbGV0IHsgYm9hcmQgfSA9IHRoaXMuc3RhdGU7XG4gICAgbGV0IHNlbGVjdGVkQ2VsbCA9IHRoaXMuZ2V0U2VsZWN0ZWRDZWxsKCk7XG4gICAgaWYgKCFzZWxlY3RlZENlbGwpIHJldHVybjtcbiAgICBjb25zdCBwcmVmaWxsZWQgPSBzZWxlY3RlZENlbGwuZ2V0KFwicHJlZmlsbGVkXCIpO1xuICAgIGlmIChwcmVmaWxsZWQpIHJldHVybjtcbiAgICBjb25zdCB7IHgsIHkgfSA9IGJvYXJkLmdldChcInNlbGVjdGVkXCIpO1xuICAgIGNvbnN0IGN1cnJlbnRWYWx1ZSA9IHNlbGVjdGVkQ2VsbC5nZXQoXCJ2YWx1ZVwiKTtcbiAgICBpZiAoY3VycmVudFZhbHVlKSB7XG4gICAgICBib2FyZCA9IHVwZGF0ZUJvYXJkV2l0aE51bWJlcih7XG4gICAgICAgIHgsXG4gICAgICAgIHksXG4gICAgICAgIG51bWJlcjogY3VycmVudFZhbHVlLFxuICAgICAgICBmaWxsOiBmYWxzZSxcbiAgICAgICAgYm9hcmQ6IHRoaXMuc3RhdGUuYm9hcmQsXG4gICAgICB9KTtcbiAgICB9XG4gICAgbGV0IG5vdGVzID0gc2VsZWN0ZWRDZWxsLmdldChcIm5vdGVzXCIpIHx8IFNldCgpO1xuICAgIGlmIChub3Rlcy5oYXMobnVtYmVyKSkge1xuICAgICAgbm90ZXMgPSBub3Rlcy5kZWxldGUobnVtYmVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbm90ZXMgPSBub3Rlcy5hZGQobnVtYmVyKTtcbiAgICB9XG4gICAgc2VsZWN0ZWRDZWxsID0gc2VsZWN0ZWRDZWxsLnNldChcIm5vdGVzXCIsIG5vdGVzKTtcbiAgICBzZWxlY3RlZENlbGwgPSBzZWxlY3RlZENlbGwuZGVsZXRlKFwidmFsdWVcIik7XG4gICAgYm9hcmQgPSBib2FyZC5zZXRJbihbXCJwdXp6bGVcIiwgeCwgeV0sIHNlbGVjdGVkQ2VsbCk7XG4gICAgdGhpcy51cGRhdGVCb2FyZChib2FyZCk7XG4gIH07XG5cbiAgdXBkYXRlQm9hcmQgPSAobmV3Qm9hcmQpID0+IHtcbiAgICBsZXQgeyBoaXN0b3J5IH0gPSB0aGlzLnN0YXRlO1xuICAgIGNvbnN0IHsgaGlzdG9yeU9mZlNldCB9ID0gdGhpcy5zdGF0ZTtcbiAgICAvLyBhbnl0aGluZyBiZWZvcmUgY3VycmVudCBzdGVwIGlzIHN0aWxsIGluIGhpc3RvcnlcbiAgICBoaXN0b3J5ID0gaGlzdG9yeS5zbGljZSgwLCBoaXN0b3J5T2ZmU2V0ICsgMSk7XG4gICAgLy8gYWRkIGl0c2VsZiBvbnRvIHRoZSBoaXN0b3J5XG4gICAgaGlzdG9yeSA9IGhpc3RvcnkucHVzaChuZXdCb2FyZCk7XG4gICAgLy8gdXBkYXRlIHRoZSBnYW1lXG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBib2FyZDogbmV3Qm9hcmQsXG4gICAgICBoaXN0b3J5LFxuICAgICAgaGlzdG9yeU9mZlNldDogaGlzdG9yeS5zaXplIC0gMSxcbiAgICB9KTtcbiAgfTtcblxuICBjYW5VbmRvID0gKCkgPT4gdGhpcy5zdGF0ZS5oaXN0b3J5T2ZmU2V0ID4gMDtcblxuICByZWRvID0gKCkgPT4ge1xuICAgIGNvbnN0IHsgaGlzdG9yeSB9ID0gdGhpcy5zdGF0ZTtcbiAgICBsZXQgeyBoaXN0b3J5T2ZmU2V0IH0gPSB0aGlzLnN0YXRlO1xuICAgIGlmIChoaXN0b3J5LnNpemUpIHtcbiAgICAgIGhpc3RvcnlPZmZTZXQgPSBNYXRoLm1pbihoaXN0b3J5LnNpemUgLSAxLCBoaXN0b3J5T2ZmU2V0ICsgMSk7XG4gICAgICBjb25zdCBib2FyZCA9IGhpc3RvcnkuZ2V0KGhpc3RvcnlPZmZTZXQpO1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IGJvYXJkLCBoaXN0b3J5T2ZmU2V0IH0pO1xuICAgIH1cbiAgfTtcblxuICB1bmRvID0gKCkgPT4ge1xuICAgIGNvbnN0IHsgaGlzdG9yeSB9ID0gdGhpcy5zdGF0ZTtcbiAgICBsZXQgeyBoaXN0b3J5T2ZmU2V0LCBib2FyZCB9ID0gdGhpcy5zdGF0ZTtcbiAgICBpZiAoaGlzdG9yeS5zaXplKSB7XG4gICAgICBoaXN0b3J5T2ZmU2V0ID0gTWF0aC5tYXgoMCwgaGlzdG9yeU9mZlNldCAtIDEpO1xuICAgICAgYm9hcmQgPSBoaXN0b3J5LmdldChoaXN0b3J5T2ZmU2V0KTtcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyBib2FyZCwgaGlzdG9yeU9mZlNldCwgaGlzdG9yeSB9KTtcbiAgICB9XG4gIH07XG5cbiAgZXJhc2VTZWxlY3RlZCA9ICgpID0+IHtcbiAgICBjb25zdCBzZWxlY3RlZENlbGwgPSB0aGlzLmdldFNlbGVjdGVkQ2VsbCgpO1xuICAgIGlmICghc2VsZWN0ZWRDZWxsKSByZXR1cm47XG4gICAgdGhpcy5maWxsTnVtYmVyKGZhbHNlKTtcbiAgfTtcblxuICBmaWxsU2VsZWN0ZWRXaXRoU29sdXRpb24gPSAoKSA9PiB7XG4gICAgY29uc3QgeyBib2FyZCwgc29sdXRpb24gfSA9IHRoaXMuc3RhdGU7XG4gICAgY29uc3Qgc2VsZWN0ZWRDZWxsID0gdGhpcy5nZXRTZWxlY3RlZENlbGwoKTtcbiAgICBpZiAoIXNlbGVjdGVkQ2VsbCkgcmV0dXJuO1xuICAgIGNvbnN0IHsgeCwgeSB9ID0gYm9hcmQuZ2V0KFwic2VsZWN0ZWRcIik7XG4gICAgdGhpcy5maWxsTnVtYmVyKHNvbHV0aW9uW3hdW3ldKTtcbiAgfTtcblxuICAvLyBmaWxsIGN1cnJlbnRseSBzZWxlY3RlZCBjZWxsIHdpdGggbnVtYmVyXG4gIGZpbGxOdW1iZXIgPSAobnVtYmVyKSA9PiB7XG4gICAgbGV0IHsgYm9hcmQgfSA9IHRoaXMuc3RhdGU7XG4gICAgY29uc3Qgc2VsZWN0ZWRDZWxsID0gdGhpcy5nZXRTZWxlY3RlZENlbGwoKTtcbiAgICAvLyBuby1vcCBpZiBub3RoaW5nIGlzIHNlbGVjdGVkXG4gICAgaWYgKCFzZWxlY3RlZENlbGwpIHJldHVybjtcbiAgICBjb25zdCBwcmVmaWxsZWQgPSBzZWxlY3RlZENlbGwuZ2V0KFwicHJlZmlsbGVkXCIpO1xuICAgIC8vIG5vLW9wIGlmIGl0IGlzIHJlZmlsbGVkXG4gICAgaWYgKHByZWZpbGxlZCkgcmV0dXJuO1xuICAgIGNvbnN0IHsgeCwgeSB9ID0gYm9hcmQuZ2V0KFwic2VsZWN0ZWRcIik7XG4gICAgY29uc3QgY3VycmVudFZhbHVlID0gc2VsZWN0ZWRDZWxsLmdldChcInZhbHVlXCIpO1xuICAgIC8vIHJlbW92ZSB0aGUgY3VycmVudCB2YWx1ZSBhbmQgdXBkYXRlIHRoZSBnYW1lIHN0YXRlXG4gICAgaWYgKGN1cnJlbnRWYWx1ZSkge1xuICAgICAgYm9hcmQgPSB1cGRhdGVCb2FyZFdpdGhOdW1iZXIoe1xuICAgICAgICB4LFxuICAgICAgICB5LFxuICAgICAgICBudW1iZXI6IGN1cnJlbnRWYWx1ZSxcbiAgICAgICAgZmlsbDogZmFsc2UsXG4gICAgICAgIGJvYXJkOiB0aGlzLnN0YXRlLmJvYXJkLFxuICAgICAgfSk7XG4gICAgfVxuICAgIC8vIHVwZGF0ZSB0byBuZXcgbnVtYmVyIGlmIGFueVxuICAgIGNvbnN0IHNldE51bWJlciA9IGN1cnJlbnRWYWx1ZSAhPT0gbnVtYmVyICYmIG51bWJlcjtcbiAgICBpZiAoc2V0TnVtYmVyKSB7XG4gICAgICBib2FyZCA9IHVwZGF0ZUJvYXJkV2l0aE51bWJlcih7XG4gICAgICAgIHgsXG4gICAgICAgIHksXG4gICAgICAgIG51bWJlcixcbiAgICAgICAgZmlsbDogdHJ1ZSxcbiAgICAgICAgYm9hcmQsXG4gICAgICB9KTtcbiAgICB9XG4gICAgdGhpcy51cGRhdGVCb2FyZChib2FyZCk7XG4gIH07XG5cbiAgc2VsZWN0Q2VsbCA9ICh4LCB5KSA9PiB7XG4gICAgbGV0IHsgYm9hcmQgfSA9IHRoaXMuc3RhdGU7XG4gICAgYm9hcmQgPSBib2FyZC5zZXQoXCJzZWxlY3RlZFwiLCB7IHgsIHkgfSk7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IGJvYXJkIH0pO1xuICB9O1xuXG4gIGlzQ29uZmxpY3QoaSwgaikge1xuICAgIGNvbnN0IHsgdmFsdWUgfSA9IHRoaXMuc3RhdGUuYm9hcmQuZ2V0SW4oW1wicHV6emxlXCIsIGksIGpdKS50b0pTT04oKTtcbiAgICBpZiAoIXZhbHVlKSByZXR1cm4gZmFsc2U7XG4gICAgY29uc3Qgcm93Q29uZmxpY3QgPVxuICAgICAgdGhpcy5zdGF0ZS5ib2FyZC5nZXRJbihbXCJjaG9pY2VzXCIsIFwicm93c1wiLCBpLCB2YWx1ZV0pID4gMTtcbiAgICBjb25zdCBjb2x1bW5Db25mbGljdCA9XG4gICAgICB0aGlzLnN0YXRlLmJvYXJkLmdldEluKFtcImNob2ljZXNcIiwgXCJjb2x1bW5zXCIsIGosIHZhbHVlXSkgPiAxO1xuICAgIGNvbnN0IHNxdWFyZUNvbmZsaWN0ID1cbiAgICAgIHRoaXMuc3RhdGUuYm9hcmQuZ2V0SW4oW1xuICAgICAgICBcImNob2ljZXNcIixcbiAgICAgICAgXCJzcXVhcmVzXCIsXG4gICAgICAgIE1hdGguZmxvb3IoaSAvIDMpICogMyArIE1hdGguZmxvb3IoaiAvIDMpLFxuICAgICAgICB2YWx1ZSxcbiAgICAgIF0pID4gMTtcbiAgICByZXR1cm4gcm93Q29uZmxpY3QgfHwgY29sdW1uQ29uZmxpY3QgfHwgc3F1YXJlQ29uZmxpY3Q7XG4gIH1cblxuICByZW5kZXJDZWxsKGNlbGwsIHgsIHkpIHtcbiAgICBjb25zdCB7IGJvYXJkIH0gPSB0aGlzLnN0YXRlO1xuICAgIGNvbnN0IHNlbGVjdGVkID0gdGhpcy5nZXRTZWxlY3RlZENlbGwoKTtcbiAgICBjb25zdCB7IHZhbHVlLCBwcmVmaWxsZWQsIG5vdGVzIH0gPSBjZWxsLnRvSlNPTigpO1xuICAgIGNvbnN0IGNvbmZsaWN0ID0gdGhpcy5pc0NvbmZsaWN0KHgsIHkpO1xuICAgIGNvbnN0IHBlZXIgPSBhcmVDb29yZGluYXRlUGVlcnMoeyB4LCB5IH0sIGJvYXJkLmdldChcInNlbGVjdGVkXCIpKTtcbiAgICBjb25zdCBzYW1lVmFsdWUgPSAhIShcbiAgICAgIHNlbGVjdGVkICYmXG4gICAgICBzZWxlY3RlZC5nZXQoXCJ2YWx1ZVwiKSAmJlxuICAgICAgdmFsdWUgPT09IHNlbGVjdGVkLmdldChcInZhbHVlXCIpXG4gICAgKTtcblxuICAgIGNvbnN0IGlzU2VsZWN0ZWQgPSBjZWxsID09PSBzZWxlY3RlZDtcbiAgICByZXR1cm4gKFxuICAgICAgPENlbGxcbiAgICAgICAgcHJlZmlsbGVkPXtwcmVmaWxsZWR9XG4gICAgICAgIG5vdGVzPXtub3Rlc31cbiAgICAgICAgc2FtZVZhbHVlPXtzYW1lVmFsdWV9XG4gICAgICAgIGlzU2VsZWN0ZWQ9e2lzU2VsZWN0ZWR9XG4gICAgICAgIGlzUGVlcj17cGVlcn1cbiAgICAgICAgdmFsdWU9e3ZhbHVlfVxuICAgICAgICBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgICAgdGhpcy5zZWxlY3RDZWxsKHgsIHkpO1xuICAgICAgICB9fVxuICAgICAgICBrZXk9e3l9XG4gICAgICAgIHg9e3h9XG4gICAgICAgIHk9e3l9XG4gICAgICAgIGNvbmZsaWN0PXtjb25mbGljdH1cbiAgICAgIC8+XG4gICAgKTtcbiAgfVxuXG4gIHJlbmRlck51bWJlckNvbnRyb2woKSB7XG4gICAgY29uc3Qgc2VsZWN0ZWRDZWxsID0gdGhpcy5nZXRTZWxlY3RlZENlbGwoKTtcbiAgICBjb25zdCBwcmVmaWxsZWQgPSBzZWxlY3RlZENlbGwgJiYgc2VsZWN0ZWRDZWxsLmdldChcInByZWZpbGxlZFwiKTtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb250cm9sXCI+XG4gICAgICAgIHtyYW5nZSg5KS5tYXAoKGkpID0+IHtcbiAgICAgICAgICBjb25zdCBudW1iZXIgPSBpICsgMTtcbiAgICAgICAgICAvLyBoYW5kbGVzIGJpbmRpbmcgc2luZ2xlIGNsaWNrIGFuZCBkb3VibGUgY2xpY2sgY2FsbGJhY2tzXG4gICAgICAgICAgY29uc3QgY2xpY2tIYW5kbGUgPSBnZXRDbGlja0hhbmRsZXIoXG4gICAgICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgICAgIHRoaXMuZmlsbE51bWJlcihudW1iZXIpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICgpID0+IHtcbiAgICAgICAgICAgICAgdGhpcy5hZGROdW1iZXJBc05vdGUobnVtYmVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICApO1xuICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8TnVtYmVyQ29udHJvbFxuICAgICAgICAgICAgICBrZXk9e251bWJlcn1cbiAgICAgICAgICAgICAgbnVtYmVyPXtudW1iZXJ9XG4gICAgICAgICAgICAgIG9uQ2xpY2s9eyFwcmVmaWxsZWQgPyBjbGlja0hhbmRsZSA6IHVuZGVmaW5lZH1cbiAgICAgICAgICAgICAgY29tcGxldGlvblBlcmNlbnRhZ2U9e3RoaXMuZ2V0TnVtYmVyVmFsdWVDb3VudChudW1iZXIpIC8gOX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgKTtcbiAgICAgICAgfSl9XG4gICAgICAgIDxzdHlsZSBqc3g+e0NvbnRyb2xTdHlsZX08L3N0eWxlPlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxuXG4gIHJlbmRlckFjdGlvbnMoKSB7XG4gICAgY29uc3QgeyBoaXN0b3J5IH0gPSB0aGlzLnN0YXRlO1xuICAgIGNvbnN0IHNlbGVjdGVkQ2VsbCA9IHRoaXMuZ2V0U2VsZWN0ZWRDZWxsKCk7XG4gICAgY29uc3QgcHJlZmlsbGVkID0gc2VsZWN0ZWRDZWxsICYmIHNlbGVjdGVkQ2VsbC5nZXQoXCJwcmVmaWxsZWRcIik7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYWN0aW9uc1wiPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFjdGlvblwiIG9uQ2xpY2s9e2hpc3Rvcnkuc2l6ZSA/IHRoaXMudW5kbyA6IG51bGx9PlxuICAgICAgICAgIDxSZWxvYWRJY29uIC8+XG4gICAgICAgICAgSG/DoG4gdMOhY1xuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhY3Rpb24gcmVkb1wiIG9uQ2xpY2s9e2hpc3Rvcnkuc2l6ZSA/IHRoaXMucmVkbyA6IG51bGx9PlxuICAgICAgICAgIDxSZWxvYWRJY29uIC8+XG4gICAgICAgICAgS2jDtGkgcGjhu6VjXG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2XG4gICAgICAgICAgY2xhc3NOYW1lPVwiYWN0aW9uXCJcbiAgICAgICAgICBvbkNsaWNrPXshcHJlZmlsbGVkID8gdGhpcy5lcmFzZVNlbGVjdGVkIDogbnVsbH1cbiAgICAgICAgPlxuICAgICAgICAgIDxSZW1vdmVJY29uIC8+XG4gICAgICAgICAgWG/DoVxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdlxuICAgICAgICAgIGNsYXNzTmFtZT1cImFjdGlvblwiXG4gICAgICAgICAgb25DbGljaz17IXByZWZpbGxlZCA/IHRoaXMuZmlsbFNlbGVjdGVkV2l0aFNvbHV0aW9uIDogbnVsbH1cbiAgICAgICAgPlxuICAgICAgICAgIDxMb3VwZUljb24gLz5cbiAgICAgICAgICBH4bujaSDDvVxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPHN0eWxlIGpzeD57QWN0aW9uc1N0eWxlfTwvc3R5bGU+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG5cbiAgcmVuZGVyUHV6emxlKCkge1xuICAgIGNvbnN0IHsgYm9hcmQgfSA9IHRoaXMuc3RhdGU7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwicHV6emxlXCIgc3R5bGU9e3sgYmFja2dyb3VuZENvbG9yOiBcIiNFREJCOTRcIiB9fT5cbiAgICAgICAge2JvYXJkXG4gICAgICAgICAgLmdldChcInB1enpsZVwiKVxuICAgICAgICAgIC5tYXAoKHJvdywgaSkgPT4gKFxuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L25vLWFycmF5LWluZGV4LWtleVxuICAgICAgICAgICAgPGRpdiBrZXk9e2l9IGNsYXNzTmFtZT1cInJvd1wiIHN0eWxlPXt7IGJhY2tncm91bmRDb2xvcjogXCJyZWRcIiB9fT5cbiAgICAgICAgICAgICAge3Jvdy5tYXAoKGNlbGwsIGopID0+IHRoaXMucmVuZGVyQ2VsbChjZWxsLCBpLCBqKSkudG9BcnJheSgpfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgKSlcbiAgICAgICAgICAudG9BcnJheSgpfVxuICAgICAgICA8c3R5bGUganN4PntQdXp6bGVTdHlsZX08L3N0eWxlPlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxuXG4gIHJlbmRlckNvbnRyb2xzKCkge1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbnRyb2xzXCI+XG4gICAgICAgIHt0aGlzLnJlbmRlck51bWJlckNvbnRyb2woKX1cbiAgICAgICAge3RoaXMucmVuZGVyQWN0aW9ucygpfVxuICAgICAgICB7LyogbGFuZ3VhZ2U9Q1NTICovfVxuICAgICAgICA8c3R5bGUganN4PlxuICAgICAgICAgIHtgXG4gICAgICAgICAgICAuY29udHJvbHMge1xuICAgICAgICAgICAgICBtYXJnaW4tdG9wOiAwLjNlbTtcbiAgICAgICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICAgICAgZmxleC13cmFwOiB3cmFwO1xuICAgICAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICAgICAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgICAgICAgIHBhZGRpbmc6IDAuNWVtIDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgYH1cbiAgICAgICAgPC9zdHlsZT5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cblxuICByZW5kZXJHZW5lcmF0aW9uVUkoKSB7XG4gICAgcmV0dXJuIDxHZW5lcmF0aW9uVUkgZ2VuZXJhdGVHYW1lPXt0aGlzLmdlbmVyYXRlR2FtZX0gLz47XG4gIH1cblxuICByZW5kZXJIZWFkZXIoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaGVhZGVyXCI+XG4gICAgICAgIDxkaXZcbiAgICAgICAgICBjbGFzc05hbWU9XCJuZXctZ2FtZVwiXG4gICAgICAgICAgb25DbGljaz17KCkgPT4gdGhpcy5zZXRTdGF0ZSh7IGJvYXJkOiBmYWxzZSB9KX1cbiAgICAgICAgPlxuICAgICAgICAgIDxSZXR1cm5JY29uIC8+XG4gICAgICAgICAgPGRpdj5UcsOyIGNoxqFpIG3hu5tpPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICB7LyogPFRpcCAvPiAqL31cbiAgICAgICAgey8qIGxhbmd1YWdlPUNTUyAqL31cbiAgICAgICAgPHN0eWxlIGpzeD5cbiAgICAgICAgICB7YFxuICAgICAgICAgICAgLmhlYWRlciB7XG4gICAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gICAgICAgICAgICAgIG1heC13aWR0aDogNTAwcHg7XG4gICAgICAgICAgICAgIHBhZGRpbmc6IDAgMC41ZW07XG4gICAgICAgICAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAubmV3LWdhbWUge1xuICAgICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICAgICAgICAgIG1hcmdpbi10b3A6IDAuMmVtO1xuICAgICAgICAgICAgICBkaXNwbGF5OiBpbmxpbmUtZmxleDtcbiAgICAgICAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgICAgICAgIHBhZGRpbmc6IDAuMmVtIDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAubmV3LWdhbWUgOmdsb2JhbChzdmcpIHtcbiAgICAgICAgICAgICAgaGVpZ2h0OiAxZW07XG4gICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDAuM2VtO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIGB9XG4gICAgICAgIDwvc3R5bGU+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgYm9hcmQgfSA9IHRoaXMuc3RhdGU7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYm9keVwiPlxuICAgICAgICA8TmV4dEhlYWQ+XG4gICAgICAgICAgPHRpdGxlPlN1ZG9rdSBFdm9sdmVkPC90aXRsZT5cbiAgICAgICAgICA8bWV0YVxuICAgICAgICAgICAgbmFtZT1cInZpZXdwb3J0XCJcbiAgICAgICAgICAgIGNvbnRlbnQ9XCJpbml0aWFsLXNjYWxlPTEuMCwgd2lkdGg9ZGV2aWNlLXdpZHRoXCJcbiAgICAgICAgICAvPlxuICAgICAgICAgIDxtZXRhIG5hbWU9XCJkZXNjcmlwdGlvblwiIGNvbnRlbnQ9e0Rlc2NyaXB0aW9ufSAvPlxuICAgICAgICAgIDxsaW5rXG4gICAgICAgICAgICBocmVmPVwiaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3M/ZmFtaWx5PVNwZWNpYWwrRWxpdGVcIlxuICAgICAgICAgICAgcmVsPVwic3R5bGVzaGVldFwiXG4gICAgICAgICAgLz5cbiAgICAgICAgICA8bWV0YSBwcm9wZXJ0eT1cIm9nOnVybFwiIGNvbnRlbnQ9XCJodHRwczovL3N1ZG9rdS5zaXRpYW5saXUuY29tL1wiIC8+XG4gICAgICAgICAgPG1ldGEgcHJvcGVydHk9XCJvZzp0aXRsZVwiIGNvbnRlbnQ9XCJTdWRva3UgRXZvbHZlZFwiIC8+XG4gICAgICAgICAgPG1ldGEgcHJvcGVydHk9XCJvZzp0eXBlXCIgY29udGVudD1cIndlYnNpdGVcIiAvPlxuICAgICAgICAgIDxtZXRhIHByb3BlcnR5PVwib2c6ZGVzY3JpcHRpb25cIiBjb250ZW50PXtEZXNjcmlwdGlvbn0gLz5cbiAgICAgICAgICA8bWV0YVxuICAgICAgICAgICAgcHJvcGVydHk9XCJvZzppbWFnZVwiXG4gICAgICAgICAgICBjb250ZW50PVwiaHR0cHM6Ly9zdWRva3Uuc2l0aWFubGl1LmNvbS9zdGF0aWMvb2ctaW1hZ2UucG5nXCJcbiAgICAgICAgICAvPlxuICAgICAgICA8L05leHRIZWFkPlxuICAgICAgICB7IWJvYXJkICYmIHRoaXMucmVuZGVyR2VuZXJhdGlvblVJKCl9XG4gICAgICAgIHtib2FyZCAmJiB0aGlzLnJlbmRlckhlYWRlcigpfVxuICAgICAgICB7Ym9hcmQgJiYgdGhpcy5yZW5kZXJQdXp6bGUoKX1cbiAgICAgICAge2JvYXJkICYmIHRoaXMucmVuZGVyQ29udHJvbHMoKX1cbiAgICAgICAgey8qIDxkaXYgY2xhc3NOYW1lPVwicm9vdGVyXCI+XG4gICAgICAgICAgTWFkZSB3aXRoIDxzcGFuPuKdpO+4jzwvc3Bhbj7vuI8gQnkgPGEgaHJlZj1cImh0dHBzOi8vd3d3LnNpdGlhbmxpdS5jb20vXCI+U2l0aWFuIExpdTwvYT4gfCA8YSBocmVmPVwiaHR0cHM6Ly9tZWRpdW0uY29tL0BzaXRpYW5saXVfNTc2ODAvYnVpbGRpbmctYS1zdWRva3UtZ2FtZS1pbi1yZWFjdC1jYTY2MzkxNTcxMlwiPkJsb2cgUG9zdDwvYT5cbiAgICAgICAgPC9kaXY+ICovfVxuICAgICAgICB7LyogbGFuZ3VhZ2U9Q1NTICovfVxuICAgICAgICA8c3R5bGUganN4PlxuICAgICAgICAgIHtgXG4gICAgICAgICAgICA6Z2xvYmFsKGJvZHkpLFxuICAgICAgICAgICAgLmJvZHkge1xuICAgICAgICAgICAgICBmb250LWZhbWlseTogXCJTcGVjaWFsIEVsaXRlXCIsIGN1cnNpdmU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAuYm9keSB7XG4gICAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgICAgICAgICBoZWlnaHQ6IDEwMHZoO1xuICAgICAgICAgICAgICB3aWR0aDogMTAwdnc7XG4gICAgICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2IzOGE4MTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIEBtZWRpYSAobWluLXdpZHRoOiA4MDBweCkgYW5kIChtaW4taGVpZ2h0OiA5MzBweCkge1xuICAgICAgICAgICAgICA6Z2xvYmFsKC5oZWFkZXIsIC5wdXp6bGUsIC5jb250cm9scykge1xuICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMS41ZW07XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIEBtZWRpYSAobWF4LXdpZHRoOiA4MDBweCkgYW5kIChtaW4td2lkdGg6IDYwMHB4KSB7XG4gICAgICAgICAgICAgIDpnbG9iYWwoLmhlYWRlciwgLnB1enpsZSwgLmNvbnRyb2xzKSB7XG4gICAgICAgICAgICAgICAgZm9udC1zaXplOiAxLjJlbTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgQG1lZGlhIChtYXgtaGVpZ2h0OiA5MzBweCkgYW5kIChtaW4taGVpZ2h0OiA4MDBweCkgYW5kIChtaW4td2lkdGg6IDYwMHB4KSB7XG4gICAgICAgICAgICAgIDpnbG9iYWwoLmhlYWRlciwgLnB1enpsZSwgLmNvbnRyb2xzKSB7XG4gICAgICAgICAgICAgICAgZm9udC1zaXplOiAxLjJlbTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgQG1lZGlhIChtYXgtaGVpZ2h0OiA4MDBweCkgYW5kIChtaW4taGVpZ2h0OiA2MDBweCkgYW5kIChtaW4td2lkdGg6IDM3MHB4KSB7XG4gICAgICAgICAgICAgIDpnbG9iYWwoLmhlYWRlciwgLnB1enpsZSwgLmNvbnRyb2xzKSB7XG4gICAgICAgICAgICAgICAgZm9udC1zaXplOiAxZW07XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIEBtZWRpYSAobWF4LXdpZHRoOiAzNzBweCkge1xuICAgICAgICAgICAgICA6Z2xvYmFsKC5oZWFkZXIsIC5wdXp6bGUsIC5jb250cm9scykge1xuICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMC44ZW07XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIEBtZWRpYSAobWF4LWhlaWdodDogNjAwcHgpIHtcbiAgICAgICAgICAgICAgOmdsb2JhbCguaGVhZGVyLCAucHV6emxlLCAuY29udHJvbHMpIHtcbiAgICAgICAgICAgICAgICBmb250LXNpemU6IDAuOGVtO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICA6Z2xvYmFsKGJvZHkpIHtcbiAgICAgICAgICAgICAgbWFyZ2luOiAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLnJvb3RlciB7XG4gICAgICAgICAgICAgIHBvc2l0aW9uOiBmaXhlZDtcbiAgICAgICAgICAgICAgYm90dG9tOiAwO1xuICAgICAgICAgICAgICBmb250LXNpemU6IDAuOGVtO1xuICAgICAgICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIGB9XG4gICAgICAgIDwvc3R5bGU+XG4gICAgICAgIDxzdHlsZSBqc3ggZ2xvYmFsPlxuICAgICAgICAgIHtSYW5nZVN0eWxlfVxuICAgICAgICA8L3N0eWxlPlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufVxuIl19 */\n/*@ sourceURL=pages/index.js */";
ActionsStyle.__scopedHash = "1465932113";
{
  /* language=CSS */
}
var ControlStyle = new String(".control{padding:0 2em;cursor:pointer;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;font-family:\"Special Elite\",cursive;-webkit-transition:filter 0.5s ease-in-out;transition:filter 0.5s ease-in-out;width:100%;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=pages/index.js */");

// eslint-disable-next-line no-lone-blocks
ControlStyle.__hash = "3630210334";
ControlStyle.__scoped = ".control.jsx-3477817503{padding:0 2em;cursor:pointer;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;font-family:\"Special Elite\",cursive;-webkit-transition:filter 0.5s ease-in-out;transition:filter 0.5s ease-in-out;width:100%;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBhZ2VzL2luZGV4LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXVHd0IsQUFHbUIsY0FDQyxlQUNLLHNHQUNELDZGQUNKLHlEQUNRLG1HQUNjLG9DQUNGLDhFQUN4QixXQUNiIiwiZmlsZSI6InBhZ2VzL2luZGV4LmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9kdXlsaW5oMTk2dGIvV09SSy9MZWFybi9SZWFjdC9yZWFjdC1zdWRva3UtZ2FtZSIsInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIGpzeC1hMTF5L2FjY2Vzc2libGUtZW1vamkgKi9cbmltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IFNldCwgTGlzdCwgZnJvbUpTIH0gZnJvbSBcImltbXV0YWJsZVwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuaW1wb3J0IE5leHRIZWFkIGZyb20gXCJuZXh0L2hlYWRcIjtcbmltcG9ydCBDb2xvciBmcm9tIFwiY29sb3JcIjtcbmltcG9ydCBJbnB1dFJhbmdlIGZyb20gXCJyZWFjdC1pbnB1dC1yYW5nZVwiO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLWV4dHJhbmVvdXMtZGVwZW5kZW5jaWVzXG5pbXBvcnQgY3NzIGZyb20gXCJzdHlsZWQtanN4L2Nzc1wiO1xuXG5pbXBvcnQgUmFuZ2VTdHlsZSBmcm9tIFwiLi4vaW5wdXQtcmFuZ2Utc3R5bGVcIjtcbmltcG9ydCBMb3VwZUljb24gZnJvbSBcIi4uL3N2Zy9sb3VwZS5zdmdcIjtcbmltcG9ydCBSZW1vdmVJY29uIGZyb20gXCIuLi9zdmcvcmVtb3ZlLnN2Z1wiO1xuaW1wb3J0IFJlbG9hZEljb24gZnJvbSBcIi4uL3N2Zy9yZWxvYWQuc3ZnXCI7XG5pbXBvcnQgUmV0dXJuSWNvbiBmcm9tIFwiLi4vc3ZnL3JldHVybi5zdmdcIjtcblxuaW1wb3J0IHtcbiAgbWFrZVB1enpsZSxcbiAgcGx1Y2ssXG4gIGlzUGVlciBhcyBhcmVDb29yZGluYXRlUGVlcnMsXG4gIHJhbmdlLFxufSBmcm9tIFwiLi4vc3Vkb2t1XCI7XG5pbXBvcnQgeyBiYWNrR3JvdW5kQmx1ZSB9IGZyb20gXCIuLi9jb2xvcnNcIjtcbmltcG9ydCBUaXAgZnJvbSBcIi4uL2NvbXBvbmVudHMvdG9vbC10aXBcIjtcblxuY29uc3QgRGVzY3JpcHRpb24gPVxuICBcIkRpc2NvdmVyIHRoZSBuZXh0IGV2b2x1dGlvbiBvZiBTdWRva3Ugd2l0aCBhbWF6aW5nIGdyYXBoaWNzLCBhbmltYXRpb25zLCBhbmQgdXNlci1mcmllbmRseSBmZWF0dXJlcy4gRW5qb3kgYSBTdWRva3UgZXhwZXJpZW5jZSBsaWtlIHlvdSBuZXZlciBoYXZlIGJlZm9yZSB3aXRoIGN1c3RvbWl6YWJsZSBnYW1lIGdlbmVyYXRpb24sIGNlbGwgaGlnaGxpZ2h0aW5nLCBpbnR1aXRpdmUgY29udHJvbHMgYW5kIG1vcmUhXCI7XG5jb25zdCBjZWxsV2lkdGggPSAyLjU7XG5cbmNvbnN0IExpZ2h0Qmx1ZTEwMCA9IFwiI0IzRTVGQ1wiO1xuY29uc3QgTGlnaHRCbHVlMjAwID0gXCIjODFENEZBXCI7XG5jb25zdCBMaWdodEJsdWUzMDAgPSBcIiM0RkMzRjdcIjtcbmNvbnN0IEluZGlnbzcwMCA9IFwiIzMwM0Y5RlwiO1xuY29uc3QgRGVlcE9yYW5nZTIwMCA9IFwiI0ZGQUI5MVwiO1xuY29uc3QgRGVlcE9yYW5nZTYwMCA9IFwiI0Y0NTExRVwiO1xuY29uc3QgQ29udHJvbE51bWJlckNvbG9yID0gSW5kaWdvNzAwO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbG9uZS1ibG9ja3NcbntcbiAgLyogbGFuZ3VhZ2U9Q1NTICovXG59XG5jb25zdCBDZWxsU3R5bGUgPSBjc3NgXG4gIC5jZWxsIHtcbiAgICBoZWlnaHQ6ICR7Y2VsbFdpZHRofWVtO1xuICAgIHdpZHRoOiAke2NlbGxXaWR0aH1lbTtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGZsZXgtd3JhcDogd3JhcDtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgIGZvbnQtc2l6ZTogMS4xZW07XG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gICAgdHJhbnNpdGlvbjogYmFja2dyb3VuZC1jb2xvciAwLjNzIGVhc2UtaW4tb3V0O1xuICB9XG4gIC5jZWxsOm50aC1jaGlsZCgzbiArIDMpOm5vdCg6bGFzdC1jaGlsZCkge1xuICAgIGJvcmRlci1yaWdodDogMnB4IHNvbGlkIGJsYWNrO1xuICB9XG4gIC5jZWxsOm5vdCg6bGFzdC1jaGlsZCkge1xuICAgIGJvcmRlci1yaWdodDogMXB4IHNvbGlkIGJsYWNrO1xuICB9XG4gIC5ub3RlLW51bWJlciB7XG4gICAgZm9udC1zaXplOiAwLjZlbTtcbiAgICB3aWR0aDogMzMlO1xuICAgIGhlaWdodDogMzMlO1xuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICB9XG5gO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbG9uZS1ibG9ja3NcbntcbiAgLyogbGFuZ3VhZ2U9Q1NTICovXG59XG5jb25zdCBBY3Rpb25zU3R5bGUgPSBjc3NgXG4gIC5hY3Rpb25zIHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIG1heC13aWR0aDogNDAwcHg7XG4gICAgbWFyZ2luLXRvcDogMC41ZW07XG4gICAgcGFkZGluZzogMCAwLjZlbTtcbiAgfVxuICAuYWN0aW9uIHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgfVxuICAuYWN0aW9uIDpnbG9iYWwoc3ZnKSB7XG4gICAgd2lkdGg6IDIuNWVtO1xuICAgIG1hcmdpbi1ib3R0b206IDAuMmVtO1xuICB9XG4gIC5yZWRvIDpnbG9iYWwoc3ZnKSB7XG4gICAgdHJhbnNmb3JtOiBzY2FsZVgoLTEpO1xuICB9XG5gO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbG9uZS1ibG9ja3NcbntcbiAgLyogbGFuZ3VhZ2U9Q1NTICovXG59XG5jb25zdCBDb250cm9sU3R5bGUgPSBjc3NgXG4gIC5jb250cm9sIHtcbiAgICBwYWRkaW5nOiAwIDJlbTtcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgZGlzcGxheTogaW5saW5lLWZsZXg7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICBmbGV4LXdyYXA6IHdyYXA7XG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgZm9udC1mYW1pbHk6IFwiU3BlY2lhbCBFbGl0ZVwiLCBjdXJzaXZlO1xuICAgIHRyYW5zaXRpb246IGZpbHRlciAwLjVzIGVhc2UtaW4tb3V0O1xuICAgIHdpZHRoOiAxMDAlO1xuICB9XG5gO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbG9uZS1ibG9ja3NcbntcbiAgLyogbGFuZ3VhZ2U9Q1NTICovXG59XG5jb25zdCBOdW1iZXJDb250cm9sU3R5bGUgPSBjc3NgXG4gIC5udW1iZXIge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgZm9udC1zaXplOiAyZW07XG4gICAgbWFyZ2luOiAwLjFlbTtcbiAgICB3aWR0aDogMS41ZW07XG4gICAgaGVpZ2h0OiAxLjVlbTtcbiAgICBjb2xvcjogJHtDb250cm9sTnVtYmVyQ29sb3J9O1xuICAgIGJveC1zaGFkb3c6IDAgMXB4IDJweCByZ2JhKDAsIDAsIDAsIDAuMTYpLCAwIDFweCAycHggcmdiYSgwLCAwLCAwLCAwLjIzKTtcbiAgICBib3JkZXItcmFkaXVzOiA1MCU7XG4gIH1cbiAgLm51bWJlciA+IGRpdiB7XG4gICAgbWFyZ2luLXRvcDogMC4zZW07XG4gIH1cbmA7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1sb25lLWJsb2Nrc1xue1xuICAvKiBsYW5ndWFnZT1DU1MgKi9cbn1cbmNvbnN0IFB1enpsZVN0eWxlID0gY3NzYFxuICAucHV6emxlIHtcbiAgICBtYXJnaW4tdG9wOiAwLjVlbTtcbiAgICB3aWR0aDogJHtjZWxsV2lkdGggKiA5fWVtO1xuICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICBib3gtc2hhZG93OiAwIDNweCA2cHggcmdiYSgwLCAwLCAwLCAwLjE2KSwgMCAzcHggNnB4IHJnYmEoMCwgMCwgMCwgMC4yMyk7XG4gIH1cbiAgLnJvdyB7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIGZsZXg6IDA7XG4gICAgd2lkdGg6ICR7Y2VsbFdpZHRoICogOX1lbTtcbiAgfVxuICAucm93Om5vdCg6bGFzdC1jaGlsZCkge1xuICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCBibGFjaztcbiAgfVxuICAucm93Om50aC1jaGlsZCgzbiArIDMpOm5vdCg6bGFzdC1jaGlsZCkge1xuICAgIGJvcmRlci1ib3R0b206IDJweCBzb2xpZCBibGFjayAhaW1wb3J0YW50O1xuICB9XG5gO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbG9uZS1ibG9ja3NcbntcbiAgLyogbGFuZ3VhZ2U9Q1NTICovXG59XG5jb25zdCBDaXJjdWx1YXJQcm9ncmVzc1N0eWxlID0gY3NzYFxuICAuY2lyY3VsYXItcHJvZ3Jlc3Mge1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB0b3A6IDA7XG4gICAgbGVmdDogMDtcbiAgICB0cmFuc2l0aW9uOiBmaWx0ZXIgMC40cyBlYXNlLWluLW91dDtcbiAgfVxuXG4gIC5jaXJjbGUtYmcge1xuICAgIGZpbGw6IG5vbmU7XG4gICAgc3Ryb2tlOiAjZWVlO1xuICAgIHN0cm9rZS13aWR0aDogMy44O1xuICB9XG5cbiAgLmNpcmNsZSB7XG4gICAgc3Ryb2tlOiAke0NvbnRyb2xOdW1iZXJDb2xvcn07XG4gICAgdHJhbnNpdGlvbjogc3Ryb2tlLWRhc2hhcnJheSAwLjRzIGVhc2UtaW4tb3V0O1xuICAgIGZpbGw6IG5vbmU7XG4gICAgc3Ryb2tlLXdpZHRoOiAyLjg7XG4gICAgc3Ryb2tlLWxpbmVjYXA6IHJvdW5kO1xuICB9XG5gO1xuXG5jb25zdCBDaXJjdWxhclBhdGhEID1cbiAgXCJNMTggMi4wODQ1IGEgMTUuOTE1NSAxNS45MTU1IDAgMCAxIDAgMzEuODMxIGEgMTUuOTE1NSAxNS45MTU1IDAgMCAxIDAgLTMxLjgzMVwiO1xuXG5mdW5jdGlvbiBnZXRCYWNrR3JvdW5kQ29sb3IoeyBjb25mbGljdCwgaXNQZWVyLCBzYW1lVmFsdWUsIGlzU2VsZWN0ZWQgfSkge1xuICBpZiAoY29uZmxpY3QgJiYgaXNQZWVyICYmIHNhbWVWYWx1ZSkge1xuICAgIHJldHVybiBEZWVwT3JhbmdlMjAwO1xuICB9IGVsc2UgaWYgKHNhbWVWYWx1ZSkge1xuICAgIHJldHVybiBMaWdodEJsdWUzMDA7XG4gIH0gZWxzZSBpZiAoaXNTZWxlY3RlZCkge1xuICAgIHJldHVybiBMaWdodEJsdWUyMDA7XG4gIH0gZWxzZSBpZiAoaXNQZWVyKSB7XG4gICAgcmV0dXJuIExpZ2h0Qmx1ZTEwMDtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGdldEZvbnRDb2xvcih7IHZhbHVlLCBjb25mbGljdCwgcHJlZmlsbGVkIH0pIHtcbiAgaWYgKGNvbmZsaWN0ICYmICFwcmVmaWxsZWQpIHtcbiAgICByZXR1cm4gRGVlcE9yYW5nZTYwMDtcbiAgfSBlbHNlIGlmICghcHJlZmlsbGVkICYmIHZhbHVlKSB7XG4gICAgcmV0dXJuIENvbnRyb2xOdW1iZXJDb2xvcjtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbmNsYXNzIEdlbmVyYXRpb25VSSBleHRlbmRzIENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuXG4gICAgdGhpcy5zdGF0ZSA9IHsgdmFsdWU6IDMwIH07XG4gIH1cblxuICBnZW5lcmF0ZUdhbWUgPSAoKSA9PiB7XG4gICAgdGhpcy5wcm9wcy5nZW5lcmF0ZUdhbWUodGhpcy5zdGF0ZS52YWx1ZSk7XG4gIH07XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImdlbmVyYXRpb25cIj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb3B5XCI+QuG6r3QgxJHhuqd1IHbhu5tpIHt0aGlzLnN0YXRlLnZhbHVlfSDDtCDEkWnhu4FuIHRyxrDhu5tjIDwvZGl2PlxuICAgICAgICA8SW5wdXRSYW5nZVxuICAgICAgICAgIG1heFZhbHVlPXs4MX1cbiAgICAgICAgICBtaW5WYWx1ZT17MTd9XG4gICAgICAgICAgdmFsdWU9e3RoaXMuc3RhdGUudmFsdWV9XG4gICAgICAgICAgb25DaGFuZ2U9eyh2YWx1ZSkgPT4gdGhpcy5zZXRTdGF0ZSh7IHZhbHVlIH0pfVxuICAgICAgICAvPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImJ1dHRvblwiIG9uQ2xpY2s9e3RoaXMuZ2VuZXJhdGVHYW1lfT5cbiAgICAgICAgICBQbGF5IFN1ZG9rdVxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgey8qIGxhbmd1YWdlPUNTUyAqL31cbiAgICAgICAgPHN0eWxlIGpzeD5cbiAgICAgICAgICB7YFxuICAgICAgICAgICAgLmNvcHkge1xuICAgICAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgICAgICAgICAgIGZvbnQtc2l6ZTogMS4zZW07XG4gICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDAuNWVtO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLmdlbmVyYXRpb24ge1xuICAgICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICAgICAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICAgICAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICA6Z2xvYmFsKC5pbnB1dC1yYW5nZSkge1xuICAgICAgICAgICAgICB3aWR0aDogODAlO1xuICAgICAgICAgICAgICBtYXgtd2lkdGg6IDUwMHB4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLmJ1dHRvbiB7XG4gICAgICAgICAgICAgIG1hcmdpbi10b3A6IDAuNWVtO1xuICAgICAgICAgICAgICBib3JkZXItcmFkaXVzOiAwLjI1ZW07XG4gICAgICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICAgICAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gICAgICAgICAgICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgICAgICAgICAgICAgY29sb3I6ICNmZmY7XG4gICAgICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgICAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgICAgICAgICAgICB0cmFuc2l0aW9uOiBhbGwgMC4yNXM7XG4gICAgICAgICAgICAgIHBhZGRpbmc6IDVweCAxMHB4O1xuICAgICAgICAgICAgICBmb250LXNpemU6IDEuNGVtO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLmJ1dHRvbjphY3RpdmUge1xuICAgICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgwcHgsIDVweCk7XG4gICAgICAgICAgICAgIGJveC1zaGFkb3c6IDAgMXB4IDAgMDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLmJ1dHRvbiB7XG4gICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICR7YmFja0dyb3VuZEJsdWV9O1xuICAgICAgICAgICAgICBib3gtc2hhZG93OiAwIDJweCA0cHggMFxuICAgICAgICAgICAgICAgICR7Q29sb3IoYmFja0dyb3VuZEJsdWUpLmRhcmtlbigwLjUpLmhzbCgpLnN0cmluZygpfTtcbiAgICAgICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLmJ1dHRvbjpob3ZlciB7XG4gICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICR7Q29sb3IoYmFja0dyb3VuZEJsdWUpXG4gICAgICAgICAgICAgICAgLmxpZ2h0ZW4oMC4yKVxuICAgICAgICAgICAgICAgIC5oc2woKVxuICAgICAgICAgICAgICAgIC5zdHJpbmcoKX07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgYH1cbiAgICAgICAgPC9zdHlsZT5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn1cblxuR2VuZXJhdGlvblVJLnByb3BUeXBlcyA9IHtcbiAgZ2VuZXJhdGVHYW1lOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxufTtcblxuY29uc3QgTnVtYmVyQ29udHJvbCA9ICh7IG51bWJlciwgb25DbGljaywgY29tcGxldGlvblBlcmNlbnRhZ2UgfSkgPT4gKFxuICA8ZGl2IGtleT17bnVtYmVyfSBjbGFzc05hbWU9XCJudW1iZXJcIiBvbkNsaWNrPXtvbkNsaWNrfT5cbiAgICA8ZGl2PntudW1iZXJ9PC9kaXY+XG4gICAgPENpcmNsdWxhclByb2dyZXNzIHBlcmNlbnQ9e2NvbXBsZXRpb25QZXJjZW50YWdlfSAvPlxuICAgIDxzdHlsZSBqc3g+e051bWJlckNvbnRyb2xTdHlsZX08L3N0eWxlPlxuICA8L2Rpdj5cbik7XG5cbk51bWJlckNvbnRyb2wucHJvcFR5cGVzID0ge1xuICBudW1iZXI6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCxcbiAgb25DbGljazogUHJvcFR5cGVzLmZ1bmMsXG4gIGNvbXBsZXRpb25QZXJjZW50YWdlOiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWQsXG59O1xuXG5OdW1iZXJDb250cm9sLmRlZmF1bHRQcm9wcyA9IHtcbiAgb25DbGljazogbnVsbCxcbn07XG5cbmNvbnN0IENlbGwgPSAocHJvcHMpID0+IHtcbiAgY29uc3Qge1xuICAgIHZhbHVlLFxuICAgIG9uQ2xpY2ssXG4gICAgaXNQZWVyLFxuICAgIGlzU2VsZWN0ZWQsXG4gICAgc2FtZVZhbHVlLFxuICAgIHByZWZpbGxlZCxcbiAgICBub3RlcyxcbiAgICBjb25mbGljdCxcbiAgfSA9IHByb3BzO1xuICBjb25zdCBiYWNrZ3JvdW5kQ29sb3IgPSBnZXRCYWNrR3JvdW5kQ29sb3Ioe1xuICAgIGNvbmZsaWN0LFxuICAgIGlzUGVlcixcbiAgICBzYW1lVmFsdWUsXG4gICAgaXNTZWxlY3RlZCxcbiAgfSk7XG4gIGNvbnN0IGZvbnRDb2xvciA9IGdldEZvbnRDb2xvcih7IGNvbmZsaWN0LCBwcmVmaWxsZWQsIHZhbHVlIH0pO1xuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwiY2VsbFwiIG9uQ2xpY2s9e29uQ2xpY2t9PlxuICAgICAge25vdGVzXG4gICAgICAgID8gcmFuZ2UoOSkubWFwKChpKSA9PiAoXG4gICAgICAgICAgICA8ZGl2IGtleT17aX0gY2xhc3NOYW1lPVwibm90ZS1udW1iZXJcIj5cbiAgICAgICAgICAgICAge25vdGVzLmhhcyhpICsgMSkgJiYgaSArIDF9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICApKVxuICAgICAgICA6IHZhbHVlICYmIHZhbHVlfVxuICAgICAgey8qIGxhbmd1YWdlPUNTUyAqL31cbiAgICAgIDxzdHlsZSBqc3g+e0NlbGxTdHlsZX08L3N0eWxlPlxuICAgICAgPHN0eWxlIGpzeD5cbiAgICAgICAge2BcbiAgICAgICAgICAuY2VsbCB7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kOiAkeyFiYWNrZ3JvdW5kQ29sb3JcbiAgICAgICAgICAgICAgPyBcImxpbmVhci1ncmFkaWVudCgxODBkZWcsIHJnYmEoMjU1LDI1NSwyNTUsMSkgMCUscmdiYSgyNTUsMjU1LDI1NSwxKSA1MSUsIHJnYmEoMjM3LDE4NywxNDgsMSkgMTAwJSlcIlxuICAgICAgICAgICAgICA6IFwiaW5pdGlhbFwifTtcbiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICR7YmFja2dyb3VuZENvbG9yIHx8IFwiaW5pdGlhbFwifTtcbiAgICAgICAgICAgIGNvbG9yOiAke2ZvbnRDb2xvciB8fCBcImluaXRpYWxcIn07XG4gICAgICAgICAgfVxuICAgICAgICBgfVxuICAgICAgPC9zdHlsZT5cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5cbkNlbGwucHJvcFR5cGVzID0ge1xuICAvLyBjdXJyZW50IG51bWJlciB2YWx1ZVxuICB2YWx1ZTogUHJvcFR5cGVzLm51bWJlcixcbiAgLy8gY2VsbCBjbGljayBoYW5kbGVyXG4gIG9uQ2xpY2s6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIC8vIGlmIHRoZSBjZWxsIGlzIGEgcGVlciBvZiB0aGUgc2VsZWN0ZWQgY2VsbFxuICBpc1BlZXI6IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG4gIC8vIGlmIHRoZSBjZWxsIGlzIHNlbGVjdGVkIGJ5IHRoZSB1c2VyXG4gIGlzU2VsZWN0ZWQ6IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG4gIC8vIGN1cnJlbnQgY2VsbCBoYXMgdGhlIHNhbWUgdmFsdWUgaWYgdGhlIHVzZXIgc2VsZWN0ZWQgY2VsbFxuICBzYW1lVmFsdWU6IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG4gIC8vIGlmIHRoaXMgd2FzIHByZWZpbGxlZCBhcyBhIHBhcnQgb2YgdGhlIHB1enpsZVxuICBwcmVmaWxsZWQ6IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG4gIC8vIGN1cnJlbnQgbm90ZXMgdGFrZW4gb24gdGhlIGNlbGxcbiAgbm90ZXM6IFByb3BUeXBlcy5pbnN0YW5jZU9mKFNldCksXG4gIC8vIGlmIHRoZSBjdXJyZW50IGNlbGwgZG9lcyBub3Qgc2F0aXNmeSB0aGUgZ2FtZSBjb25zdHJhaW50XG4gIGNvbmZsaWN0OiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkLFxufTtcblxuQ2VsbC5kZWZhdWx0UHJvcHMgPSB7XG4gIG5vdGVzOiBudWxsLFxuICB2YWx1ZTogbnVsbCxcbn07XG5cbmNvbnN0IENpcmNsdWxhclByb2dyZXNzID0gKHsgcGVyY2VudCB9KSA9PiAoXG4gIDxzdmcgdmlld0JveD1cIjAgMCAzNiAzNlwiIGNsYXNzTmFtZT1cImNpcmN1bGFyLXByb2dyZXNzXCI+XG4gICAgPHBhdGggY2xhc3NOYW1lPVwiY2lyY2xlLWJnXCIgZD17Q2lyY3VsYXJQYXRoRH0gLz5cbiAgICA8cGF0aFxuICAgICAgY2xhc3NOYW1lPVwiY2lyY2xlXCJcbiAgICAgIHN0cm9rZURhc2hhcnJheT17YCR7cGVyY2VudCAqIDEwMH0sIDEwMGB9XG4gICAgICBkPXtDaXJjdWxhclBhdGhEfVxuICAgIC8+XG4gICAgey8qIGxhbmd1YWdlPUNTUyAqL31cbiAgICA8c3R5bGUganN4PntDaXJjdWx1YXJQcm9ncmVzc1N0eWxlfTwvc3R5bGU+XG4gIDwvc3ZnPlxuKTtcblxuQ2lyY2x1bGFyUHJvZ3Jlc3MucHJvcFR5cGVzID0ge1xuICBwZXJjZW50OiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWQsXG59O1xuXG5mdW5jdGlvbiBnZXRDbGlja0hhbmRsZXIob25DbGljaywgb25Eb3VibGVDbGljaywgZGVsYXkgPSAyNTApIHtcbiAgbGV0IHRpbWVvdXRJRCA9IG51bGw7XG4gIHJldHVybiAoZXZlbnQpID0+IHtcbiAgICBpZiAoIXRpbWVvdXRJRCkge1xuICAgICAgdGltZW91dElEID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIG9uQ2xpY2soZXZlbnQpO1xuICAgICAgICB0aW1lb3V0SUQgPSBudWxsO1xuICAgICAgfSwgZGVsYXkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aW1lb3V0SUQgPSBjbGVhclRpbWVvdXQodGltZW91dElEKTtcbiAgICAgIG9uRG91YmxlQ2xpY2soZXZlbnQpO1xuICAgIH1cbiAgfTtcbn1cblxuLyoqXG4gKiBtYWtlIHNpemUgOSBhcnJheSBvZiAwc1xuICogQHJldHVybnMge0FycmF5fVxuICovXG5mdW5jdGlvbiBtYWtlQ291bnRPYmplY3QoKSB7XG4gIGNvbnN0IGNvdW50T2JqID0gW107XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgMTA7IGkgKz0gMSkgY291bnRPYmoucHVzaCgwKTtcbiAgcmV0dXJuIGNvdW50T2JqO1xufVxuXG4vKipcbiAqIGdpdmVuIGEgMkQgYXJyYXkgb2YgbnVtYmVycyBhcyB0aGUgaW5pdGlhbCBwdXp6bGUsIGdlbmVyYXRlIHRoZSBpbml0aWFsIGdhbWUgc3RhdGVcbiAqIEBwYXJhbSBwdXp6bGVcbiAqIEByZXR1cm5zIHthbnl9XG4gKi9cbmZ1bmN0aW9uIG1ha2VCb2FyZCh7IHB1enpsZSB9KSB7XG4gIC8vIGNyZWF0ZSBpbml0aWFsIGNvdW50IG9iamVjdCB0byBrZWVwIHRyYWNrIG9mIGNvbmZsaWN0cyBwZXIgbnVtYmVyIHZhbHVlXG4gIGNvbnN0IHJvd3MgPSBBcnJheS5mcm9tKEFycmF5KDkpLmtleXMoKSkubWFwKCgpID0+IG1ha2VDb3VudE9iamVjdCgpKTtcbiAgY29uc3QgY29sdW1ucyA9IEFycmF5LmZyb20oQXJyYXkoOSkua2V5cygpKS5tYXAoKCkgPT4gbWFrZUNvdW50T2JqZWN0KCkpO1xuICBjb25zdCBzcXVhcmVzID0gQXJyYXkuZnJvbShBcnJheSg5KS5rZXlzKCkpLm1hcCgoKSA9PiBtYWtlQ291bnRPYmplY3QoKSk7XG4gIGNvbnN0IHJlc3VsdCA9IHB1enpsZS5tYXAoKHJvdywgaSkgPT5cbiAgICByb3cubWFwKChjZWxsLCBqKSA9PiB7XG4gICAgICBpZiAoY2VsbCkge1xuICAgICAgICByb3dzW2ldW2NlbGxdICs9IDE7XG4gICAgICAgIGNvbHVtbnNbal1bY2VsbF0gKz0gMTtcbiAgICAgICAgc3F1YXJlc1tNYXRoLmZsb29yKGkgLyAzKSAqIDMgKyBNYXRoLmZsb29yKGogLyAzKV1bY2VsbF0gKz0gMTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHZhbHVlOiBwdXp6bGVbaV1bal0gPiAwID8gcHV6emxlW2ldW2pdIDogbnVsbCxcbiAgICAgICAgcHJlZmlsbGVkOiAhIXB1enpsZVtpXVtqXSxcbiAgICAgIH07XG4gICAgfSlcbiAgKTtcbiAgcmV0dXJuIGZyb21KUyh7XG4gICAgcHV6emxlOiByZXN1bHQsXG4gICAgc2VsZWN0ZWQ6IGZhbHNlLFxuICAgIGNob2ljZXM6IHsgcm93cywgY29sdW1ucywgc3F1YXJlcyB9LFxuICB9KTtcbn1cblxuLyoqXG4gKiBnaXZlIHRoZSBjb29yZGluYXRlIHVwZGF0ZSB0aGUgY3VycmVudCBib2FyZCB3aXRoIGEgbnVtYmVyIGNob2ljZVxuICogQHBhcmFtIHhcbiAqIEBwYXJhbSB5XG4gKiBAcGFyYW0gbnVtYmVyXG4gKiBAcGFyYW0gZmlsbCB3aGV0aGVyIHRvIHNldCBvciB1bnNldFxuICogQHBhcmFtIGJvYXJkIHRoZSBpbW11dGFibGUgYm9hcmQgZ2l2ZW4gdG8gY2hhbmdlXG4gKi9cbmZ1bmN0aW9uIHVwZGF0ZUJvYXJkV2l0aE51bWJlcih7IHgsIHksIG51bWJlciwgZmlsbCA9IHRydWUsIGJvYXJkIH0pIHtcbiAgbGV0IGNlbGwgPSBib2FyZC5nZXQoXCJwdXp6bGVcIikuZ2V0SW4oW3gsIHldKTtcbiAgLy8gZGVsZXRlIGl0cyBub3Rlc1xuICBjZWxsID0gY2VsbC5kZWxldGUoXCJub3Rlc1wiKTtcbiAgLy8gc2V0IG9yIHVuc2V0IGl0cyB2YWx1ZSBkZXBlbmRpbmcgb24gYGZpbGxgXG4gIGNlbGwgPSBmaWxsID8gY2VsbC5zZXQoXCJ2YWx1ZVwiLCBudW1iZXIpIDogY2VsbC5kZWxldGUoXCJ2YWx1ZVwiKTtcbiAgY29uc3QgaW5jcmVtZW50ID0gZmlsbCA/IDEgOiAtMTtcbiAgLy8gdXBkYXRlIHRoZSBjdXJyZW50IGdyb3VwIGNob2ljZXNcbiAgY29uc3Qgcm93UGF0aCA9IFtcImNob2ljZXNcIiwgXCJyb3dzXCIsIHgsIG51bWJlcl07XG4gIGNvbnN0IGNvbHVtblBhdGggPSBbXCJjaG9pY2VzXCIsIFwiY29sdW1uc1wiLCB5LCBudW1iZXJdO1xuICBjb25zdCBzcXVhcmVQYXRoID0gW1xuICAgIFwiY2hvaWNlc1wiLFxuICAgIFwic3F1YXJlc1wiLFxuICAgIE1hdGguZmxvb3IoeCAvIDMpICogMyArIE1hdGguZmxvb3IoeSAvIDMpLFxuICAgIG51bWJlcixcbiAgXTtcbiAgcmV0dXJuIGJvYXJkXG4gICAgLnNldEluKHJvd1BhdGgsIGJvYXJkLmdldEluKHJvd1BhdGgpICsgaW5jcmVtZW50KVxuICAgIC5zZXRJbihjb2x1bW5QYXRoLCBib2FyZC5nZXRJbihjb2x1bW5QYXRoKSArIGluY3JlbWVudClcbiAgICAuc2V0SW4oc3F1YXJlUGF0aCwgYm9hcmQuZ2V0SW4oc3F1YXJlUGF0aCkgKyBpbmNyZW1lbnQpXG4gICAgLnNldEluKFtcInB1enpsZVwiLCB4LCB5XSwgY2VsbCk7XG59XG5cbmZ1bmN0aW9uIGdldE51bWJlck9mR3JvdXBzQXNzaWduZWRGb3JOdW1iZXIobnVtYmVyLCBncm91cHMpIHtcbiAgcmV0dXJuIGdyb3Vwcy5yZWR1Y2UoXG4gICAgKGFjY3VtdWxhdG9yLCByb3cpID0+IGFjY3VtdWxhdG9yICsgKHJvdy5nZXQobnVtYmVyKSA+IDAgPyAxIDogMCksXG4gICAgMFxuICApO1xufVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L25vLW11bHRpLWNvbXBcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEluZGV4IGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgc3RhdGUgPSB7fTtcblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgICBpZiAoXCJzZXJ2aWNlV29ya2VyXCIgaW4gbmF2aWdhdG9yKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgICAgIG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyXG4gICAgICAgIC5yZWdpc3RlcihcIi9zZXJ2aWNlLXdvcmtlci5qc1wiKVxuICAgICAgICAudGhlbigocmVnKSA9PiB7XG4gICAgICAgICAgY29uc29sZS5sb2coXCJTZXJ2aWNlV29ya2VyIHNjb3BlOiBcIiwgcmVnLnNjb3BlKTtcbiAgICAgICAgICBjb25zb2xlLmxvZyhcInNlcnZpY2Ugd29ya2VyIHJlZ2lzdHJhdGlvbiBzdWNjZXNzZnVsXCIpO1xuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICAgIGNvbnNvbGUud2FybihcInNlcnZpY2Ugd29ya2VyIHJlZ2lzdHJhdGlvbiBmYWlsZWRcIiwgZXJyLm1lc3NhZ2UpO1xuICAgICAgICB9KTtcbiAgICB9XG4gIH1cbiAgZ2V0U2VsZWN0ZWRDZWxsKCkge1xuICAgIGNvbnN0IHsgYm9hcmQgfSA9IHRoaXMuc3RhdGU7XG4gICAgY29uc3Qgc2VsZWN0ZWQgPSBib2FyZC5nZXQoXCJzZWxlY3RlZFwiKTtcbiAgICByZXR1cm4gc2VsZWN0ZWQgJiYgYm9hcmQuZ2V0KFwicHV6emxlXCIpLmdldEluKFtzZWxlY3RlZC54LCBzZWxlY3RlZC55XSk7XG4gIH1cblxuICAvLyBnZXQgdGhlIG1pbiBiZXR3ZWVuIGl0cyBjb21wbGV0aW9uIGluIHJvd3MsIGNvbHVtbnMgYW5kIHNxdWFyZXMuXG4gIGdldE51bWJlclZhbHVlQ291bnQobnVtYmVyKSB7XG4gICAgY29uc3Qgcm93cyA9IHRoaXMuc3RhdGUuYm9hcmQuZ2V0SW4oW1wiY2hvaWNlc1wiLCBcInJvd3NcIl0pO1xuICAgIGNvbnN0IGNvbHVtbnMgPSB0aGlzLnN0YXRlLmJvYXJkLmdldEluKFtcImNob2ljZXNcIiwgXCJjb2x1bW5zXCJdKTtcbiAgICBjb25zdCBzcXVhcmVzID0gdGhpcy5zdGF0ZS5ib2FyZC5nZXRJbihbXCJjaG9pY2VzXCIsIFwic3F1YXJlc1wiXSk7XG4gICAgcmV0dXJuIE1hdGgubWluKFxuICAgICAgZ2V0TnVtYmVyT2ZHcm91cHNBc3NpZ25lZEZvck51bWJlcihudW1iZXIsIHNxdWFyZXMpLFxuICAgICAgTWF0aC5taW4oXG4gICAgICAgIGdldE51bWJlck9mR3JvdXBzQXNzaWduZWRGb3JOdW1iZXIobnVtYmVyLCByb3dzKSxcbiAgICAgICAgZ2V0TnVtYmVyT2ZHcm91cHNBc3NpZ25lZEZvck51bWJlcihudW1iZXIsIGNvbHVtbnMpXG4gICAgICApXG4gICAgKTtcbiAgfVxuXG4gIGdlbmVyYXRlR2FtZSA9IChmaW5hbENvdW50ID0gMjApID0+IHtcbiAgICAvLyBnZXQgYSBmaWxsZWQgcHV6emxlIGdlbmVyYXRlZFxuICAgIGNvbnN0IHNvbHV0aW9uID0gbWFrZVB1enpsZSgpO1xuICAgIC8vIHBsdWNrIHZhbHVlcyBmcm9tIGNlbGxzIHRvIGNyZWF0ZSB0aGUgZ2FtZVxuICAgIGNvbnN0IHsgcHV6emxlIH0gPSBwbHVjayhzb2x1dGlvbiwgZmluYWxDb3VudCk7XG4gICAgLy8gaW5pdGlhbGl6ZSB0aGUgYm9hcmQgd2l0aCBjaG9pY2UgY291bnRzXG4gICAgY29uc3QgYm9hcmQgPSBtYWtlQm9hcmQoeyBwdXp6bGUgfSk7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBib2FyZCxcbiAgICAgIGhpc3Rvcnk6IExpc3Qub2YoYm9hcmQpLFxuICAgICAgaGlzdG9yeU9mZlNldDogMCxcbiAgICAgIHNvbHV0aW9uLFxuICAgIH0pO1xuICB9O1xuXG4gIGFkZE51bWJlckFzTm90ZSA9IChudW1iZXIpID0+IHtcbiAgICBsZXQgeyBib2FyZCB9ID0gdGhpcy5zdGF0ZTtcbiAgICBsZXQgc2VsZWN0ZWRDZWxsID0gdGhpcy5nZXRTZWxlY3RlZENlbGwoKTtcbiAgICBpZiAoIXNlbGVjdGVkQ2VsbCkgcmV0dXJuO1xuICAgIGNvbnN0IHByZWZpbGxlZCA9IHNlbGVjdGVkQ2VsbC5nZXQoXCJwcmVmaWxsZWRcIik7XG4gICAgaWYgKHByZWZpbGxlZCkgcmV0dXJuO1xuICAgIGNvbnN0IHsgeCwgeSB9ID0gYm9hcmQuZ2V0KFwic2VsZWN0ZWRcIik7XG4gICAgY29uc3QgY3VycmVudFZhbHVlID0gc2VsZWN0ZWRDZWxsLmdldChcInZhbHVlXCIpO1xuICAgIGlmIChjdXJyZW50VmFsdWUpIHtcbiAgICAgIGJvYXJkID0gdXBkYXRlQm9hcmRXaXRoTnVtYmVyKHtcbiAgICAgICAgeCxcbiAgICAgICAgeSxcbiAgICAgICAgbnVtYmVyOiBjdXJyZW50VmFsdWUsXG4gICAgICAgIGZpbGw6IGZhbHNlLFxuICAgICAgICBib2FyZDogdGhpcy5zdGF0ZS5ib2FyZCxcbiAgICAgIH0pO1xuICAgIH1cbiAgICBsZXQgbm90ZXMgPSBzZWxlY3RlZENlbGwuZ2V0KFwibm90ZXNcIikgfHwgU2V0KCk7XG4gICAgaWYgKG5vdGVzLmhhcyhudW1iZXIpKSB7XG4gICAgICBub3RlcyA9IG5vdGVzLmRlbGV0ZShudW1iZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBub3RlcyA9IG5vdGVzLmFkZChudW1iZXIpO1xuICAgIH1cbiAgICBzZWxlY3RlZENlbGwgPSBzZWxlY3RlZENlbGwuc2V0KFwibm90ZXNcIiwgbm90ZXMpO1xuICAgIHNlbGVjdGVkQ2VsbCA9IHNlbGVjdGVkQ2VsbC5kZWxldGUoXCJ2YWx1ZVwiKTtcbiAgICBib2FyZCA9IGJvYXJkLnNldEluKFtcInB1enpsZVwiLCB4LCB5XSwgc2VsZWN0ZWRDZWxsKTtcbiAgICB0aGlzLnVwZGF0ZUJvYXJkKGJvYXJkKTtcbiAgfTtcblxuICB1cGRhdGVCb2FyZCA9IChuZXdCb2FyZCkgPT4ge1xuICAgIGxldCB7IGhpc3RvcnkgfSA9IHRoaXMuc3RhdGU7XG4gICAgY29uc3QgeyBoaXN0b3J5T2ZmU2V0IH0gPSB0aGlzLnN0YXRlO1xuICAgIC8vIGFueXRoaW5nIGJlZm9yZSBjdXJyZW50IHN0ZXAgaXMgc3RpbGwgaW4gaGlzdG9yeVxuICAgIGhpc3RvcnkgPSBoaXN0b3J5LnNsaWNlKDAsIGhpc3RvcnlPZmZTZXQgKyAxKTtcbiAgICAvLyBhZGQgaXRzZWxmIG9udG8gdGhlIGhpc3RvcnlcbiAgICBoaXN0b3J5ID0gaGlzdG9yeS5wdXNoKG5ld0JvYXJkKTtcbiAgICAvLyB1cGRhdGUgdGhlIGdhbWVcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGJvYXJkOiBuZXdCb2FyZCxcbiAgICAgIGhpc3RvcnksXG4gICAgICBoaXN0b3J5T2ZmU2V0OiBoaXN0b3J5LnNpemUgLSAxLFxuICAgIH0pO1xuICB9O1xuXG4gIGNhblVuZG8gPSAoKSA9PiB0aGlzLnN0YXRlLmhpc3RvcnlPZmZTZXQgPiAwO1xuXG4gIHJlZG8gPSAoKSA9PiB7XG4gICAgY29uc3QgeyBoaXN0b3J5IH0gPSB0aGlzLnN0YXRlO1xuICAgIGxldCB7IGhpc3RvcnlPZmZTZXQgfSA9IHRoaXMuc3RhdGU7XG4gICAgaWYgKGhpc3Rvcnkuc2l6ZSkge1xuICAgICAgaGlzdG9yeU9mZlNldCA9IE1hdGgubWluKGhpc3Rvcnkuc2l6ZSAtIDEsIGhpc3RvcnlPZmZTZXQgKyAxKTtcbiAgICAgIGNvbnN0IGJvYXJkID0gaGlzdG9yeS5nZXQoaGlzdG9yeU9mZlNldCk7XG4gICAgICB0aGlzLnNldFN0YXRlKHsgYm9hcmQsIGhpc3RvcnlPZmZTZXQgfSk7XG4gICAgfVxuICB9O1xuXG4gIHVuZG8gPSAoKSA9PiB7XG4gICAgY29uc3QgeyBoaXN0b3J5IH0gPSB0aGlzLnN0YXRlO1xuICAgIGxldCB7IGhpc3RvcnlPZmZTZXQsIGJvYXJkIH0gPSB0aGlzLnN0YXRlO1xuICAgIGlmIChoaXN0b3J5LnNpemUpIHtcbiAgICAgIGhpc3RvcnlPZmZTZXQgPSBNYXRoLm1heCgwLCBoaXN0b3J5T2ZmU2V0IC0gMSk7XG4gICAgICBib2FyZCA9IGhpc3RvcnkuZ2V0KGhpc3RvcnlPZmZTZXQpO1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IGJvYXJkLCBoaXN0b3J5T2ZmU2V0LCBoaXN0b3J5IH0pO1xuICAgIH1cbiAgfTtcblxuICBlcmFzZVNlbGVjdGVkID0gKCkgPT4ge1xuICAgIGNvbnN0IHNlbGVjdGVkQ2VsbCA9IHRoaXMuZ2V0U2VsZWN0ZWRDZWxsKCk7XG4gICAgaWYgKCFzZWxlY3RlZENlbGwpIHJldHVybjtcbiAgICB0aGlzLmZpbGxOdW1iZXIoZmFsc2UpO1xuICB9O1xuXG4gIGZpbGxTZWxlY3RlZFdpdGhTb2x1dGlvbiA9ICgpID0+IHtcbiAgICBjb25zdCB7IGJvYXJkLCBzb2x1dGlvbiB9ID0gdGhpcy5zdGF0ZTtcbiAgICBjb25zdCBzZWxlY3RlZENlbGwgPSB0aGlzLmdldFNlbGVjdGVkQ2VsbCgpO1xuICAgIGlmICghc2VsZWN0ZWRDZWxsKSByZXR1cm47XG4gICAgY29uc3QgeyB4LCB5IH0gPSBib2FyZC5nZXQoXCJzZWxlY3RlZFwiKTtcbiAgICB0aGlzLmZpbGxOdW1iZXIoc29sdXRpb25beF1beV0pO1xuICB9O1xuXG4gIC8vIGZpbGwgY3VycmVudGx5IHNlbGVjdGVkIGNlbGwgd2l0aCBudW1iZXJcbiAgZmlsbE51bWJlciA9IChudW1iZXIpID0+IHtcbiAgICBsZXQgeyBib2FyZCB9ID0gdGhpcy5zdGF0ZTtcbiAgICBjb25zdCBzZWxlY3RlZENlbGwgPSB0aGlzLmdldFNlbGVjdGVkQ2VsbCgpO1xuICAgIC8vIG5vLW9wIGlmIG5vdGhpbmcgaXMgc2VsZWN0ZWRcbiAgICBpZiAoIXNlbGVjdGVkQ2VsbCkgcmV0dXJuO1xuICAgIGNvbnN0IHByZWZpbGxlZCA9IHNlbGVjdGVkQ2VsbC5nZXQoXCJwcmVmaWxsZWRcIik7XG4gICAgLy8gbm8tb3AgaWYgaXQgaXMgcmVmaWxsZWRcbiAgICBpZiAocHJlZmlsbGVkKSByZXR1cm47XG4gICAgY29uc3QgeyB4LCB5IH0gPSBib2FyZC5nZXQoXCJzZWxlY3RlZFwiKTtcbiAgICBjb25zdCBjdXJyZW50VmFsdWUgPSBzZWxlY3RlZENlbGwuZ2V0KFwidmFsdWVcIik7XG4gICAgLy8gcmVtb3ZlIHRoZSBjdXJyZW50IHZhbHVlIGFuZCB1cGRhdGUgdGhlIGdhbWUgc3RhdGVcbiAgICBpZiAoY3VycmVudFZhbHVlKSB7XG4gICAgICBib2FyZCA9IHVwZGF0ZUJvYXJkV2l0aE51bWJlcih7XG4gICAgICAgIHgsXG4gICAgICAgIHksXG4gICAgICAgIG51bWJlcjogY3VycmVudFZhbHVlLFxuICAgICAgICBmaWxsOiBmYWxzZSxcbiAgICAgICAgYm9hcmQ6IHRoaXMuc3RhdGUuYm9hcmQsXG4gICAgICB9KTtcbiAgICB9XG4gICAgLy8gdXBkYXRlIHRvIG5ldyBudW1iZXIgaWYgYW55XG4gICAgY29uc3Qgc2V0TnVtYmVyID0gY3VycmVudFZhbHVlICE9PSBudW1iZXIgJiYgbnVtYmVyO1xuICAgIGlmIChzZXROdW1iZXIpIHtcbiAgICAgIGJvYXJkID0gdXBkYXRlQm9hcmRXaXRoTnVtYmVyKHtcbiAgICAgICAgeCxcbiAgICAgICAgeSxcbiAgICAgICAgbnVtYmVyLFxuICAgICAgICBmaWxsOiB0cnVlLFxuICAgICAgICBib2FyZCxcbiAgICAgIH0pO1xuICAgIH1cbiAgICB0aGlzLnVwZGF0ZUJvYXJkKGJvYXJkKTtcbiAgfTtcblxuICBzZWxlY3RDZWxsID0gKHgsIHkpID0+IHtcbiAgICBsZXQgeyBib2FyZCB9ID0gdGhpcy5zdGF0ZTtcbiAgICBib2FyZCA9IGJvYXJkLnNldChcInNlbGVjdGVkXCIsIHsgeCwgeSB9KTtcbiAgICB0aGlzLnNldFN0YXRlKHsgYm9hcmQgfSk7XG4gIH07XG5cbiAgaXNDb25mbGljdChpLCBqKSB7XG4gICAgY29uc3QgeyB2YWx1ZSB9ID0gdGhpcy5zdGF0ZS5ib2FyZC5nZXRJbihbXCJwdXp6bGVcIiwgaSwgal0pLnRvSlNPTigpO1xuICAgIGlmICghdmFsdWUpIHJldHVybiBmYWxzZTtcbiAgICBjb25zdCByb3dDb25mbGljdCA9XG4gICAgICB0aGlzLnN0YXRlLmJvYXJkLmdldEluKFtcImNob2ljZXNcIiwgXCJyb3dzXCIsIGksIHZhbHVlXSkgPiAxO1xuICAgIGNvbnN0IGNvbHVtbkNvbmZsaWN0ID1cbiAgICAgIHRoaXMuc3RhdGUuYm9hcmQuZ2V0SW4oW1wiY2hvaWNlc1wiLCBcImNvbHVtbnNcIiwgaiwgdmFsdWVdKSA+IDE7XG4gICAgY29uc3Qgc3F1YXJlQ29uZmxpY3QgPVxuICAgICAgdGhpcy5zdGF0ZS5ib2FyZC5nZXRJbihbXG4gICAgICAgIFwiY2hvaWNlc1wiLFxuICAgICAgICBcInNxdWFyZXNcIixcbiAgICAgICAgTWF0aC5mbG9vcihpIC8gMykgKiAzICsgTWF0aC5mbG9vcihqIC8gMyksXG4gICAgICAgIHZhbHVlLFxuICAgICAgXSkgPiAxO1xuICAgIHJldHVybiByb3dDb25mbGljdCB8fCBjb2x1bW5Db25mbGljdCB8fCBzcXVhcmVDb25mbGljdDtcbiAgfVxuXG4gIHJlbmRlckNlbGwoY2VsbCwgeCwgeSkge1xuICAgIGNvbnN0IHsgYm9hcmQgfSA9IHRoaXMuc3RhdGU7XG4gICAgY29uc3Qgc2VsZWN0ZWQgPSB0aGlzLmdldFNlbGVjdGVkQ2VsbCgpO1xuICAgIGNvbnN0IHsgdmFsdWUsIHByZWZpbGxlZCwgbm90ZXMgfSA9IGNlbGwudG9KU09OKCk7XG4gICAgY29uc3QgY29uZmxpY3QgPSB0aGlzLmlzQ29uZmxpY3QoeCwgeSk7XG4gICAgY29uc3QgcGVlciA9IGFyZUNvb3JkaW5hdGVQZWVycyh7IHgsIHkgfSwgYm9hcmQuZ2V0KFwic2VsZWN0ZWRcIikpO1xuICAgIGNvbnN0IHNhbWVWYWx1ZSA9ICEhKFxuICAgICAgc2VsZWN0ZWQgJiZcbiAgICAgIHNlbGVjdGVkLmdldChcInZhbHVlXCIpICYmXG4gICAgICB2YWx1ZSA9PT0gc2VsZWN0ZWQuZ2V0KFwidmFsdWVcIilcbiAgICApO1xuXG4gICAgY29uc3QgaXNTZWxlY3RlZCA9IGNlbGwgPT09IHNlbGVjdGVkO1xuICAgIHJldHVybiAoXG4gICAgICA8Q2VsbFxuICAgICAgICBwcmVmaWxsZWQ9e3ByZWZpbGxlZH1cbiAgICAgICAgbm90ZXM9e25vdGVzfVxuICAgICAgICBzYW1lVmFsdWU9e3NhbWVWYWx1ZX1cbiAgICAgICAgaXNTZWxlY3RlZD17aXNTZWxlY3RlZH1cbiAgICAgICAgaXNQZWVyPXtwZWVyfVxuICAgICAgICB2YWx1ZT17dmFsdWV9XG4gICAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgICB0aGlzLnNlbGVjdENlbGwoeCwgeSk7XG4gICAgICAgIH19XG4gICAgICAgIGtleT17eX1cbiAgICAgICAgeD17eH1cbiAgICAgICAgeT17eX1cbiAgICAgICAgY29uZmxpY3Q9e2NvbmZsaWN0fVxuICAgICAgLz5cbiAgICApO1xuICB9XG5cbiAgcmVuZGVyTnVtYmVyQ29udHJvbCgpIHtcbiAgICBjb25zdCBzZWxlY3RlZENlbGwgPSB0aGlzLmdldFNlbGVjdGVkQ2VsbCgpO1xuICAgIGNvbnN0IHByZWZpbGxlZCA9IHNlbGVjdGVkQ2VsbCAmJiBzZWxlY3RlZENlbGwuZ2V0KFwicHJlZmlsbGVkXCIpO1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbnRyb2xcIj5cbiAgICAgICAge3JhbmdlKDkpLm1hcCgoaSkgPT4ge1xuICAgICAgICAgIGNvbnN0IG51bWJlciA9IGkgKyAxO1xuICAgICAgICAgIC8vIGhhbmRsZXMgYmluZGluZyBzaW5nbGUgY2xpY2sgYW5kIGRvdWJsZSBjbGljayBjYWxsYmFja3NcbiAgICAgICAgICBjb25zdCBjbGlja0hhbmRsZSA9IGdldENsaWNrSGFuZGxlcihcbiAgICAgICAgICAgICgpID0+IHtcbiAgICAgICAgICAgICAgdGhpcy5maWxsTnVtYmVyKG51bWJlcik7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgKCkgPT4ge1xuICAgICAgICAgICAgICB0aGlzLmFkZE51bWJlckFzTm90ZShudW1iZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICk7XG4gICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxOdW1iZXJDb250cm9sXG4gICAgICAgICAgICAgIGtleT17bnVtYmVyfVxuICAgICAgICAgICAgICBudW1iZXI9e251bWJlcn1cbiAgICAgICAgICAgICAgb25DbGljaz17IXByZWZpbGxlZCA/IGNsaWNrSGFuZGxlIDogdW5kZWZpbmVkfVxuICAgICAgICAgICAgICBjb21wbGV0aW9uUGVyY2VudGFnZT17dGhpcy5nZXROdW1iZXJWYWx1ZUNvdW50KG51bWJlcikgLyA5fVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICApO1xuICAgICAgICB9KX1cbiAgICAgICAgPHN0eWxlIGpzeD57Q29udHJvbFN0eWxlfTwvc3R5bGU+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG5cbiAgcmVuZGVyQWN0aW9ucygpIHtcbiAgICBjb25zdCB7IGhpc3RvcnkgfSA9IHRoaXMuc3RhdGU7XG4gICAgY29uc3Qgc2VsZWN0ZWRDZWxsID0gdGhpcy5nZXRTZWxlY3RlZENlbGwoKTtcbiAgICBjb25zdCBwcmVmaWxsZWQgPSBzZWxlY3RlZENlbGwgJiYgc2VsZWN0ZWRDZWxsLmdldChcInByZWZpbGxlZFwiKTtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJhY3Rpb25zXCI+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYWN0aW9uXCIgb25DbGljaz17aGlzdG9yeS5zaXplID8gdGhpcy51bmRvIDogbnVsbH0+XG4gICAgICAgICAgPFJlbG9hZEljb24gLz5cbiAgICAgICAgICBIb8OgbiB0w6FjXG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFjdGlvbiByZWRvXCIgb25DbGljaz17aGlzdG9yeS5zaXplID8gdGhpcy5yZWRvIDogbnVsbH0+XG4gICAgICAgICAgPFJlbG9hZEljb24gLz5cbiAgICAgICAgICBLaMO0aSBwaOG7pWNcbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXZcbiAgICAgICAgICBjbGFzc05hbWU9XCJhY3Rpb25cIlxuICAgICAgICAgIG9uQ2xpY2s9eyFwcmVmaWxsZWQgPyB0aGlzLmVyYXNlU2VsZWN0ZWQgOiBudWxsfVxuICAgICAgICA+XG4gICAgICAgICAgPFJlbW92ZUljb24gLz5cbiAgICAgICAgICBYb8OhXG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2XG4gICAgICAgICAgY2xhc3NOYW1lPVwiYWN0aW9uXCJcbiAgICAgICAgICBvbkNsaWNrPXshcHJlZmlsbGVkID8gdGhpcy5maWxsU2VsZWN0ZWRXaXRoU29sdXRpb24gOiBudWxsfVxuICAgICAgICA+XG4gICAgICAgICAgPExvdXBlSWNvbiAvPlxuICAgICAgICAgIEfhu6NpIMO9XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8c3R5bGUganN4PntBY3Rpb25zU3R5bGV9PC9zdHlsZT5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cblxuICByZW5kZXJQdXp6bGUoKSB7XG4gICAgY29uc3QgeyBib2FyZCB9ID0gdGhpcy5zdGF0ZTtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJwdXp6bGVcIiBzdHlsZT17eyBiYWNrZ3JvdW5kQ29sb3I6IFwiI0VEQkI5NFwiIH19PlxuICAgICAgICB7Ym9hcmRcbiAgICAgICAgICAuZ2V0KFwicHV6emxlXCIpXG4gICAgICAgICAgLm1hcCgocm93LCBpKSA9PiAoXG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3Qvbm8tYXJyYXktaW5kZXgta2V5XG4gICAgICAgICAgICA8ZGl2IGtleT17aX0gY2xhc3NOYW1lPVwicm93XCIgc3R5bGU9e3sgYmFja2dyb3VuZENvbG9yOiBcInJlZFwiIH19PlxuICAgICAgICAgICAgICB7cm93Lm1hcCgoY2VsbCwgaikgPT4gdGhpcy5yZW5kZXJDZWxsKGNlbGwsIGksIGopKS50b0FycmF5KCl9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICApKVxuICAgICAgICAgIC50b0FycmF5KCl9XG4gICAgICAgIDxzdHlsZSBqc3g+e1B1enpsZVN0eWxlfTwvc3R5bGU+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG5cbiAgcmVuZGVyQ29udHJvbHMoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29udHJvbHNcIj5cbiAgICAgICAge3RoaXMucmVuZGVyTnVtYmVyQ29udHJvbCgpfVxuICAgICAgICB7dGhpcy5yZW5kZXJBY3Rpb25zKCl9XG4gICAgICAgIHsvKiBsYW5ndWFnZT1DU1MgKi99XG4gICAgICAgIDxzdHlsZSBqc3g+XG4gICAgICAgICAge2BcbiAgICAgICAgICAgIC5jb250cm9scyB7XG4gICAgICAgICAgICAgIG1hcmdpbi10b3A6IDAuM2VtO1xuICAgICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgICAgICBmbGV4LXdyYXA6IHdyYXA7XG4gICAgICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgICAgICAgcGFkZGluZzogMC41ZW0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICBgfVxuICAgICAgICA8L3N0eWxlPlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxuXG4gIHJlbmRlckdlbmVyYXRpb25VSSgpIHtcbiAgICByZXR1cm4gPEdlbmVyYXRpb25VSSBnZW5lcmF0ZUdhbWU9e3RoaXMuZ2VuZXJhdGVHYW1lfSAvPjtcbiAgfVxuXG4gIHJlbmRlckhlYWRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJoZWFkZXJcIj5cbiAgICAgICAgPGRpdlxuICAgICAgICAgIGNsYXNzTmFtZT1cIm5ldy1nYW1lXCJcbiAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB0aGlzLnNldFN0YXRlKHsgYm9hcmQ6IGZhbHNlIH0pfVxuICAgICAgICA+XG4gICAgICAgICAgPFJldHVybkljb24gLz5cbiAgICAgICAgICA8ZGl2PlRyw7IgY2jGoWkgbeG7m2k8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIHsvKiA8VGlwIC8+ICovfVxuICAgICAgICB7LyogbGFuZ3VhZ2U9Q1NTICovfVxuICAgICAgICA8c3R5bGUganN4PlxuICAgICAgICAgIHtgXG4gICAgICAgICAgICAuaGVhZGVyIHtcbiAgICAgICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgICAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgICAgICAgICAgICAgbWF4LXdpZHRoOiA1MDBweDtcbiAgICAgICAgICAgICAgcGFkZGluZzogMCAwLjVlbTtcbiAgICAgICAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC5uZXctZ2FtZSB7XG4gICAgICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICAgICAgICAgICAgbWFyZ2luLXRvcDogMC4yZW07XG4gICAgICAgICAgICAgIGRpc3BsYXk6IGlubGluZS1mbGV4O1xuICAgICAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICAgICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgICAgICAgcGFkZGluZzogMC4yZW0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC5uZXctZ2FtZSA6Z2xvYmFsKHN2Zykge1xuICAgICAgICAgICAgICBoZWlnaHQ6IDFlbTtcbiAgICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogMC4zZW07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgYH1cbiAgICAgICAgPC9zdHlsZT5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBib2FyZCB9ID0gdGhpcy5zdGF0ZTtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJib2R5XCI+XG4gICAgICAgIDxOZXh0SGVhZD5cbiAgICAgICAgICA8dGl0bGU+U3Vkb2t1IEV2b2x2ZWQ8L3RpdGxlPlxuICAgICAgICAgIDxtZXRhXG4gICAgICAgICAgICBuYW1lPVwidmlld3BvcnRcIlxuICAgICAgICAgICAgY29udGVudD1cImluaXRpYWwtc2NhbGU9MS4wLCB3aWR0aD1kZXZpY2Utd2lkdGhcIlxuICAgICAgICAgIC8+XG4gICAgICAgICAgPG1ldGEgbmFtZT1cImRlc2NyaXB0aW9uXCIgY29udGVudD17RGVzY3JpcHRpb259IC8+XG4gICAgICAgICAgPGxpbmtcbiAgICAgICAgICAgIGhyZWY9XCJodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2Nzcz9mYW1pbHk9U3BlY2lhbCtFbGl0ZVwiXG4gICAgICAgICAgICByZWw9XCJzdHlsZXNoZWV0XCJcbiAgICAgICAgICAvPlxuICAgICAgICAgIDxtZXRhIHByb3BlcnR5PVwib2c6dXJsXCIgY29udGVudD1cImh0dHBzOi8vc3Vkb2t1LnNpdGlhbmxpdS5jb20vXCIgLz5cbiAgICAgICAgICA8bWV0YSBwcm9wZXJ0eT1cIm9nOnRpdGxlXCIgY29udGVudD1cIlN1ZG9rdSBFdm9sdmVkXCIgLz5cbiAgICAgICAgICA8bWV0YSBwcm9wZXJ0eT1cIm9nOnR5cGVcIiBjb250ZW50PVwid2Vic2l0ZVwiIC8+XG4gICAgICAgICAgPG1ldGEgcHJvcGVydHk9XCJvZzpkZXNjcmlwdGlvblwiIGNvbnRlbnQ9e0Rlc2NyaXB0aW9ufSAvPlxuICAgICAgICAgIDxtZXRhXG4gICAgICAgICAgICBwcm9wZXJ0eT1cIm9nOmltYWdlXCJcbiAgICAgICAgICAgIGNvbnRlbnQ9XCJodHRwczovL3N1ZG9rdS5zaXRpYW5saXUuY29tL3N0YXRpYy9vZy1pbWFnZS5wbmdcIlxuICAgICAgICAgIC8+XG4gICAgICAgIDwvTmV4dEhlYWQ+XG4gICAgICAgIHshYm9hcmQgJiYgdGhpcy5yZW5kZXJHZW5lcmF0aW9uVUkoKX1cbiAgICAgICAge2JvYXJkICYmIHRoaXMucmVuZGVySGVhZGVyKCl9XG4gICAgICAgIHtib2FyZCAmJiB0aGlzLnJlbmRlclB1enpsZSgpfVxuICAgICAgICB7Ym9hcmQgJiYgdGhpcy5yZW5kZXJDb250cm9scygpfVxuICAgICAgICB7LyogPGRpdiBjbGFzc05hbWU9XCJyb290ZXJcIj5cbiAgICAgICAgICBNYWRlIHdpdGggPHNwYW4+4p2k77iPPC9zcGFuPu+4jyBCeSA8YSBocmVmPVwiaHR0cHM6Ly93d3cuc2l0aWFubGl1LmNvbS9cIj5TaXRpYW4gTGl1PC9hPiB8IDxhIGhyZWY9XCJodHRwczovL21lZGl1bS5jb20vQHNpdGlhbmxpdV81NzY4MC9idWlsZGluZy1hLXN1ZG9rdS1nYW1lLWluLXJlYWN0LWNhNjYzOTE1NzEyXCI+QmxvZyBQb3N0PC9hPlxuICAgICAgICA8L2Rpdj4gKi99XG4gICAgICAgIHsvKiBsYW5ndWFnZT1DU1MgKi99XG4gICAgICAgIDxzdHlsZSBqc3g+XG4gICAgICAgICAge2BcbiAgICAgICAgICAgIDpnbG9iYWwoYm9keSksXG4gICAgICAgICAgICAuYm9keSB7XG4gICAgICAgICAgICAgIGZvbnQtZmFtaWx5OiBcIlNwZWNpYWwgRWxpdGVcIiwgY3Vyc2l2ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC5ib2R5IHtcbiAgICAgICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICAgICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgICAgICAgICAgIGhlaWdodDogMTAwdmg7XG4gICAgICAgICAgICAgIHdpZHRoOiAxMDB2dztcbiAgICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjYjM4YTgxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgQG1lZGlhIChtaW4td2lkdGg6IDgwMHB4KSBhbmQgKG1pbi1oZWlnaHQ6IDkzMHB4KSB7XG4gICAgICAgICAgICAgIDpnbG9iYWwoLmhlYWRlciwgLnB1enpsZSwgLmNvbnRyb2xzKSB7XG4gICAgICAgICAgICAgICAgZm9udC1zaXplOiAxLjVlbTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgQG1lZGlhIChtYXgtd2lkdGg6IDgwMHB4KSBhbmQgKG1pbi13aWR0aDogNjAwcHgpIHtcbiAgICAgICAgICAgICAgOmdsb2JhbCguaGVhZGVyLCAucHV6emxlLCAuY29udHJvbHMpIHtcbiAgICAgICAgICAgICAgICBmb250LXNpemU6IDEuMmVtO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBAbWVkaWEgKG1heC1oZWlnaHQ6IDkzMHB4KSBhbmQgKG1pbi1oZWlnaHQ6IDgwMHB4KSBhbmQgKG1pbi13aWR0aDogNjAwcHgpIHtcbiAgICAgICAgICAgICAgOmdsb2JhbCguaGVhZGVyLCAucHV6emxlLCAuY29udHJvbHMpIHtcbiAgICAgICAgICAgICAgICBmb250LXNpemU6IDEuMmVtO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBAbWVkaWEgKG1heC1oZWlnaHQ6IDgwMHB4KSBhbmQgKG1pbi1oZWlnaHQ6IDYwMHB4KSBhbmQgKG1pbi13aWR0aDogMzcwcHgpIHtcbiAgICAgICAgICAgICAgOmdsb2JhbCguaGVhZGVyLCAucHV6emxlLCAuY29udHJvbHMpIHtcbiAgICAgICAgICAgICAgICBmb250LXNpemU6IDFlbTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgQG1lZGlhIChtYXgtd2lkdGg6IDM3MHB4KSB7XG4gICAgICAgICAgICAgIDpnbG9iYWwoLmhlYWRlciwgLnB1enpsZSwgLmNvbnRyb2xzKSB7XG4gICAgICAgICAgICAgICAgZm9udC1zaXplOiAwLjhlbTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgQG1lZGlhIChtYXgtaGVpZ2h0OiA2MDBweCkge1xuICAgICAgICAgICAgICA6Z2xvYmFsKC5oZWFkZXIsIC5wdXp6bGUsIC5jb250cm9scykge1xuICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMC44ZW07XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDpnbG9iYWwoYm9keSkge1xuICAgICAgICAgICAgICBtYXJnaW46IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAucm9vdGVyIHtcbiAgICAgICAgICAgICAgcG9zaXRpb246IGZpeGVkO1xuICAgICAgICAgICAgICBib3R0b206IDA7XG4gICAgICAgICAgICAgIGZvbnQtc2l6ZTogMC44ZW07XG4gICAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgYH1cbiAgICAgICAgPC9zdHlsZT5cbiAgICAgICAgPHN0eWxlIGpzeCBnbG9iYWw+XG4gICAgICAgICAge1JhbmdlU3R5bGV9XG4gICAgICAgIDwvc3R5bGU+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG4iXX0= */\n/*@ sourceURL=pages/index.js */";
ControlStyle.__scopedHash = "3477817503";
{
  /* language=CSS */
}
var NumberControlStyle = new String(".number{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;position:relative;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;font-size:2em;margin:0.1em;width:1.5em;height:1.5em;color:" + ControlNumberColor + ";box-shadow:0 1px 2px rgba(0,0,0,0.16),0 1px 2px rgba(0,0,0,0.23);border-radius:50%;}.number>div{margin-top:0.3em;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=pages/index.js */");

// eslint-disable-next-line no-lone-blocks
NumberControlStyle.__hash = "3338662319";
NumberControlStyle.__scoped = ".number.jsx-3083191822{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;position:relative;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;font-size:2em;margin:0.1em;width:1.5em;height:1.5em;color:" + ControlNumberColor + ";box-shadow:0 1px 2px rgba(0,0,0,0.16),0 1px 2px rgba(0,0,0,0.23);border-radius:50%;}.number.jsx-3083191822>div.jsx-3083191822{margin-top:0.3em;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=pages/index.js */";
NumberControlStyle.__scopedHash = "3083191822";
{
  /* language=CSS */
}
var PuzzleStyle = new String(".puzzle{margin-top:0.5em;width:" + cellWidth * 9 + "em;cursor:pointer;box-shadow:0 3px 6px rgba(0,0,0,0.16),0 3px 6px rgba(0,0,0,0.23);}.row{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-flex:0;-ms-flex:0;flex:0;width:" + cellWidth * 9 + "em;}.row:not(:last-child){border-bottom:1px solid black;}.row:nth-child(3n + 3):not(:last-child){border-bottom:2px solid black !important;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=pages/index.js */");

// eslint-disable-next-line no-lone-blocks
PuzzleStyle.__hash = "1191579447";
PuzzleStyle.__scoped = ".puzzle.jsx-1917068406{margin-top:0.5em;width:" + cellWidth * 9 + "em;cursor:pointer;box-shadow:0 3px 6px rgba(0,0,0,0.16),0 3px 6px rgba(0,0,0,0.23);}.row.jsx-1917068406{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-flex:0;-ms-flex:0;flex:0;width:" + cellWidth * 9 + "em;}.row.jsx-1917068406:not(:last-child){border-bottom:1px solid black;}.row.jsx-1917068406:nth-child(3n + 3):not(:last-child){border-bottom:2px solid black !important;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=pages/index.js */";
PuzzleStyle.__scopedHash = "1917068406";
{
  /* language=CSS */
}
var CirculuarProgressStyle = new String(".circular-progress{display:block;width:100%;position:absolute;top:0;left:0;-webkit-transition:filter 0.4s ease-in-out;transition:filter 0.4s ease-in-out;}.circle-bg{fill:none;stroke:#eee;stroke-width:3.8;}.circle{stroke:" + ControlNumberColor + ";-webkit-transition:stroke-dasharray 0.4s ease-in-out;transition:stroke-dasharray 0.4s ease-in-out;fill:none;stroke-width:2.8;stroke-linecap:round;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=pages/index.js */");

CirculuarProgressStyle.__hash = "60175357";
CirculuarProgressStyle.__scoped = ".circular-progress.jsx-721436732{display:block;width:100%;position:absolute;top:0;left:0;-webkit-transition:filter 0.4s ease-in-out;transition:filter 0.4s ease-in-out;}.circle-bg.jsx-721436732{fill:none;stroke:#eee;stroke-width:3.8;}.circle.jsx-721436732{stroke:" + ControlNumberColor + ";-webkit-transition:stroke-dasharray 0.4s ease-in-out;transition:stroke-dasharray 0.4s ease-in-out;fill:none;stroke-width:2.8;stroke-linecap:round;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=pages/index.js */";
CirculuarProgressStyle.__scopedHash = "721436732";
var CircularPathD = "M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831";

function getBackGroundColor(_ref) {
  var conflict = _ref.conflict,
      isPeer = _ref.isPeer,
      sameValue = _ref.sameValue,
      isSelected = _ref.isSelected;

  if (conflict && isPeer && sameValue) {
    return DeepOrange200;
  } else if (sameValue) {
    return LightBlue300;
  } else if (isSelected) {
    return LightBlue200;
  } else if (isPeer) {
    return LightBlue100;
  }
  return false;
}

function getFontColor(_ref2) {
  var value = _ref2.value,
      conflict = _ref2.conflict,
      prefilled = _ref2.prefilled;

  if (conflict && !prefilled) {
    return DeepOrange600;
  } else if (!prefilled && value) {
    return ControlNumberColor;
  }
  return false;
}

var GenerationUI = function (_Component) {
  _inherits(GenerationUI, _Component);

  function GenerationUI(props) {
    _classCallCheck(this, GenerationUI);

    var _this = _possibleConstructorReturn(this, (GenerationUI.__proto__ || Object.getPrototypeOf(GenerationUI)).call(this, props));

    _this.generateGame = function () {
      _this.props.generateGame(_this.state.value);
    };

    _this.state = { value: 30 };
    return _this;
  }

  _createClass(GenerationUI, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      return __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
        "div",
        {
          className: "jsx-4269247370" + " " + "generation",
          __source: {
            fileName: _jsxFileName,
            lineNumber: 233
          }
        },
        __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
          "div",
          {
            className: "jsx-4269247370" + " " + "copy",
            __source: {
              fileName: _jsxFileName,
              lineNumber: 234
            }
          },
          "B\u1EAFt \u0111\u1EA7u v\u1EDBi ",
          this.state.value,
          " \xF4 \u0111i\u1EC1n tr\u01B0\u1EDBc "
        ),
        __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_6_react_input_range___default.a, {
          maxValue: 81,
          minValue: 17,
          value: this.state.value,
          onChange: function onChange(value) {
            return _this2.setState({ value: value });
          },
          __source: {
            fileName: _jsxFileName,
            lineNumber: 235
          }
        }),
        __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
          "div",
          { onClick: this.generateGame, className: "jsx-4269247370" + " " + "button",
            __source: {
              fileName: _jsxFileName,
              lineNumber: 241
            }
          },
          "Play Sudoku"
        ),
        __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_0_styled_jsx_style___default.a, {
          styleId: "4269247370",
          css: ".copy.jsx-4269247370{text-align:center;font-size:1.3em;margin-bottom:0.5em;}.generation.jsx-4269247370{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;width:100%;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.input-range{width:80%;max-width:500px;}.button.jsx-4269247370{margin-top:0.5em;border-radius:0.25em;cursor:pointer;font-weight:bold;text-decoration:none;color:#fff;position:relative;display:inline-block;-webkit-transition:all 0.25s;transition:all 0.25s;padding:5px 10px;font-size:1.4em;}.button.jsx-4269247370:active{-webkit-transform:translate(0px,5px);-ms-transform:translate(0px,5px);transform:translate(0px,5px);box-shadow:0 1px 0 0;}.button.jsx-4269247370{background-color:" + __WEBPACK_IMPORTED_MODULE_9__colors__["a" /* backGroundBlue */] + ";box-shadow:0 2px 4px 0 " + __WEBPACK_IMPORTED_MODULE_5_color___default()(__WEBPACK_IMPORTED_MODULE_9__colors__["a" /* backGroundBlue */]).darken(0.5).hsl().string() + ";display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.button.jsx-4269247370:hover{background-color:" + __WEBPACK_IMPORTED_MODULE_5_color___default()(__WEBPACK_IMPORTED_MODULE_9__colors__["a" /* backGroundBlue */]).lighten(0.2).hsl().string() + ";}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=pages/index.js */"
        })
      );
    }
  }, {
    key: "__reactstandin__regenerateByEval",
    value: function __reactstandin__regenerateByEval(key, code) {
      this[key] = eval(code);
    }
  }]);

  return GenerationUI;
}(__WEBPACK_IMPORTED_MODULE_1_react__["Component"]);

GenerationUI.propTypes = {
  generateGame: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.func.isRequired
};

var NumberControl = function NumberControl(_ref3) {
  var number = _ref3.number,
      onClick = _ref3.onClick,
      completionPercentage = _ref3.completionPercentage;
  return __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
    "div",
    { key: number, onClick: onClick, className: "jsx-" + NumberControlStyle.__scopedHash + " " + "number",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 307
      }
    },
    __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
      "div",
      {
        className: "jsx-" + NumberControlStyle.__scopedHash,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 308
        }
      },
      number
    ),
    __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(CirclularProgress, { percent: completionPercentage, __source: {
        fileName: _jsxFileName,
        lineNumber: 309
      }
    }),
    __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_0_styled_jsx_style___default.a, {
      styleId: NumberControlStyle.__scopedHash,
      css: NumberControlStyle.__scoped
    })
  );
};

NumberControl.propTypes = {
  number: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.number.isRequired,
  onClick: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.func,
  completionPercentage: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.number.isRequired
};

NumberControl.defaultProps = {
  onClick: null
};

var Cell = function Cell(props) {
  var value = props.value,
      onClick = props.onClick,
      isPeer = props.isPeer,
      isSelected = props.isSelected,
      sameValue = props.sameValue,
      prefilled = props.prefilled,
      notes = props.notes,
      conflict = props.conflict;

  var backgroundColor = getBackGroundColor({
    conflict: conflict,
    isPeer: isPeer,
    sameValue: sameValue,
    isSelected: isSelected
  });
  var fontColor = getFontColor({ conflict: conflict, prefilled: prefilled, value: value });
  return __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
    "div",
    { onClick: onClick, className: "jsx-" + CellStyle.__scopedHash + " " + __WEBPACK_IMPORTED_MODULE_0_styled_jsx_style___default.a.dynamic([["4273357153", [!backgroundColor ? "linear-gradient(180deg, rgba(255,255,255,1) 0%,rgba(255,255,255,1) 51%, rgba(237,187,148,1) 100%)" : "initial", backgroundColor || "initial", fontColor || "initial"]]]) + " " + "cell",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 343
      }
    },
    notes ? Object(__WEBPACK_IMPORTED_MODULE_8__sudoku__["d" /* range */])(9).map(function (i) {
      return __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
        "div",
        { key: i, className: "jsx-" + CellStyle.__scopedHash + " " + __WEBPACK_IMPORTED_MODULE_0_styled_jsx_style___default.a.dynamic([["4273357153", [!backgroundColor ? "linear-gradient(180deg, rgba(255,255,255,1) 0%,rgba(255,255,255,1) 51%, rgba(237,187,148,1) 100%)" : "initial", backgroundColor || "initial", fontColor || "initial"]]]) + " " + "note-number",
          __source: {
            fileName: _jsxFileName,
            lineNumber: 346
          }
        },
        notes.has(i + 1) && i + 1
      );
    }) : value && value,
    __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_0_styled_jsx_style___default.a, {
      styleId: CellStyle.__scopedHash,
      css: CellStyle.__scoped
    }),
    __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_0_styled_jsx_style___default.a, {
      styleId: "4273357153",
      css: ".cell.__jsx-style-dynamic-selector{background:" + (!backgroundColor ? "linear-gradient(180deg, rgba(255,255,255,1) 0%,rgba(255,255,255,1) 51%, rgba(237,187,148,1) 100%)" : "initial") + ";background-color:" + (backgroundColor || "initial") + ";color:" + (fontColor || "initial") + ";}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=pages/index.js */",
      dynamic: [!backgroundColor ? "linear-gradient(180deg, rgba(255,255,255,1) 0%,rgba(255,255,255,1) 51%, rgba(237,187,148,1) 100%)" : "initial", backgroundColor || "initial", fontColor || "initial"]
    })
  );
};

Cell.propTypes = {
  // current number value
  value: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.number,
  // cell click handler
  onClick: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.func.isRequired,
  // if the cell is a peer of the selected cell
  isPeer: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.bool.isRequired,
  // if the cell is selected by the user
  isSelected: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.bool.isRequired,
  // current cell has the same value if the user selected cell
  sameValue: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.bool.isRequired,
  // if this was prefilled as a part of the puzzle
  prefilled: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.bool.isRequired,
  // current notes taken on the cell
  notes: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.instanceOf(__WEBPACK_IMPORTED_MODULE_2_immutable__["b" /* Set */]),
  // if the current cell does not satisfy the game constraint
  conflict: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.bool.isRequired
};

Cell.defaultProps = {
  notes: null,
  value: null
};

var CirclularProgress = function CirclularProgress(_ref4) {
  var percent = _ref4.percent;
  return __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
    "svg",
    { viewBox: "0 0 36 36", className: "jsx-" + CirculuarProgressStyle.__scopedHash + " " + "circular-progress",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 393
      }
    },
    __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement("path", { d: CircularPathD, className: "jsx-" + CirculuarProgressStyle.__scopedHash + " " + "circle-bg",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 394
      }
    }),
    __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement("path", {
      strokeDasharray: percent * 100 + ", 100",
      d: CircularPathD,
      className: "jsx-" + CirculuarProgressStyle.__scopedHash + " " + "circle",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 395
      }
    }),
    __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_0_styled_jsx_style___default.a, {
      styleId: CirculuarProgressStyle.__scopedHash,
      css: CirculuarProgressStyle.__scoped
    })
  );
};

CirclularProgress.propTypes = {
  percent: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.number.isRequired
};

function getClickHandler(onClick, onDoubleClick) {
  var delay = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 250;

  var timeoutID = null;
  return function (event) {
    if (!timeoutID) {
      timeoutID = setTimeout(function () {
        onClick(event);
        timeoutID = null;
      }, delay);
    } else {
      timeoutID = clearTimeout(timeoutID);
      onDoubleClick(event);
    }
  };
}

/**
 * make size 9 array of 0s
 * @returns {Array}
 */
function makeCountObject() {
  var countObj = [];
  for (var i = 0; i < 10; i += 1) {
    countObj.push(0);
  }return countObj;
}

/**
 * given a 2D array of numbers as the initial puzzle, generate the initial game state
 * @param puzzle
 * @returns {any}
 */
function makeBoard(_ref5) {
  var puzzle = _ref5.puzzle;

  // create initial count object to keep track of conflicts per number value
  var rows = Array.from(Array(9).keys()).map(function () {
    return makeCountObject();
  });
  var columns = Array.from(Array(9).keys()).map(function () {
    return makeCountObject();
  });
  var squares = Array.from(Array(9).keys()).map(function () {
    return makeCountObject();
  });
  var result = puzzle.map(function (row, i) {
    return row.map(function (cell, j) {
      if (cell) {
        rows[i][cell] += 1;
        columns[j][cell] += 1;
        squares[Math.floor(i / 3) * 3 + Math.floor(j / 3)][cell] += 1;
      }
      return {
        value: puzzle[i][j] > 0 ? puzzle[i][j] : null,
        prefilled: !!puzzle[i][j]
      };
    });
  });
  return Object(__WEBPACK_IMPORTED_MODULE_2_immutable__["c" /* fromJS */])({
    puzzle: result,
    selected: false,
    choices: { rows: rows, columns: columns, squares: squares }
  });
}

/**
 * give the coordinate update the current board with a number choice
 * @param x
 * @param y
 * @param number
 * @param fill whether to set or unset
 * @param board the immutable board given to change
 */
function updateBoardWithNumber(_ref6) {
  var x = _ref6.x,
      y = _ref6.y,
      number = _ref6.number,
      _ref6$fill = _ref6.fill,
      fill = _ref6$fill === undefined ? true : _ref6$fill,
      board = _ref6.board;

  var cell = board.get("puzzle").getIn([x, y]);
  // delete its notes
  cell = cell.delete("notes");
  // set or unset its value depending on `fill`
  cell = fill ? cell.set("value", number) : cell.delete("value");
  var increment = fill ? 1 : -1;
  // update the current group choices
  var rowPath = ["choices", "rows", x, number];
  var columnPath = ["choices", "columns", y, number];
  var squarePath = ["choices", "squares", Math.floor(x / 3) * 3 + Math.floor(y / 3), number];
  return board.setIn(rowPath, board.getIn(rowPath) + increment).setIn(columnPath, board.getIn(columnPath) + increment).setIn(squarePath, board.getIn(squarePath) + increment).setIn(["puzzle", x, y], cell);
}

function getNumberOfGroupsAssignedForNumber(number, groups) {
  return groups.reduce(function (accumulator, row) {
    return accumulator + (row.get(number) > 0 ? 1 : 0);
  }, 0);
}
// eslint-disable-next-line react/no-multi-comp

var Index = function (_Component2) {
  _inherits(Index, _Component2);

  function Index() {
    var _ref7;

    var _temp, _this3, _ret;

    _classCallCheck(this, Index);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this3 = _possibleConstructorReturn(this, (_ref7 = Index.__proto__ || Object.getPrototypeOf(Index)).call.apply(_ref7, [this].concat(args))), _this3), _this3.state = {}, _this3.generateGame = function () {
      var finalCount = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 20;

      // get a filled puzzle generated
      var solution = Object(__WEBPACK_IMPORTED_MODULE_8__sudoku__["b" /* makePuzzle */])();
      // pluck values from cells to create the game

      var _pluck = Object(__WEBPACK_IMPORTED_MODULE_8__sudoku__["c" /* pluck */])(solution, finalCount),
          puzzle = _pluck.puzzle;
      // initialize the board with choice counts


      var board = makeBoard({ puzzle: puzzle });
      _this3.setState({
        board: board,
        history: __WEBPACK_IMPORTED_MODULE_2_immutable__["a" /* List */].of(board),
        historyOffSet: 0,
        solution: solution
      });
    }, _this3.addNumberAsNote = function (number) {
      var board = _this3.state.board;

      var selectedCell = _this3.getSelectedCell();
      if (!selectedCell) return;
      var prefilled = selectedCell.get("prefilled");
      if (prefilled) return;

      var _board$get = board.get("selected"),
          x = _board$get.x,
          y = _board$get.y;

      var currentValue = selectedCell.get("value");
      if (currentValue) {
        board = updateBoardWithNumber({
          x: x,
          y: y,
          number: currentValue,
          fill: false,
          board: _this3.state.board
        });
      }
      var notes = selectedCell.get("notes") || Object(__WEBPACK_IMPORTED_MODULE_2_immutable__["b" /* Set */])();
      if (notes.has(number)) {
        notes = notes.delete(number);
      } else {
        notes = notes.add(number);
      }
      selectedCell = selectedCell.set("notes", notes);
      selectedCell = selectedCell.delete("value");
      board = board.setIn(["puzzle", x, y], selectedCell);
      _this3.updateBoard(board);
    }, _this3.updateBoard = function (newBoard) {
      var history = _this3.state.history;
      var historyOffSet = _this3.state.historyOffSet;
      // anything before current step is still in history

      history = history.slice(0, historyOffSet + 1);
      // add itself onto the history
      history = history.push(newBoard);
      // update the game
      _this3.setState({
        board: newBoard,
        history: history,
        historyOffSet: history.size - 1
      });
    }, _this3.canUndo = function () {
      return _this3.state.historyOffSet > 0;
    }, _this3.redo = function () {
      var history = _this3.state.history;
      var historyOffSet = _this3.state.historyOffSet;

      if (history.size) {
        historyOffSet = Math.min(history.size - 1, historyOffSet + 1);
        var board = history.get(historyOffSet);
        _this3.setState({ board: board, historyOffSet: historyOffSet });
      }
    }, _this3.undo = function () {
      var history = _this3.state.history;
      var _this3$state = _this3.state,
          historyOffSet = _this3$state.historyOffSet,
          board = _this3$state.board;

      if (history.size) {
        historyOffSet = Math.max(0, historyOffSet - 1);
        board = history.get(historyOffSet);
        _this3.setState({ board: board, historyOffSet: historyOffSet, history: history });
      }
    }, _this3.eraseSelected = function () {
      var selectedCell = _this3.getSelectedCell();
      if (!selectedCell) return;
      _this3.fillNumber(false);
    }, _this3.fillSelectedWithSolution = function () {
      var _this3$state2 = _this3.state,
          board = _this3$state2.board,
          solution = _this3$state2.solution;

      var selectedCell = _this3.getSelectedCell();
      if (!selectedCell) return;

      var _board$get2 = board.get("selected"),
          x = _board$get2.x,
          y = _board$get2.y;

      _this3.fillNumber(solution[x][y]);
    }, _this3.fillNumber = function (number) {
      var board = _this3.state.board;

      var selectedCell = _this3.getSelectedCell();
      // no-op if nothing is selected
      if (!selectedCell) return;
      var prefilled = selectedCell.get("prefilled");
      // no-op if it is refilled
      if (prefilled) return;

      var _board$get3 = board.get("selected"),
          x = _board$get3.x,
          y = _board$get3.y;

      var currentValue = selectedCell.get("value");
      // remove the current value and update the game state
      if (currentValue) {
        board = updateBoardWithNumber({
          x: x,
          y: y,
          number: currentValue,
          fill: false,
          board: _this3.state.board
        });
      }
      // update to new number if any
      var setNumber = currentValue !== number && number;
      if (setNumber) {
        board = updateBoardWithNumber({
          x: x,
          y: y,
          number: number,
          fill: true,
          board: board
        });
      }
      _this3.updateBoard(board);
    }, _this3.selectCell = function (x, y) {
      var board = _this3.state.board;

      board = board.set("selected", { x: x, y: y });
      _this3.setState({ board: board });
    }, _temp), _possibleConstructorReturn(_this3, _ret);
  }

  _createClass(Index, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      // eslint-disable-next-line no-undef
      if ("serviceWorker" in navigator) {
        // eslint-disable-next-line no-undef
        navigator.serviceWorker.register("/service-worker.js").then(function (reg) {
          console.log("ServiceWorker scope: ", reg.scope);
          console.log("service worker registration successful");
        }).catch(function (err) {
          console.warn("service worker registration failed", err.message);
        });
      }
    }
  }, {
    key: "getSelectedCell",
    value: function getSelectedCell() {
      var board = this.state.board;

      var selected = board.get("selected");
      return selected && board.get("puzzle").getIn([selected.x, selected.y]);
    }

    // get the min between its completion in rows, columns and squares.

  }, {
    key: "getNumberValueCount",
    value: function getNumberValueCount(number) {
      var rows = this.state.board.getIn(["choices", "rows"]);
      var columns = this.state.board.getIn(["choices", "columns"]);
      var squares = this.state.board.getIn(["choices", "squares"]);
      return Math.min(getNumberOfGroupsAssignedForNumber(number, squares), Math.min(getNumberOfGroupsAssignedForNumber(number, rows), getNumberOfGroupsAssignedForNumber(number, columns)));
    }

    // fill currently selected cell with number

  }, {
    key: "isConflict",
    value: function isConflict(i, j) {
      var _state$board$getIn$to = this.state.board.getIn(["puzzle", i, j]).toJSON(),
          value = _state$board$getIn$to.value;

      if (!value) return false;
      var rowConflict = this.state.board.getIn(["choices", "rows", i, value]) > 1;
      var columnConflict = this.state.board.getIn(["choices", "columns", j, value]) > 1;
      var squareConflict = this.state.board.getIn(["choices", "squares", Math.floor(i / 3) * 3 + Math.floor(j / 3), value]) > 1;
      return rowConflict || columnConflict || squareConflict;
    }
  }, {
    key: "renderCell",
    value: function renderCell(cell, x, y) {
      var _this4 = this;

      var board = this.state.board;

      var selected = this.getSelectedCell();

      var _cell$toJSON = cell.toJSON(),
          value = _cell$toJSON.value,
          prefilled = _cell$toJSON.prefilled,
          notes = _cell$toJSON.notes;

      var conflict = this.isConflict(x, y);
      var peer = Object(__WEBPACK_IMPORTED_MODULE_8__sudoku__["a" /* isPeer */])({ x: x, y: y }, board.get("selected"));
      var sameValue = !!(selected && selected.get("value") && value === selected.get("value"));

      var isSelected = cell === selected;
      return __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(Cell, {
        prefilled: prefilled,
        notes: notes,
        sameValue: sameValue,
        isSelected: isSelected,
        isPeer: peer,
        value: value,
        onClick: function onClick() {
          _this4.selectCell(x, y);
        },
        key: y,
        x: x,
        y: y,
        conflict: conflict,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 707
        }
      });
    }
  }, {
    key: "renderNumberControl",
    value: function renderNumberControl() {
      var _this5 = this;

      var selectedCell = this.getSelectedCell();
      var prefilled = selectedCell && selectedCell.get("prefilled");
      return __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
        "div",
        {
          className: "jsx-" + ControlStyle.__scopedHash + " " + "control",
          __source: {
            fileName: _jsxFileName,
            lineNumber: 729
          }
        },
        Object(__WEBPACK_IMPORTED_MODULE_8__sudoku__["d" /* range */])(9).map(function (i) {
          var number = i + 1;
          // handles binding single click and double click callbacks
          var clickHandle = getClickHandler(function () {
            _this5.fillNumber(number);
          }, function () {
            _this5.addNumberAsNote(number);
          });
          return __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(NumberControl, {
            key: number,
            number: number,
            onClick: !prefilled ? clickHandle : undefined,
            completionPercentage: _this5.getNumberValueCount(number) / 9,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 742
            }
          });
        }),
        __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_0_styled_jsx_style___default.a, {
          styleId: ControlStyle.__scopedHash,
          css: ControlStyle.__scoped
        })
      );
    }
  }, {
    key: "renderActions",
    value: function renderActions() {
      var history = this.state.history;

      var selectedCell = this.getSelectedCell();
      var prefilled = selectedCell && selectedCell.get("prefilled");
      return __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
        "div",
        {
          className: "jsx-" + ActionsStyle.__scopedHash + " " + "actions",
          __source: {
            fileName: _jsxFileName,
            lineNumber: 760
          }
        },
        __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
          "div",
          { onClick: history.size ? this.undo : null, className: "jsx-" + ActionsStyle.__scopedHash + " " + "action",
            __source: {
              fileName: _jsxFileName,
              lineNumber: 761
            }
          },
          __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(ReloadIcon, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 762
            }
          }),
          "Ho\xE0n t\xE1c"
        ),
        __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
          "div",
          { onClick: history.size ? this.redo : null, className: "jsx-" + ActionsStyle.__scopedHash + " " + "action redo",
            __source: {
              fileName: _jsxFileName,
              lineNumber: 765
            }
          },
          __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(ReloadIcon, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 766
            }
          }),
          "Kh\xF4i ph\u1EE5c"
        ),
        __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
          "div",
          {
            onClick: !prefilled ? this.eraseSelected : null,
            className: "jsx-" + ActionsStyle.__scopedHash + " " + "action",
            __source: {
              fileName: _jsxFileName,
              lineNumber: 769
            }
          },
          __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(RemoveIcon, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 773
            }
          }),
          "Xo\xE1"
        ),
        __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
          "div",
          {
            onClick: !prefilled ? this.fillSelectedWithSolution : null,
            className: "jsx-" + ActionsStyle.__scopedHash + " " + "action",
            __source: {
              fileName: _jsxFileName,
              lineNumber: 776
            }
          },
          __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(LoupeIcon, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 780
            }
          }),
          "G\u1EE3i \xFD"
        ),
        __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_0_styled_jsx_style___default.a, {
          styleId: ActionsStyle.__scopedHash,
          css: ActionsStyle.__scoped
        })
      );
    }
  }, {
    key: "renderPuzzle",
    value: function renderPuzzle() {
      var _this6 = this;

      var board = this.state.board;

      return __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
        "div",
        { style: { backgroundColor: "#EDBB94" }, className: "jsx-" + PuzzleStyle.__scopedHash + " " + "puzzle",
          __source: {
            fileName: _jsxFileName,
            lineNumber: 791
          }
        },
        board.get("puzzle").map(function (row, i) {
          return (
            // eslint-disable-next-line react/no-array-index-key
            __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
              "div",
              { key: i, style: { backgroundColor: "red" }, className: "jsx-" + PuzzleStyle.__scopedHash + " " + "row",
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 796
                }
              },
              row.map(function (cell, j) {
                return _this6.renderCell(cell, i, j);
              }).toArray()
            )
          );
        }).toArray(),
        __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_0_styled_jsx_style___default.a, {
          styleId: PuzzleStyle.__scopedHash,
          css: PuzzleStyle.__scoped
        })
      );
    }
  }, {
    key: "renderControls",
    value: function renderControls() {
      return __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
        "div",
        {
          className: "jsx-1283484843" + " " + "controls",
          __source: {
            fileName: _jsxFileName,
            lineNumber: 808
          }
        },
        this.renderNumberControl(),
        this.renderActions(),
        __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_0_styled_jsx_style___default.a, {
          styleId: "1283484843",
          css: ".controls.jsx-1283484843{margin-top:0.3em;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;width:100%;padding:0.5em 0;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=pages/index.js */"
        })
      );
    }
  }, {
    key: "renderGenerationUI",
    value: function renderGenerationUI() {
      return __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(GenerationUI, { generateGame: this.generateGame, __source: {
          fileName: _jsxFileName,
          lineNumber: 829
        }
      });
    }
  }, {
    key: "renderHeader",
    value: function renderHeader() {
      var _this7 = this;

      return __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
        "div",
        {
          className: "jsx-2915629146" + " " + "header",
          __source: {
            fileName: _jsxFileName,
            lineNumber: 834
          }
        },
        __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
          "div",
          {
            onClick: function onClick() {
              return _this7.setState({ board: false });
            },
            className: "jsx-2915629146" + " " + "new-game",
            __source: {
              fileName: _jsxFileName,
              lineNumber: 835
            }
          },
          __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(ReturnIcon, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 839
            }
          }),
          __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
            "div",
            {
              className: "jsx-2915629146",
              __source: {
                fileName: _jsxFileName,
                lineNumber: 840
              }
            },
            "Tr\xF2 ch\u01A1i m\u1EDBi"
          )
        ),
        __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_0_styled_jsx_style___default.a, {
          styleId: "2915629146",
          css: ".header.jsx-2915629146{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;width:100%;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;max-width:500px;padding:0 0.5em;box-sizing:border-box;}.new-game.jsx-2915629146{cursor:pointer;margin-top:0.2em;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0.2em 0;}.new-game.jsx-2915629146 svg{height:1em;margin-bottom:0.3em;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=pages/index.js */"
        })
      );
    }
  }, {
    key: "render",
    value: function render() {
      var board = this.state.board;

      return __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
        "div",
        {
          className: "jsx-2302280815" + " " + "body",
          __source: {
            fileName: _jsxFileName,
            lineNumber: 875
          }
        },
        __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
          __WEBPACK_IMPORTED_MODULE_4_next_head___default.a,
          {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 876
            }
          },
          __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
            "title",
            {
              className: "jsx-2302280815",
              __source: {
                fileName: _jsxFileName,
                lineNumber: 877
              }
            },
            "Sudoku Evolved"
          ),
          __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement("meta", {
            name: "viewport",
            content: "initial-scale=1.0, width=device-width",
            className: "jsx-2302280815",
            __source: {
              fileName: _jsxFileName,
              lineNumber: 878
            }
          }),
          __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement("meta", { name: "description", content: Description, className: "jsx-2302280815",
            __source: {
              fileName: _jsxFileName,
              lineNumber: 882
            }
          }),
          __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement("link", {
            href: "https://fonts.googleapis.com/css?family=Special+Elite",
            rel: "stylesheet",
            className: "jsx-2302280815",
            __source: {
              fileName: _jsxFileName,
              lineNumber: 883
            }
          }),
          __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement("meta", { property: "og:url", content: "https://sudoku.sitianliu.com/", className: "jsx-2302280815",
            __source: {
              fileName: _jsxFileName,
              lineNumber: 887
            }
          }),
          __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement("meta", { property: "og:title", content: "Sudoku Evolved", className: "jsx-2302280815",
            __source: {
              fileName: _jsxFileName,
              lineNumber: 888
            }
          }),
          __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement("meta", { property: "og:type", content: "website", className: "jsx-2302280815",
            __source: {
              fileName: _jsxFileName,
              lineNumber: 889
            }
          }),
          __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement("meta", { property: "og:description", content: Description, className: "jsx-2302280815",
            __source: {
              fileName: _jsxFileName,
              lineNumber: 890
            }
          }),
          __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement("meta", {
            property: "og:image",
            content: "https://sudoku.sitianliu.com/static/og-image.png",
            className: "jsx-2302280815",
            __source: {
              fileName: _jsxFileName,
              lineNumber: 891
            }
          })
        ),
        !board && this.renderGenerationUI(),
        board && this.renderHeader(),
        board && this.renderPuzzle(),
        board && this.renderControls(),
        __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_0_styled_jsx_style___default.a, {
          styleId: "2302280815",
          css: "body,.body.jsx-2302280815{font-family:\"Special Elite\",cursive;}.body.jsx-2302280815{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;height:100vh;width:100vw;position:relative;background-color:#b38a81;}@media (min-width:800px) and (min-height:930px){.header,.puzzle,.controls{font-size:1.5em;}}@media (max-width:800px) and (min-width:600px){.header,.puzzle,.controls{font-size:1.2em;}}@media (max-height:930px) and (min-height:800px) and (min-width:600px){.header,.puzzle,.controls{font-size:1.2em;}}@media (max-height:800px) and (min-height:600px) and (min-width:370px){.header,.puzzle,.controls{font-size:1em;}}@media (max-width:370px){.header,.puzzle,.controls{font-size:0.8em;}}@media (max-height:600px){.header,.puzzle,.controls{font-size:0.8em;}}body{margin:0;}.rooter.jsx-2302280815{position:fixed;bottom:0;font-size:0.8em;width:100%;text-align:center;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBhZ2VzL2luZGV4LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXc0QlcsQUFJb0QsQUFHeEIsQUFXSyxBQUtBLEFBS0EsQUFLRixBQUtFLEFBS0EsQUFJVCxBQUdNLFNBRmpCLEtBZEUsQ0FpQlMsQ0FoQ1QsQUFLQSxBQUtBLEFBVUEsQUFLQSxRQVFnQixZQS9DbEIsSUFnRGEsV0FDTyxrQkFDcEIsS0EvQ3dCLDhFQUNILDZGQUNJLG1HQUNWLGFBQ0QsWUFDTSxrQkFDTyx5QkFDM0IiLCJmaWxlIjoicGFnZXMvaW5kZXguanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL2R1eWxpbmgxOTZ0Yi9XT1JLL0xlYXJuL1JlYWN0L3JlYWN0LXN1ZG9rdS1nYW1lIiwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUganN4LWExMXkvYWNjZXNzaWJsZS1lbW9qaSAqL1xuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgU2V0LCBMaXN0LCBmcm9tSlMgfSBmcm9tIFwiaW1tdXRhYmxlXCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5pbXBvcnQgTmV4dEhlYWQgZnJvbSBcIm5leHQvaGVhZFwiO1xuaW1wb3J0IENvbG9yIGZyb20gXCJjb2xvclwiO1xuaW1wb3J0IElucHV0UmFuZ2UgZnJvbSBcInJlYWN0LWlucHV0LXJhbmdlXCI7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tZXh0cmFuZW91cy1kZXBlbmRlbmNpZXNcbmltcG9ydCBjc3MgZnJvbSBcInN0eWxlZC1qc3gvY3NzXCI7XG5cbmltcG9ydCBSYW5nZVN0eWxlIGZyb20gXCIuLi9pbnB1dC1yYW5nZS1zdHlsZVwiO1xuaW1wb3J0IExvdXBlSWNvbiBmcm9tIFwiLi4vc3ZnL2xvdXBlLnN2Z1wiO1xuaW1wb3J0IFJlbW92ZUljb24gZnJvbSBcIi4uL3N2Zy9yZW1vdmUuc3ZnXCI7XG5pbXBvcnQgUmVsb2FkSWNvbiBmcm9tIFwiLi4vc3ZnL3JlbG9hZC5zdmdcIjtcbmltcG9ydCBSZXR1cm5JY29uIGZyb20gXCIuLi9zdmcvcmV0dXJuLnN2Z1wiO1xuXG5pbXBvcnQge1xuICBtYWtlUHV6emxlLFxuICBwbHVjayxcbiAgaXNQZWVyIGFzIGFyZUNvb3JkaW5hdGVQZWVycyxcbiAgcmFuZ2UsXG59IGZyb20gXCIuLi9zdWRva3VcIjtcbmltcG9ydCB7IGJhY2tHcm91bmRCbHVlIH0gZnJvbSBcIi4uL2NvbG9yc1wiO1xuaW1wb3J0IFRpcCBmcm9tIFwiLi4vY29tcG9uZW50cy90b29sLXRpcFwiO1xuXG5jb25zdCBEZXNjcmlwdGlvbiA9XG4gIFwiRGlzY292ZXIgdGhlIG5leHQgZXZvbHV0aW9uIG9mIFN1ZG9rdSB3aXRoIGFtYXppbmcgZ3JhcGhpY3MsIGFuaW1hdGlvbnMsIGFuZCB1c2VyLWZyaWVuZGx5IGZlYXR1cmVzLiBFbmpveSBhIFN1ZG9rdSBleHBlcmllbmNlIGxpa2UgeW91IG5ldmVyIGhhdmUgYmVmb3JlIHdpdGggY3VzdG9taXphYmxlIGdhbWUgZ2VuZXJhdGlvbiwgY2VsbCBoaWdobGlnaHRpbmcsIGludHVpdGl2ZSBjb250cm9scyBhbmQgbW9yZSFcIjtcbmNvbnN0IGNlbGxXaWR0aCA9IDIuNTtcblxuY29uc3QgTGlnaHRCbHVlMTAwID0gXCIjQjNFNUZDXCI7XG5jb25zdCBMaWdodEJsdWUyMDAgPSBcIiM4MUQ0RkFcIjtcbmNvbnN0IExpZ2h0Qmx1ZTMwMCA9IFwiIzRGQzNGN1wiO1xuY29uc3QgSW5kaWdvNzAwID0gXCIjMzAzRjlGXCI7XG5jb25zdCBEZWVwT3JhbmdlMjAwID0gXCIjRkZBQjkxXCI7XG5jb25zdCBEZWVwT3JhbmdlNjAwID0gXCIjRjQ1MTFFXCI7XG5jb25zdCBDb250cm9sTnVtYmVyQ29sb3IgPSBJbmRpZ283MDA7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1sb25lLWJsb2Nrc1xue1xuICAvKiBsYW5ndWFnZT1DU1MgKi9cbn1cbmNvbnN0IENlbGxTdHlsZSA9IGNzc2BcbiAgLmNlbGwge1xuICAgIGhlaWdodDogJHtjZWxsV2lkdGh9ZW07XG4gICAgd2lkdGg6ICR7Y2VsbFdpZHRofWVtO1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgZmxleC13cmFwOiB3cmFwO1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgZm9udC1zaXplOiAxLjFlbTtcbiAgICBmb250LXdlaWdodDogYm9sZDtcbiAgICB0cmFuc2l0aW9uOiBiYWNrZ3JvdW5kLWNvbG9yIDAuM3MgZWFzZS1pbi1vdXQ7XG4gIH1cbiAgLmNlbGw6bnRoLWNoaWxkKDNuICsgMyk6bm90KDpsYXN0LWNoaWxkKSB7XG4gICAgYm9yZGVyLXJpZ2h0OiAycHggc29saWQgYmxhY2s7XG4gIH1cbiAgLmNlbGw6bm90KDpsYXN0LWNoaWxkKSB7XG4gICAgYm9yZGVyLXJpZ2h0OiAxcHggc29saWQgYmxhY2s7XG4gIH1cbiAgLm5vdGUtbnVtYmVyIHtcbiAgICBmb250LXNpemU6IDAuNmVtO1xuICAgIHdpZHRoOiAzMyU7XG4gICAgaGVpZ2h0OiAzMyU7XG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIH1cbmA7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1sb25lLWJsb2Nrc1xue1xuICAvKiBsYW5ndWFnZT1DU1MgKi9cbn1cbmNvbnN0IEFjdGlvbnNTdHlsZSA9IGNzc2BcbiAgLmFjdGlvbnMge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgbWF4LXdpZHRoOiA0MDBweDtcbiAgICBtYXJnaW4tdG9wOiAwLjVlbTtcbiAgICBwYWRkaW5nOiAwIDAuNmVtO1xuICB9XG4gIC5hY3Rpb24ge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICB9XG4gIC5hY3Rpb24gOmdsb2JhbChzdmcpIHtcbiAgICB3aWR0aDogMi41ZW07XG4gICAgbWFyZ2luLWJvdHRvbTogMC4yZW07XG4gIH1cbiAgLnJlZG8gOmdsb2JhbChzdmcpIHtcbiAgICB0cmFuc2Zvcm06IHNjYWxlWCgtMSk7XG4gIH1cbmA7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1sb25lLWJsb2Nrc1xue1xuICAvKiBsYW5ndWFnZT1DU1MgKi9cbn1cbmNvbnN0IENvbnRyb2xTdHlsZSA9IGNzc2BcbiAgLmNvbnRyb2wge1xuICAgIHBhZGRpbmc6IDAgMmVtO1xuICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICBkaXNwbGF5OiBpbmxpbmUtZmxleDtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIGZsZXgtd3JhcDogd3JhcDtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICBmb250LWZhbWlseTogXCJTcGVjaWFsIEVsaXRlXCIsIGN1cnNpdmU7XG4gICAgdHJhbnNpdGlvbjogZmlsdGVyIDAuNXMgZWFzZS1pbi1vdXQ7XG4gICAgd2lkdGg6IDEwMCU7XG4gIH1cbmA7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1sb25lLWJsb2Nrc1xue1xuICAvKiBsYW5ndWFnZT1DU1MgKi9cbn1cbmNvbnN0IE51bWJlckNvbnRyb2xTdHlsZSA9IGNzc2BcbiAgLm51bWJlciB7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICBmb250LXNpemU6IDJlbTtcbiAgICBtYXJnaW46IDAuMWVtO1xuICAgIHdpZHRoOiAxLjVlbTtcbiAgICBoZWlnaHQ6IDEuNWVtO1xuICAgIGNvbG9yOiAke0NvbnRyb2xOdW1iZXJDb2xvcn07XG4gICAgYm94LXNoYWRvdzogMCAxcHggMnB4IHJnYmEoMCwgMCwgMCwgMC4xNiksIDAgMXB4IDJweCByZ2JhKDAsIDAsIDAsIDAuMjMpO1xuICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcbiAgfVxuICAubnVtYmVyID4gZGl2IHtcbiAgICBtYXJnaW4tdG9wOiAwLjNlbTtcbiAgfVxuYDtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWxvbmUtYmxvY2tzXG57XG4gIC8qIGxhbmd1YWdlPUNTUyAqL1xufVxuY29uc3QgUHV6emxlU3R5bGUgPSBjc3NgXG4gIC5wdXp6bGUge1xuICAgIG1hcmdpbi10b3A6IDAuNWVtO1xuICAgIHdpZHRoOiAke2NlbGxXaWR0aCAqIDl9ZW07XG4gICAgY3Vyc29yOiBwb2ludGVyO1xuICAgIGJveC1zaGFkb3c6IDAgM3B4IDZweCByZ2JhKDAsIDAsIDAsIDAuMTYpLCAwIDNweCA2cHggcmdiYSgwLCAwLCAwLCAwLjIzKTtcbiAgfVxuICAucm93IHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgZmxleDogMDtcbiAgICB3aWR0aDogJHtjZWxsV2lkdGggKiA5fWVtO1xuICB9XG4gIC5yb3c6bm90KDpsYXN0LWNoaWxkKSB7XG4gICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkIGJsYWNrO1xuICB9XG4gIC5yb3c6bnRoLWNoaWxkKDNuICsgMyk6bm90KDpsYXN0LWNoaWxkKSB7XG4gICAgYm9yZGVyLWJvdHRvbTogMnB4IHNvbGlkIGJsYWNrICFpbXBvcnRhbnQ7XG4gIH1cbmA7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1sb25lLWJsb2Nrc1xue1xuICAvKiBsYW5ndWFnZT1DU1MgKi9cbn1cbmNvbnN0IENpcmN1bHVhclByb2dyZXNzU3R5bGUgPSBjc3NgXG4gIC5jaXJjdWxhci1wcm9ncmVzcyB7XG4gICAgZGlzcGxheTogYmxvY2s7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHRvcDogMDtcbiAgICBsZWZ0OiAwO1xuICAgIHRyYW5zaXRpb246IGZpbHRlciAwLjRzIGVhc2UtaW4tb3V0O1xuICB9XG5cbiAgLmNpcmNsZS1iZyB7XG4gICAgZmlsbDogbm9uZTtcbiAgICBzdHJva2U6ICNlZWU7XG4gICAgc3Ryb2tlLXdpZHRoOiAzLjg7XG4gIH1cblxuICAuY2lyY2xlIHtcbiAgICBzdHJva2U6ICR7Q29udHJvbE51bWJlckNvbG9yfTtcbiAgICB0cmFuc2l0aW9uOiBzdHJva2UtZGFzaGFycmF5IDAuNHMgZWFzZS1pbi1vdXQ7XG4gICAgZmlsbDogbm9uZTtcbiAgICBzdHJva2Utd2lkdGg6IDIuODtcbiAgICBzdHJva2UtbGluZWNhcDogcm91bmQ7XG4gIH1cbmA7XG5cbmNvbnN0IENpcmN1bGFyUGF0aEQgPVxuICBcIk0xOCAyLjA4NDUgYSAxNS45MTU1IDE1LjkxNTUgMCAwIDEgMCAzMS44MzEgYSAxNS45MTU1IDE1LjkxNTUgMCAwIDEgMCAtMzEuODMxXCI7XG5cbmZ1bmN0aW9uIGdldEJhY2tHcm91bmRDb2xvcih7IGNvbmZsaWN0LCBpc1BlZXIsIHNhbWVWYWx1ZSwgaXNTZWxlY3RlZCB9KSB7XG4gIGlmIChjb25mbGljdCAmJiBpc1BlZXIgJiYgc2FtZVZhbHVlKSB7XG4gICAgcmV0dXJuIERlZXBPcmFuZ2UyMDA7XG4gIH0gZWxzZSBpZiAoc2FtZVZhbHVlKSB7XG4gICAgcmV0dXJuIExpZ2h0Qmx1ZTMwMDtcbiAgfSBlbHNlIGlmIChpc1NlbGVjdGVkKSB7XG4gICAgcmV0dXJuIExpZ2h0Qmx1ZTIwMDtcbiAgfSBlbHNlIGlmIChpc1BlZXIpIHtcbiAgICByZXR1cm4gTGlnaHRCbHVlMTAwO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gZ2V0Rm9udENvbG9yKHsgdmFsdWUsIGNvbmZsaWN0LCBwcmVmaWxsZWQgfSkge1xuICBpZiAoY29uZmxpY3QgJiYgIXByZWZpbGxlZCkge1xuICAgIHJldHVybiBEZWVwT3JhbmdlNjAwO1xuICB9IGVsc2UgaWYgKCFwcmVmaWxsZWQgJiYgdmFsdWUpIHtcbiAgICByZXR1cm4gQ29udHJvbE51bWJlckNvbG9yO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuY2xhc3MgR2VuZXJhdGlvblVJIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG5cbiAgICB0aGlzLnN0YXRlID0geyB2YWx1ZTogMzAgfTtcbiAgfVxuXG4gIGdlbmVyYXRlR2FtZSA9ICgpID0+IHtcbiAgICB0aGlzLnByb3BzLmdlbmVyYXRlR2FtZSh0aGlzLnN0YXRlLnZhbHVlKTtcbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZ2VuZXJhdGlvblwiPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvcHlcIj5C4bqvdCDEkeG6p3UgduG7m2kge3RoaXMuc3RhdGUudmFsdWV9IMO0IMSRaeG7gW4gdHLGsOG7m2MgPC9kaXY+XG4gICAgICAgIDxJbnB1dFJhbmdlXG4gICAgICAgICAgbWF4VmFsdWU9ezgxfVxuICAgICAgICAgIG1pblZhbHVlPXsxN31cbiAgICAgICAgICB2YWx1ZT17dGhpcy5zdGF0ZS52YWx1ZX1cbiAgICAgICAgICBvbkNoYW5nZT17KHZhbHVlKSA9PiB0aGlzLnNldFN0YXRlKHsgdmFsdWUgfSl9XG4gICAgICAgIC8+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYnV0dG9uXCIgb25DbGljaz17dGhpcy5nZW5lcmF0ZUdhbWV9PlxuICAgICAgICAgIFBsYXkgU3Vkb2t1XG4gICAgICAgIDwvZGl2PlxuICAgICAgICB7LyogbGFuZ3VhZ2U9Q1NTICovfVxuICAgICAgICA8c3R5bGUganN4PlxuICAgICAgICAgIHtgXG4gICAgICAgICAgICAuY29weSB7XG4gICAgICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgICAgICAgICAgZm9udC1zaXplOiAxLjNlbTtcbiAgICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogMC41ZW07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAuZ2VuZXJhdGlvbiB7XG4gICAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgICAgICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDpnbG9iYWwoLmlucHV0LXJhbmdlKSB7XG4gICAgICAgICAgICAgIHdpZHRoOiA4MCU7XG4gICAgICAgICAgICAgIG1heC13aWR0aDogNTAwcHg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAuYnV0dG9uIHtcbiAgICAgICAgICAgICAgbWFyZ2luLXRvcDogMC41ZW07XG4gICAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDAuMjVlbTtcbiAgICAgICAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xuICAgICAgICAgICAgICBmb250LXdlaWdodDogYm9sZDtcbiAgICAgICAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICAgICAgICAgICAgICBjb2xvcjogI2ZmZjtcbiAgICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgICAgICAgICAgIHRyYW5zaXRpb246IGFsbCAwLjI1cztcbiAgICAgICAgICAgICAgcGFkZGluZzogNXB4IDEwcHg7XG4gICAgICAgICAgICAgIGZvbnQtc2l6ZTogMS40ZW07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAuYnV0dG9uOmFjdGl2ZSB7XG4gICAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlKDBweCwgNXB4KTtcbiAgICAgICAgICAgICAgYm94LXNoYWRvdzogMCAxcHggMCAwO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAuYnV0dG9uIHtcbiAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHtiYWNrR3JvdW5kQmx1ZX07XG4gICAgICAgICAgICAgIGJveC1zaGFkb3c6IDAgMnB4IDRweCAwXG4gICAgICAgICAgICAgICAgJHtDb2xvcihiYWNrR3JvdW5kQmx1ZSkuZGFya2VuKDAuNSkuaHNsKCkuc3RyaW5nKCl9O1xuICAgICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAuYnV0dG9uOmhvdmVyIHtcbiAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHtDb2xvcihiYWNrR3JvdW5kQmx1ZSlcbiAgICAgICAgICAgICAgICAubGlnaHRlbigwLjIpXG4gICAgICAgICAgICAgICAgLmhzbCgpXG4gICAgICAgICAgICAgICAgLnN0cmluZygpfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICBgfVxuICAgICAgICA8L3N0eWxlPlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufVxuXG5HZW5lcmF0aW9uVUkucHJvcFR5cGVzID0ge1xuICBnZW5lcmF0ZUdhbWU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG59O1xuXG5jb25zdCBOdW1iZXJDb250cm9sID0gKHsgbnVtYmVyLCBvbkNsaWNrLCBjb21wbGV0aW9uUGVyY2VudGFnZSB9KSA9PiAoXG4gIDxkaXYga2V5PXtudW1iZXJ9IGNsYXNzTmFtZT1cIm51bWJlclwiIG9uQ2xpY2s9e29uQ2xpY2t9PlxuICAgIDxkaXY+e251bWJlcn08L2Rpdj5cbiAgICA8Q2lyY2x1bGFyUHJvZ3Jlc3MgcGVyY2VudD17Y29tcGxldGlvblBlcmNlbnRhZ2V9IC8+XG4gICAgPHN0eWxlIGpzeD57TnVtYmVyQ29udHJvbFN0eWxlfTwvc3R5bGU+XG4gIDwvZGl2PlxuKTtcblxuTnVtYmVyQ29udHJvbC5wcm9wVHlwZXMgPSB7XG4gIG51bWJlcjogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkLFxuICBvbkNsaWNrOiBQcm9wVHlwZXMuZnVuYyxcbiAgY29tcGxldGlvblBlcmNlbnRhZ2U6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCxcbn07XG5cbk51bWJlckNvbnRyb2wuZGVmYXVsdFByb3BzID0ge1xuICBvbkNsaWNrOiBudWxsLFxufTtcblxuY29uc3QgQ2VsbCA9IChwcm9wcykgPT4ge1xuICBjb25zdCB7XG4gICAgdmFsdWUsXG4gICAgb25DbGljayxcbiAgICBpc1BlZXIsXG4gICAgaXNTZWxlY3RlZCxcbiAgICBzYW1lVmFsdWUsXG4gICAgcHJlZmlsbGVkLFxuICAgIG5vdGVzLFxuICAgIGNvbmZsaWN0LFxuICB9ID0gcHJvcHM7XG4gIGNvbnN0IGJhY2tncm91bmRDb2xvciA9IGdldEJhY2tHcm91bmRDb2xvcih7XG4gICAgY29uZmxpY3QsXG4gICAgaXNQZWVyLFxuICAgIHNhbWVWYWx1ZSxcbiAgICBpc1NlbGVjdGVkLFxuICB9KTtcbiAgY29uc3QgZm9udENvbG9yID0gZ2V0Rm9udENvbG9yKHsgY29uZmxpY3QsIHByZWZpbGxlZCwgdmFsdWUgfSk7XG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9XCJjZWxsXCIgb25DbGljaz17b25DbGlja30+XG4gICAgICB7bm90ZXNcbiAgICAgICAgPyByYW5nZSg5KS5tYXAoKGkpID0+IChcbiAgICAgICAgICAgIDxkaXYga2V5PXtpfSBjbGFzc05hbWU9XCJub3RlLW51bWJlclwiPlxuICAgICAgICAgICAgICB7bm90ZXMuaGFzKGkgKyAxKSAmJiBpICsgMX1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICkpXG4gICAgICAgIDogdmFsdWUgJiYgdmFsdWV9XG4gICAgICB7LyogbGFuZ3VhZ2U9Q1NTICovfVxuICAgICAgPHN0eWxlIGpzeD57Q2VsbFN0eWxlfTwvc3R5bGU+XG4gICAgICA8c3R5bGUganN4PlxuICAgICAgICB7YFxuICAgICAgICAgIC5jZWxsIHtcbiAgICAgICAgICAgIGJhY2tncm91bmQ6ICR7IWJhY2tncm91bmRDb2xvclxuICAgICAgICAgICAgICA/IFwibGluZWFyLWdyYWRpZW50KDE4MGRlZywgcmdiYSgyNTUsMjU1LDI1NSwxKSAwJSxyZ2JhKDI1NSwyNTUsMjU1LDEpIDUxJSwgcmdiYSgyMzcsMTg3LDE0OCwxKSAxMDAlKVwiXG4gICAgICAgICAgICAgIDogXCJpbml0aWFsXCJ9O1xuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHtiYWNrZ3JvdW5kQ29sb3IgfHwgXCJpbml0aWFsXCJ9O1xuICAgICAgICAgICAgY29sb3I6ICR7Zm9udENvbG9yIHx8IFwiaW5pdGlhbFwifTtcbiAgICAgICAgICB9XG4gICAgICAgIGB9XG4gICAgICA8L3N0eWxlPlxuICAgIDwvZGl2PlxuICApO1xufTtcblxuQ2VsbC5wcm9wVHlwZXMgPSB7XG4gIC8vIGN1cnJlbnQgbnVtYmVyIHZhbHVlXG4gIHZhbHVlOiBQcm9wVHlwZXMubnVtYmVyLFxuICAvLyBjZWxsIGNsaWNrIGhhbmRsZXJcbiAgb25DbGljazogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgLy8gaWYgdGhlIGNlbGwgaXMgYSBwZWVyIG9mIHRoZSBzZWxlY3RlZCBjZWxsXG4gIGlzUGVlcjogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcbiAgLy8gaWYgdGhlIGNlbGwgaXMgc2VsZWN0ZWQgYnkgdGhlIHVzZXJcbiAgaXNTZWxlY3RlZDogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcbiAgLy8gY3VycmVudCBjZWxsIGhhcyB0aGUgc2FtZSB2YWx1ZSBpZiB0aGUgdXNlciBzZWxlY3RlZCBjZWxsXG4gIHNhbWVWYWx1ZTogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcbiAgLy8gaWYgdGhpcyB3YXMgcHJlZmlsbGVkIGFzIGEgcGFydCBvZiB0aGUgcHV6emxlXG4gIHByZWZpbGxlZDogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcbiAgLy8gY3VycmVudCBub3RlcyB0YWtlbiBvbiB0aGUgY2VsbFxuICBub3RlczogUHJvcFR5cGVzLmluc3RhbmNlT2YoU2V0KSxcbiAgLy8gaWYgdGhlIGN1cnJlbnQgY2VsbCBkb2VzIG5vdCBzYXRpc2Z5IHRoZSBnYW1lIGNvbnN0cmFpbnRcbiAgY29uZmxpY3Q6IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG59O1xuXG5DZWxsLmRlZmF1bHRQcm9wcyA9IHtcbiAgbm90ZXM6IG51bGwsXG4gIHZhbHVlOiBudWxsLFxufTtcblxuY29uc3QgQ2lyY2x1bGFyUHJvZ3Jlc3MgPSAoeyBwZXJjZW50IH0pID0+IChcbiAgPHN2ZyB2aWV3Qm94PVwiMCAwIDM2IDM2XCIgY2xhc3NOYW1lPVwiY2lyY3VsYXItcHJvZ3Jlc3NcIj5cbiAgICA8cGF0aCBjbGFzc05hbWU9XCJjaXJjbGUtYmdcIiBkPXtDaXJjdWxhclBhdGhEfSAvPlxuICAgIDxwYXRoXG4gICAgICBjbGFzc05hbWU9XCJjaXJjbGVcIlxuICAgICAgc3Ryb2tlRGFzaGFycmF5PXtgJHtwZXJjZW50ICogMTAwfSwgMTAwYH1cbiAgICAgIGQ9e0NpcmN1bGFyUGF0aER9XG4gICAgLz5cbiAgICB7LyogbGFuZ3VhZ2U9Q1NTICovfVxuICAgIDxzdHlsZSBqc3g+e0NpcmN1bHVhclByb2dyZXNzU3R5bGV9PC9zdHlsZT5cbiAgPC9zdmc+XG4pO1xuXG5DaXJjbHVsYXJQcm9ncmVzcy5wcm9wVHlwZXMgPSB7XG4gIHBlcmNlbnQ6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCxcbn07XG5cbmZ1bmN0aW9uIGdldENsaWNrSGFuZGxlcihvbkNsaWNrLCBvbkRvdWJsZUNsaWNrLCBkZWxheSA9IDI1MCkge1xuICBsZXQgdGltZW91dElEID0gbnVsbDtcbiAgcmV0dXJuIChldmVudCkgPT4ge1xuICAgIGlmICghdGltZW91dElEKSB7XG4gICAgICB0aW1lb3V0SUQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgb25DbGljayhldmVudCk7XG4gICAgICAgIHRpbWVvdXRJRCA9IG51bGw7XG4gICAgICB9LCBkZWxheSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRpbWVvdXRJRCA9IGNsZWFyVGltZW91dCh0aW1lb3V0SUQpO1xuICAgICAgb25Eb3VibGVDbGljayhldmVudCk7XG4gICAgfVxuICB9O1xufVxuXG4vKipcbiAqIG1ha2Ugc2l6ZSA5IGFycmF5IG9mIDBzXG4gKiBAcmV0dXJucyB7QXJyYXl9XG4gKi9cbmZ1bmN0aW9uIG1ha2VDb3VudE9iamVjdCgpIHtcbiAgY29uc3QgY291bnRPYmogPSBbXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCAxMDsgaSArPSAxKSBjb3VudE9iai5wdXNoKDApO1xuICByZXR1cm4gY291bnRPYmo7XG59XG5cbi8qKlxuICogZ2l2ZW4gYSAyRCBhcnJheSBvZiBudW1iZXJzIGFzIHRoZSBpbml0aWFsIHB1enpsZSwgZ2VuZXJhdGUgdGhlIGluaXRpYWwgZ2FtZSBzdGF0ZVxuICogQHBhcmFtIHB1enpsZVxuICogQHJldHVybnMge2FueX1cbiAqL1xuZnVuY3Rpb24gbWFrZUJvYXJkKHsgcHV6emxlIH0pIHtcbiAgLy8gY3JlYXRlIGluaXRpYWwgY291bnQgb2JqZWN0IHRvIGtlZXAgdHJhY2sgb2YgY29uZmxpY3RzIHBlciBudW1iZXIgdmFsdWVcbiAgY29uc3Qgcm93cyA9IEFycmF5LmZyb20oQXJyYXkoOSkua2V5cygpKS5tYXAoKCkgPT4gbWFrZUNvdW50T2JqZWN0KCkpO1xuICBjb25zdCBjb2x1bW5zID0gQXJyYXkuZnJvbShBcnJheSg5KS5rZXlzKCkpLm1hcCgoKSA9PiBtYWtlQ291bnRPYmplY3QoKSk7XG4gIGNvbnN0IHNxdWFyZXMgPSBBcnJheS5mcm9tKEFycmF5KDkpLmtleXMoKSkubWFwKCgpID0+IG1ha2VDb3VudE9iamVjdCgpKTtcbiAgY29uc3QgcmVzdWx0ID0gcHV6emxlLm1hcCgocm93LCBpKSA9PlxuICAgIHJvdy5tYXAoKGNlbGwsIGopID0+IHtcbiAgICAgIGlmIChjZWxsKSB7XG4gICAgICAgIHJvd3NbaV1bY2VsbF0gKz0gMTtcbiAgICAgICAgY29sdW1uc1tqXVtjZWxsXSArPSAxO1xuICAgICAgICBzcXVhcmVzW01hdGguZmxvb3IoaSAvIDMpICogMyArIE1hdGguZmxvb3IoaiAvIDMpXVtjZWxsXSArPSAxO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdmFsdWU6IHB1enpsZVtpXVtqXSA+IDAgPyBwdXp6bGVbaV1bal0gOiBudWxsLFxuICAgICAgICBwcmVmaWxsZWQ6ICEhcHV6emxlW2ldW2pdLFxuICAgICAgfTtcbiAgICB9KVxuICApO1xuICByZXR1cm4gZnJvbUpTKHtcbiAgICBwdXp6bGU6IHJlc3VsdCxcbiAgICBzZWxlY3RlZDogZmFsc2UsXG4gICAgY2hvaWNlczogeyByb3dzLCBjb2x1bW5zLCBzcXVhcmVzIH0sXG4gIH0pO1xufVxuXG4vKipcbiAqIGdpdmUgdGhlIGNvb3JkaW5hdGUgdXBkYXRlIHRoZSBjdXJyZW50IGJvYXJkIHdpdGggYSBudW1iZXIgY2hvaWNlXG4gKiBAcGFyYW0geFxuICogQHBhcmFtIHlcbiAqIEBwYXJhbSBudW1iZXJcbiAqIEBwYXJhbSBmaWxsIHdoZXRoZXIgdG8gc2V0IG9yIHVuc2V0XG4gKiBAcGFyYW0gYm9hcmQgdGhlIGltbXV0YWJsZSBib2FyZCBnaXZlbiB0byBjaGFuZ2VcbiAqL1xuZnVuY3Rpb24gdXBkYXRlQm9hcmRXaXRoTnVtYmVyKHsgeCwgeSwgbnVtYmVyLCBmaWxsID0gdHJ1ZSwgYm9hcmQgfSkge1xuICBsZXQgY2VsbCA9IGJvYXJkLmdldChcInB1enpsZVwiKS5nZXRJbihbeCwgeV0pO1xuICAvLyBkZWxldGUgaXRzIG5vdGVzXG4gIGNlbGwgPSBjZWxsLmRlbGV0ZShcIm5vdGVzXCIpO1xuICAvLyBzZXQgb3IgdW5zZXQgaXRzIHZhbHVlIGRlcGVuZGluZyBvbiBgZmlsbGBcbiAgY2VsbCA9IGZpbGwgPyBjZWxsLnNldChcInZhbHVlXCIsIG51bWJlcikgOiBjZWxsLmRlbGV0ZShcInZhbHVlXCIpO1xuICBjb25zdCBpbmNyZW1lbnQgPSBmaWxsID8gMSA6IC0xO1xuICAvLyB1cGRhdGUgdGhlIGN1cnJlbnQgZ3JvdXAgY2hvaWNlc1xuICBjb25zdCByb3dQYXRoID0gW1wiY2hvaWNlc1wiLCBcInJvd3NcIiwgeCwgbnVtYmVyXTtcbiAgY29uc3QgY29sdW1uUGF0aCA9IFtcImNob2ljZXNcIiwgXCJjb2x1bW5zXCIsIHksIG51bWJlcl07XG4gIGNvbnN0IHNxdWFyZVBhdGggPSBbXG4gICAgXCJjaG9pY2VzXCIsXG4gICAgXCJzcXVhcmVzXCIsXG4gICAgTWF0aC5mbG9vcih4IC8gMykgKiAzICsgTWF0aC5mbG9vcih5IC8gMyksXG4gICAgbnVtYmVyLFxuICBdO1xuICByZXR1cm4gYm9hcmRcbiAgICAuc2V0SW4ocm93UGF0aCwgYm9hcmQuZ2V0SW4ocm93UGF0aCkgKyBpbmNyZW1lbnQpXG4gICAgLnNldEluKGNvbHVtblBhdGgsIGJvYXJkLmdldEluKGNvbHVtblBhdGgpICsgaW5jcmVtZW50KVxuICAgIC5zZXRJbihzcXVhcmVQYXRoLCBib2FyZC5nZXRJbihzcXVhcmVQYXRoKSArIGluY3JlbWVudClcbiAgICAuc2V0SW4oW1wicHV6emxlXCIsIHgsIHldLCBjZWxsKTtcbn1cblxuZnVuY3Rpb24gZ2V0TnVtYmVyT2ZHcm91cHNBc3NpZ25lZEZvck51bWJlcihudW1iZXIsIGdyb3Vwcykge1xuICByZXR1cm4gZ3JvdXBzLnJlZHVjZShcbiAgICAoYWNjdW11bGF0b3IsIHJvdykgPT4gYWNjdW11bGF0b3IgKyAocm93LmdldChudW1iZXIpID4gMCA/IDEgOiAwKSxcbiAgICAwXG4gICk7XG59XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3Qvbm8tbXVsdGktY29tcFxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSW5kZXggZXh0ZW5kcyBDb21wb25lbnQge1xuICBzdGF0ZSA9IHt9O1xuXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICAgIGlmIChcInNlcnZpY2VXb3JrZXJcIiBpbiBuYXZpZ2F0b3IpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICAgICAgbmF2aWdhdG9yLnNlcnZpY2VXb3JrZXJcbiAgICAgICAgLnJlZ2lzdGVyKFwiL3NlcnZpY2Utd29ya2VyLmpzXCIpXG4gICAgICAgIC50aGVuKChyZWcpID0+IHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhcIlNlcnZpY2VXb3JrZXIgc2NvcGU6IFwiLCByZWcuc2NvcGUpO1xuICAgICAgICAgIGNvbnNvbGUubG9nKFwic2VydmljZSB3b3JrZXIgcmVnaXN0cmF0aW9uIHN1Y2Nlc3NmdWxcIik7XG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgICAgY29uc29sZS53YXJuKFwic2VydmljZSB3b3JrZXIgcmVnaXN0cmF0aW9uIGZhaWxlZFwiLCBlcnIubWVzc2FnZSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgfVxuICBnZXRTZWxlY3RlZENlbGwoKSB7XG4gICAgY29uc3QgeyBib2FyZCB9ID0gdGhpcy5zdGF0ZTtcbiAgICBjb25zdCBzZWxlY3RlZCA9IGJvYXJkLmdldChcInNlbGVjdGVkXCIpO1xuICAgIHJldHVybiBzZWxlY3RlZCAmJiBib2FyZC5nZXQoXCJwdXp6bGVcIikuZ2V0SW4oW3NlbGVjdGVkLngsIHNlbGVjdGVkLnldKTtcbiAgfVxuXG4gIC8vIGdldCB0aGUgbWluIGJldHdlZW4gaXRzIGNvbXBsZXRpb24gaW4gcm93cywgY29sdW1ucyBhbmQgc3F1YXJlcy5cbiAgZ2V0TnVtYmVyVmFsdWVDb3VudChudW1iZXIpIHtcbiAgICBjb25zdCByb3dzID0gdGhpcy5zdGF0ZS5ib2FyZC5nZXRJbihbXCJjaG9pY2VzXCIsIFwicm93c1wiXSk7XG4gICAgY29uc3QgY29sdW1ucyA9IHRoaXMuc3RhdGUuYm9hcmQuZ2V0SW4oW1wiY2hvaWNlc1wiLCBcImNvbHVtbnNcIl0pO1xuICAgIGNvbnN0IHNxdWFyZXMgPSB0aGlzLnN0YXRlLmJvYXJkLmdldEluKFtcImNob2ljZXNcIiwgXCJzcXVhcmVzXCJdKTtcbiAgICByZXR1cm4gTWF0aC5taW4oXG4gICAgICBnZXROdW1iZXJPZkdyb3Vwc0Fzc2lnbmVkRm9yTnVtYmVyKG51bWJlciwgc3F1YXJlcyksXG4gICAgICBNYXRoLm1pbihcbiAgICAgICAgZ2V0TnVtYmVyT2ZHcm91cHNBc3NpZ25lZEZvck51bWJlcihudW1iZXIsIHJvd3MpLFxuICAgICAgICBnZXROdW1iZXJPZkdyb3Vwc0Fzc2lnbmVkRm9yTnVtYmVyKG51bWJlciwgY29sdW1ucylcbiAgICAgIClcbiAgICApO1xuICB9XG5cbiAgZ2VuZXJhdGVHYW1lID0gKGZpbmFsQ291bnQgPSAyMCkgPT4ge1xuICAgIC8vIGdldCBhIGZpbGxlZCBwdXp6bGUgZ2VuZXJhdGVkXG4gICAgY29uc3Qgc29sdXRpb24gPSBtYWtlUHV6emxlKCk7XG4gICAgLy8gcGx1Y2sgdmFsdWVzIGZyb20gY2VsbHMgdG8gY3JlYXRlIHRoZSBnYW1lXG4gICAgY29uc3QgeyBwdXp6bGUgfSA9IHBsdWNrKHNvbHV0aW9uLCBmaW5hbENvdW50KTtcbiAgICAvLyBpbml0aWFsaXplIHRoZSBib2FyZCB3aXRoIGNob2ljZSBjb3VudHNcbiAgICBjb25zdCBib2FyZCA9IG1ha2VCb2FyZCh7IHB1enpsZSB9KTtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGJvYXJkLFxuICAgICAgaGlzdG9yeTogTGlzdC5vZihib2FyZCksXG4gICAgICBoaXN0b3J5T2ZmU2V0OiAwLFxuICAgICAgc29sdXRpb24sXG4gICAgfSk7XG4gIH07XG5cbiAgYWRkTnVtYmVyQXNOb3RlID0gKG51bWJlcikgPT4ge1xuICAgIGxldCB7IGJvYXJkIH0gPSB0aGlzLnN0YXRlO1xuICAgIGxldCBzZWxlY3RlZENlbGwgPSB0aGlzLmdldFNlbGVjdGVkQ2VsbCgpO1xuICAgIGlmICghc2VsZWN0ZWRDZWxsKSByZXR1cm47XG4gICAgY29uc3QgcHJlZmlsbGVkID0gc2VsZWN0ZWRDZWxsLmdldChcInByZWZpbGxlZFwiKTtcbiAgICBpZiAocHJlZmlsbGVkKSByZXR1cm47XG4gICAgY29uc3QgeyB4LCB5IH0gPSBib2FyZC5nZXQoXCJzZWxlY3RlZFwiKTtcbiAgICBjb25zdCBjdXJyZW50VmFsdWUgPSBzZWxlY3RlZENlbGwuZ2V0KFwidmFsdWVcIik7XG4gICAgaWYgKGN1cnJlbnRWYWx1ZSkge1xuICAgICAgYm9hcmQgPSB1cGRhdGVCb2FyZFdpdGhOdW1iZXIoe1xuICAgICAgICB4LFxuICAgICAgICB5LFxuICAgICAgICBudW1iZXI6IGN1cnJlbnRWYWx1ZSxcbiAgICAgICAgZmlsbDogZmFsc2UsXG4gICAgICAgIGJvYXJkOiB0aGlzLnN0YXRlLmJvYXJkLFxuICAgICAgfSk7XG4gICAgfVxuICAgIGxldCBub3RlcyA9IHNlbGVjdGVkQ2VsbC5nZXQoXCJub3Rlc1wiKSB8fCBTZXQoKTtcbiAgICBpZiAobm90ZXMuaGFzKG51bWJlcikpIHtcbiAgICAgIG5vdGVzID0gbm90ZXMuZGVsZXRlKG51bWJlcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5vdGVzID0gbm90ZXMuYWRkKG51bWJlcik7XG4gICAgfVxuICAgIHNlbGVjdGVkQ2VsbCA9IHNlbGVjdGVkQ2VsbC5zZXQoXCJub3Rlc1wiLCBub3Rlcyk7XG4gICAgc2VsZWN0ZWRDZWxsID0gc2VsZWN0ZWRDZWxsLmRlbGV0ZShcInZhbHVlXCIpO1xuICAgIGJvYXJkID0gYm9hcmQuc2V0SW4oW1wicHV6emxlXCIsIHgsIHldLCBzZWxlY3RlZENlbGwpO1xuICAgIHRoaXMudXBkYXRlQm9hcmQoYm9hcmQpO1xuICB9O1xuXG4gIHVwZGF0ZUJvYXJkID0gKG5ld0JvYXJkKSA9PiB7XG4gICAgbGV0IHsgaGlzdG9yeSB9ID0gdGhpcy5zdGF0ZTtcbiAgICBjb25zdCB7IGhpc3RvcnlPZmZTZXQgfSA9IHRoaXMuc3RhdGU7XG4gICAgLy8gYW55dGhpbmcgYmVmb3JlIGN1cnJlbnQgc3RlcCBpcyBzdGlsbCBpbiBoaXN0b3J5XG4gICAgaGlzdG9yeSA9IGhpc3Rvcnkuc2xpY2UoMCwgaGlzdG9yeU9mZlNldCArIDEpO1xuICAgIC8vIGFkZCBpdHNlbGYgb250byB0aGUgaGlzdG9yeVxuICAgIGhpc3RvcnkgPSBoaXN0b3J5LnB1c2gobmV3Qm9hcmQpO1xuICAgIC8vIHVwZGF0ZSB0aGUgZ2FtZVxuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgYm9hcmQ6IG5ld0JvYXJkLFxuICAgICAgaGlzdG9yeSxcbiAgICAgIGhpc3RvcnlPZmZTZXQ6IGhpc3Rvcnkuc2l6ZSAtIDEsXG4gICAgfSk7XG4gIH07XG5cbiAgY2FuVW5kbyA9ICgpID0+IHRoaXMuc3RhdGUuaGlzdG9yeU9mZlNldCA+IDA7XG5cbiAgcmVkbyA9ICgpID0+IHtcbiAgICBjb25zdCB7IGhpc3RvcnkgfSA9IHRoaXMuc3RhdGU7XG4gICAgbGV0IHsgaGlzdG9yeU9mZlNldCB9ID0gdGhpcy5zdGF0ZTtcbiAgICBpZiAoaGlzdG9yeS5zaXplKSB7XG4gICAgICBoaXN0b3J5T2ZmU2V0ID0gTWF0aC5taW4oaGlzdG9yeS5zaXplIC0gMSwgaGlzdG9yeU9mZlNldCArIDEpO1xuICAgICAgY29uc3QgYm9hcmQgPSBoaXN0b3J5LmdldChoaXN0b3J5T2ZmU2V0KTtcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyBib2FyZCwgaGlzdG9yeU9mZlNldCB9KTtcbiAgICB9XG4gIH07XG5cbiAgdW5kbyA9ICgpID0+IHtcbiAgICBjb25zdCB7IGhpc3RvcnkgfSA9IHRoaXMuc3RhdGU7XG4gICAgbGV0IHsgaGlzdG9yeU9mZlNldCwgYm9hcmQgfSA9IHRoaXMuc3RhdGU7XG4gICAgaWYgKGhpc3Rvcnkuc2l6ZSkge1xuICAgICAgaGlzdG9yeU9mZlNldCA9IE1hdGgubWF4KDAsIGhpc3RvcnlPZmZTZXQgLSAxKTtcbiAgICAgIGJvYXJkID0gaGlzdG9yeS5nZXQoaGlzdG9yeU9mZlNldCk7XG4gICAgICB0aGlzLnNldFN0YXRlKHsgYm9hcmQsIGhpc3RvcnlPZmZTZXQsIGhpc3RvcnkgfSk7XG4gICAgfVxuICB9O1xuXG4gIGVyYXNlU2VsZWN0ZWQgPSAoKSA9PiB7XG4gICAgY29uc3Qgc2VsZWN0ZWRDZWxsID0gdGhpcy5nZXRTZWxlY3RlZENlbGwoKTtcbiAgICBpZiAoIXNlbGVjdGVkQ2VsbCkgcmV0dXJuO1xuICAgIHRoaXMuZmlsbE51bWJlcihmYWxzZSk7XG4gIH07XG5cbiAgZmlsbFNlbGVjdGVkV2l0aFNvbHV0aW9uID0gKCkgPT4ge1xuICAgIGNvbnN0IHsgYm9hcmQsIHNvbHV0aW9uIH0gPSB0aGlzLnN0YXRlO1xuICAgIGNvbnN0IHNlbGVjdGVkQ2VsbCA9IHRoaXMuZ2V0U2VsZWN0ZWRDZWxsKCk7XG4gICAgaWYgKCFzZWxlY3RlZENlbGwpIHJldHVybjtcbiAgICBjb25zdCB7IHgsIHkgfSA9IGJvYXJkLmdldChcInNlbGVjdGVkXCIpO1xuICAgIHRoaXMuZmlsbE51bWJlcihzb2x1dGlvblt4XVt5XSk7XG4gIH07XG5cbiAgLy8gZmlsbCBjdXJyZW50bHkgc2VsZWN0ZWQgY2VsbCB3aXRoIG51bWJlclxuICBmaWxsTnVtYmVyID0gKG51bWJlcikgPT4ge1xuICAgIGxldCB7IGJvYXJkIH0gPSB0aGlzLnN0YXRlO1xuICAgIGNvbnN0IHNlbGVjdGVkQ2VsbCA9IHRoaXMuZ2V0U2VsZWN0ZWRDZWxsKCk7XG4gICAgLy8gbm8tb3AgaWYgbm90aGluZyBpcyBzZWxlY3RlZFxuICAgIGlmICghc2VsZWN0ZWRDZWxsKSByZXR1cm47XG4gICAgY29uc3QgcHJlZmlsbGVkID0gc2VsZWN0ZWRDZWxsLmdldChcInByZWZpbGxlZFwiKTtcbiAgICAvLyBuby1vcCBpZiBpdCBpcyByZWZpbGxlZFxuICAgIGlmIChwcmVmaWxsZWQpIHJldHVybjtcbiAgICBjb25zdCB7IHgsIHkgfSA9IGJvYXJkLmdldChcInNlbGVjdGVkXCIpO1xuICAgIGNvbnN0IGN1cnJlbnRWYWx1ZSA9IHNlbGVjdGVkQ2VsbC5nZXQoXCJ2YWx1ZVwiKTtcbiAgICAvLyByZW1vdmUgdGhlIGN1cnJlbnQgdmFsdWUgYW5kIHVwZGF0ZSB0aGUgZ2FtZSBzdGF0ZVxuICAgIGlmIChjdXJyZW50VmFsdWUpIHtcbiAgICAgIGJvYXJkID0gdXBkYXRlQm9hcmRXaXRoTnVtYmVyKHtcbiAgICAgICAgeCxcbiAgICAgICAgeSxcbiAgICAgICAgbnVtYmVyOiBjdXJyZW50VmFsdWUsXG4gICAgICAgIGZpbGw6IGZhbHNlLFxuICAgICAgICBib2FyZDogdGhpcy5zdGF0ZS5ib2FyZCxcbiAgICAgIH0pO1xuICAgIH1cbiAgICAvLyB1cGRhdGUgdG8gbmV3IG51bWJlciBpZiBhbnlcbiAgICBjb25zdCBzZXROdW1iZXIgPSBjdXJyZW50VmFsdWUgIT09IG51bWJlciAmJiBudW1iZXI7XG4gICAgaWYgKHNldE51bWJlcikge1xuICAgICAgYm9hcmQgPSB1cGRhdGVCb2FyZFdpdGhOdW1iZXIoe1xuICAgICAgICB4LFxuICAgICAgICB5LFxuICAgICAgICBudW1iZXIsXG4gICAgICAgIGZpbGw6IHRydWUsXG4gICAgICAgIGJvYXJkLFxuICAgICAgfSk7XG4gICAgfVxuICAgIHRoaXMudXBkYXRlQm9hcmQoYm9hcmQpO1xuICB9O1xuXG4gIHNlbGVjdENlbGwgPSAoeCwgeSkgPT4ge1xuICAgIGxldCB7IGJvYXJkIH0gPSB0aGlzLnN0YXRlO1xuICAgIGJvYXJkID0gYm9hcmQuc2V0KFwic2VsZWN0ZWRcIiwgeyB4LCB5IH0pO1xuICAgIHRoaXMuc2V0U3RhdGUoeyBib2FyZCB9KTtcbiAgfTtcblxuICBpc0NvbmZsaWN0KGksIGopIHtcbiAgICBjb25zdCB7IHZhbHVlIH0gPSB0aGlzLnN0YXRlLmJvYXJkLmdldEluKFtcInB1enpsZVwiLCBpLCBqXSkudG9KU09OKCk7XG4gICAgaWYgKCF2YWx1ZSkgcmV0dXJuIGZhbHNlO1xuICAgIGNvbnN0IHJvd0NvbmZsaWN0ID1cbiAgICAgIHRoaXMuc3RhdGUuYm9hcmQuZ2V0SW4oW1wiY2hvaWNlc1wiLCBcInJvd3NcIiwgaSwgdmFsdWVdKSA+IDE7XG4gICAgY29uc3QgY29sdW1uQ29uZmxpY3QgPVxuICAgICAgdGhpcy5zdGF0ZS5ib2FyZC5nZXRJbihbXCJjaG9pY2VzXCIsIFwiY29sdW1uc1wiLCBqLCB2YWx1ZV0pID4gMTtcbiAgICBjb25zdCBzcXVhcmVDb25mbGljdCA9XG4gICAgICB0aGlzLnN0YXRlLmJvYXJkLmdldEluKFtcbiAgICAgICAgXCJjaG9pY2VzXCIsXG4gICAgICAgIFwic3F1YXJlc1wiLFxuICAgICAgICBNYXRoLmZsb29yKGkgLyAzKSAqIDMgKyBNYXRoLmZsb29yKGogLyAzKSxcbiAgICAgICAgdmFsdWUsXG4gICAgICBdKSA+IDE7XG4gICAgcmV0dXJuIHJvd0NvbmZsaWN0IHx8IGNvbHVtbkNvbmZsaWN0IHx8IHNxdWFyZUNvbmZsaWN0O1xuICB9XG5cbiAgcmVuZGVyQ2VsbChjZWxsLCB4LCB5KSB7XG4gICAgY29uc3QgeyBib2FyZCB9ID0gdGhpcy5zdGF0ZTtcbiAgICBjb25zdCBzZWxlY3RlZCA9IHRoaXMuZ2V0U2VsZWN0ZWRDZWxsKCk7XG4gICAgY29uc3QgeyB2YWx1ZSwgcHJlZmlsbGVkLCBub3RlcyB9ID0gY2VsbC50b0pTT04oKTtcbiAgICBjb25zdCBjb25mbGljdCA9IHRoaXMuaXNDb25mbGljdCh4LCB5KTtcbiAgICBjb25zdCBwZWVyID0gYXJlQ29vcmRpbmF0ZVBlZXJzKHsgeCwgeSB9LCBib2FyZC5nZXQoXCJzZWxlY3RlZFwiKSk7XG4gICAgY29uc3Qgc2FtZVZhbHVlID0gISEoXG4gICAgICBzZWxlY3RlZCAmJlxuICAgICAgc2VsZWN0ZWQuZ2V0KFwidmFsdWVcIikgJiZcbiAgICAgIHZhbHVlID09PSBzZWxlY3RlZC5nZXQoXCJ2YWx1ZVwiKVxuICAgICk7XG5cbiAgICBjb25zdCBpc1NlbGVjdGVkID0gY2VsbCA9PT0gc2VsZWN0ZWQ7XG4gICAgcmV0dXJuIChcbiAgICAgIDxDZWxsXG4gICAgICAgIHByZWZpbGxlZD17cHJlZmlsbGVkfVxuICAgICAgICBub3Rlcz17bm90ZXN9XG4gICAgICAgIHNhbWVWYWx1ZT17c2FtZVZhbHVlfVxuICAgICAgICBpc1NlbGVjdGVkPXtpc1NlbGVjdGVkfVxuICAgICAgICBpc1BlZXI9e3BlZXJ9XG4gICAgICAgIHZhbHVlPXt2YWx1ZX1cbiAgICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgIHRoaXMuc2VsZWN0Q2VsbCh4LCB5KTtcbiAgICAgICAgfX1cbiAgICAgICAga2V5PXt5fVxuICAgICAgICB4PXt4fVxuICAgICAgICB5PXt5fVxuICAgICAgICBjb25mbGljdD17Y29uZmxpY3R9XG4gICAgICAvPlxuICAgICk7XG4gIH1cblxuICByZW5kZXJOdW1iZXJDb250cm9sKCkge1xuICAgIGNvbnN0IHNlbGVjdGVkQ2VsbCA9IHRoaXMuZ2V0U2VsZWN0ZWRDZWxsKCk7XG4gICAgY29uc3QgcHJlZmlsbGVkID0gc2VsZWN0ZWRDZWxsICYmIHNlbGVjdGVkQ2VsbC5nZXQoXCJwcmVmaWxsZWRcIik7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29udHJvbFwiPlxuICAgICAgICB7cmFuZ2UoOSkubWFwKChpKSA9PiB7XG4gICAgICAgICAgY29uc3QgbnVtYmVyID0gaSArIDE7XG4gICAgICAgICAgLy8gaGFuZGxlcyBiaW5kaW5nIHNpbmdsZSBjbGljayBhbmQgZG91YmxlIGNsaWNrIGNhbGxiYWNrc1xuICAgICAgICAgIGNvbnN0IGNsaWNrSGFuZGxlID0gZ2V0Q2xpY2tIYW5kbGVyKFxuICAgICAgICAgICAgKCkgPT4ge1xuICAgICAgICAgICAgICB0aGlzLmZpbGxOdW1iZXIobnVtYmVyKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgICAgIHRoaXMuYWRkTnVtYmVyQXNOb3RlKG51bWJlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgKTtcbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPE51bWJlckNvbnRyb2xcbiAgICAgICAgICAgICAga2V5PXtudW1iZXJ9XG4gICAgICAgICAgICAgIG51bWJlcj17bnVtYmVyfVxuICAgICAgICAgICAgICBvbkNsaWNrPXshcHJlZmlsbGVkID8gY2xpY2tIYW5kbGUgOiB1bmRlZmluZWR9XG4gICAgICAgICAgICAgIGNvbXBsZXRpb25QZXJjZW50YWdlPXt0aGlzLmdldE51bWJlclZhbHVlQ291bnQobnVtYmVyKSAvIDl9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICk7XG4gICAgICAgIH0pfVxuICAgICAgICA8c3R5bGUganN4PntDb250cm9sU3R5bGV9PC9zdHlsZT5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cblxuICByZW5kZXJBY3Rpb25zKCkge1xuICAgIGNvbnN0IHsgaGlzdG9yeSB9ID0gdGhpcy5zdGF0ZTtcbiAgICBjb25zdCBzZWxlY3RlZENlbGwgPSB0aGlzLmdldFNlbGVjdGVkQ2VsbCgpO1xuICAgIGNvbnN0IHByZWZpbGxlZCA9IHNlbGVjdGVkQ2VsbCAmJiBzZWxlY3RlZENlbGwuZ2V0KFwicHJlZmlsbGVkXCIpO1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImFjdGlvbnNcIj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhY3Rpb25cIiBvbkNsaWNrPXtoaXN0b3J5LnNpemUgPyB0aGlzLnVuZG8gOiBudWxsfT5cbiAgICAgICAgICA8UmVsb2FkSWNvbiAvPlxuICAgICAgICAgIEhvw6BuIHTDoWNcbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYWN0aW9uIHJlZG9cIiBvbkNsaWNrPXtoaXN0b3J5LnNpemUgPyB0aGlzLnJlZG8gOiBudWxsfT5cbiAgICAgICAgICA8UmVsb2FkSWNvbiAvPlxuICAgICAgICAgIEtow7RpIHBo4bulY1xuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdlxuICAgICAgICAgIGNsYXNzTmFtZT1cImFjdGlvblwiXG4gICAgICAgICAgb25DbGljaz17IXByZWZpbGxlZCA/IHRoaXMuZXJhc2VTZWxlY3RlZCA6IG51bGx9XG4gICAgICAgID5cbiAgICAgICAgICA8UmVtb3ZlSWNvbiAvPlxuICAgICAgICAgIFhvw6FcbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXZcbiAgICAgICAgICBjbGFzc05hbWU9XCJhY3Rpb25cIlxuICAgICAgICAgIG9uQ2xpY2s9eyFwcmVmaWxsZWQgPyB0aGlzLmZpbGxTZWxlY3RlZFdpdGhTb2x1dGlvbiA6IG51bGx9XG4gICAgICAgID5cbiAgICAgICAgICA8TG91cGVJY29uIC8+XG4gICAgICAgICAgR+G7o2kgw71cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxzdHlsZSBqc3g+e0FjdGlvbnNTdHlsZX08L3N0eWxlPlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxuXG4gIHJlbmRlclB1enpsZSgpIHtcbiAgICBjb25zdCB7IGJvYXJkIH0gPSB0aGlzLnN0YXRlO1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInB1enpsZVwiIHN0eWxlPXt7IGJhY2tncm91bmRDb2xvcjogXCIjRURCQjk0XCIgfX0+XG4gICAgICAgIHtib2FyZFxuICAgICAgICAgIC5nZXQoXCJwdXp6bGVcIilcbiAgICAgICAgICAubWFwKChyb3csIGkpID0+IChcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC9uby1hcnJheS1pbmRleC1rZXlcbiAgICAgICAgICAgIDxkaXYga2V5PXtpfSBjbGFzc05hbWU9XCJyb3dcIiBzdHlsZT17eyBiYWNrZ3JvdW5kQ29sb3I6IFwicmVkXCIgfX0+XG4gICAgICAgICAgICAgIHtyb3cubWFwKChjZWxsLCBqKSA9PiB0aGlzLnJlbmRlckNlbGwoY2VsbCwgaSwgaikpLnRvQXJyYXkoKX1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICkpXG4gICAgICAgICAgLnRvQXJyYXkoKX1cbiAgICAgICAgPHN0eWxlIGpzeD57UHV6emxlU3R5bGV9PC9zdHlsZT5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cblxuICByZW5kZXJDb250cm9scygpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb250cm9sc1wiPlxuICAgICAgICB7dGhpcy5yZW5kZXJOdW1iZXJDb250cm9sKCl9XG4gICAgICAgIHt0aGlzLnJlbmRlckFjdGlvbnMoKX1cbiAgICAgICAgey8qIGxhbmd1YWdlPUNTUyAqL31cbiAgICAgICAgPHN0eWxlIGpzeD5cbiAgICAgICAgICB7YFxuICAgICAgICAgICAgLmNvbnRyb2xzIHtcbiAgICAgICAgICAgICAgbWFyZ2luLXRvcDogMC4zZW07XG4gICAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgICAgIGZsZXgtd3JhcDogd3JhcDtcbiAgICAgICAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICAgICAgICBwYWRkaW5nOiAwLjVlbSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIGB9XG4gICAgICAgIDwvc3R5bGU+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG5cbiAgcmVuZGVyR2VuZXJhdGlvblVJKCkge1xuICAgIHJldHVybiA8R2VuZXJhdGlvblVJIGdlbmVyYXRlR2FtZT17dGhpcy5nZW5lcmF0ZUdhbWV9IC8+O1xuICB9XG5cbiAgcmVuZGVySGVhZGVyKCkge1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImhlYWRlclwiPlxuICAgICAgICA8ZGl2XG4gICAgICAgICAgY2xhc3NOYW1lPVwibmV3LWdhbWVcIlxuICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHRoaXMuc2V0U3RhdGUoeyBib2FyZDogZmFsc2UgfSl9XG4gICAgICAgID5cbiAgICAgICAgICA8UmV0dXJuSWNvbiAvPlxuICAgICAgICAgIDxkaXY+VHLDsiBjaMahaSBt4bubaTwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgey8qIDxUaXAgLz4gKi99XG4gICAgICAgIHsvKiBsYW5ndWFnZT1DU1MgKi99XG4gICAgICAgIDxzdHlsZSBqc3g+XG4gICAgICAgICAge2BcbiAgICAgICAgICAgIC5oZWFkZXIge1xuICAgICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgICAgICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICAgICAgICAgICAgICBtYXgtd2lkdGg6IDUwMHB4O1xuICAgICAgICAgICAgICBwYWRkaW5nOiAwIDAuNWVtO1xuICAgICAgICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLm5ldy1nYW1lIHtcbiAgICAgICAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xuICAgICAgICAgICAgICBtYXJnaW4tdG9wOiAwLjJlbTtcbiAgICAgICAgICAgICAgZGlzcGxheTogaW5saW5lLWZsZXg7XG4gICAgICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICAgICAgICBwYWRkaW5nOiAwLjJlbSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLm5ldy1nYW1lIDpnbG9iYWwoc3ZnKSB7XG4gICAgICAgICAgICAgIGhlaWdodDogMWVtO1xuICAgICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAwLjNlbTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICBgfVxuICAgICAgICA8L3N0eWxlPlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IGJvYXJkIH0gPSB0aGlzLnN0YXRlO1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImJvZHlcIj5cbiAgICAgICAgPE5leHRIZWFkPlxuICAgICAgICAgIDx0aXRsZT5TdWRva3UgRXZvbHZlZDwvdGl0bGU+XG4gICAgICAgICAgPG1ldGFcbiAgICAgICAgICAgIG5hbWU9XCJ2aWV3cG9ydFwiXG4gICAgICAgICAgICBjb250ZW50PVwiaW5pdGlhbC1zY2FsZT0xLjAsIHdpZHRoPWRldmljZS13aWR0aFwiXG4gICAgICAgICAgLz5cbiAgICAgICAgICA8bWV0YSBuYW1lPVwiZGVzY3JpcHRpb25cIiBjb250ZW50PXtEZXNjcmlwdGlvbn0gLz5cbiAgICAgICAgICA8bGlua1xuICAgICAgICAgICAgaHJlZj1cImh0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzP2ZhbWlseT1TcGVjaWFsK0VsaXRlXCJcbiAgICAgICAgICAgIHJlbD1cInN0eWxlc2hlZXRcIlxuICAgICAgICAgIC8+XG4gICAgICAgICAgPG1ldGEgcHJvcGVydHk9XCJvZzp1cmxcIiBjb250ZW50PVwiaHR0cHM6Ly9zdWRva3Uuc2l0aWFubGl1LmNvbS9cIiAvPlxuICAgICAgICAgIDxtZXRhIHByb3BlcnR5PVwib2c6dGl0bGVcIiBjb250ZW50PVwiU3Vkb2t1IEV2b2x2ZWRcIiAvPlxuICAgICAgICAgIDxtZXRhIHByb3BlcnR5PVwib2c6dHlwZVwiIGNvbnRlbnQ9XCJ3ZWJzaXRlXCIgLz5cbiAgICAgICAgICA8bWV0YSBwcm9wZXJ0eT1cIm9nOmRlc2NyaXB0aW9uXCIgY29udGVudD17RGVzY3JpcHRpb259IC8+XG4gICAgICAgICAgPG1ldGFcbiAgICAgICAgICAgIHByb3BlcnR5PVwib2c6aW1hZ2VcIlxuICAgICAgICAgICAgY29udGVudD1cImh0dHBzOi8vc3Vkb2t1LnNpdGlhbmxpdS5jb20vc3RhdGljL29nLWltYWdlLnBuZ1wiXG4gICAgICAgICAgLz5cbiAgICAgICAgPC9OZXh0SGVhZD5cbiAgICAgICAgeyFib2FyZCAmJiB0aGlzLnJlbmRlckdlbmVyYXRpb25VSSgpfVxuICAgICAgICB7Ym9hcmQgJiYgdGhpcy5yZW5kZXJIZWFkZXIoKX1cbiAgICAgICAge2JvYXJkICYmIHRoaXMucmVuZGVyUHV6emxlKCl9XG4gICAgICAgIHtib2FyZCAmJiB0aGlzLnJlbmRlckNvbnRyb2xzKCl9XG4gICAgICAgIHsvKiA8ZGl2IGNsYXNzTmFtZT1cInJvb3RlclwiPlxuICAgICAgICAgIE1hZGUgd2l0aCA8c3Bhbj7inaTvuI88L3NwYW4+77iPIEJ5IDxhIGhyZWY9XCJodHRwczovL3d3dy5zaXRpYW5saXUuY29tL1wiPlNpdGlhbiBMaXU8L2E+IHwgPGEgaHJlZj1cImh0dHBzOi8vbWVkaXVtLmNvbS9Ac2l0aWFubGl1XzU3NjgwL2J1aWxkaW5nLWEtc3Vkb2t1LWdhbWUtaW4tcmVhY3QtY2E2NjM5MTU3MTJcIj5CbG9nIFBvc3Q8L2E+XG4gICAgICAgIDwvZGl2PiAqL31cbiAgICAgICAgey8qIGxhbmd1YWdlPUNTUyAqL31cbiAgICAgICAgPHN0eWxlIGpzeD5cbiAgICAgICAgICB7YFxuICAgICAgICAgICAgOmdsb2JhbChib2R5KSxcbiAgICAgICAgICAgIC5ib2R5IHtcbiAgICAgICAgICAgICAgZm9udC1mYW1pbHk6IFwiU3BlY2lhbCBFbGl0ZVwiLCBjdXJzaXZlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLmJvZHkge1xuICAgICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgICAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICAgICAgICAgICAgaGVpZ2h0OiAxMDB2aDtcbiAgICAgICAgICAgICAgd2lkdGg6IDEwMHZ3O1xuICAgICAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNiMzhhODE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBAbWVkaWEgKG1pbi13aWR0aDogODAwcHgpIGFuZCAobWluLWhlaWdodDogOTMwcHgpIHtcbiAgICAgICAgICAgICAgOmdsb2JhbCguaGVhZGVyLCAucHV6emxlLCAuY29udHJvbHMpIHtcbiAgICAgICAgICAgICAgICBmb250LXNpemU6IDEuNWVtO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBAbWVkaWEgKG1heC13aWR0aDogODAwcHgpIGFuZCAobWluLXdpZHRoOiA2MDBweCkge1xuICAgICAgICAgICAgICA6Z2xvYmFsKC5oZWFkZXIsIC5wdXp6bGUsIC5jb250cm9scykge1xuICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMS4yZW07XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIEBtZWRpYSAobWF4LWhlaWdodDogOTMwcHgpIGFuZCAobWluLWhlaWdodDogODAwcHgpIGFuZCAobWluLXdpZHRoOiA2MDBweCkge1xuICAgICAgICAgICAgICA6Z2xvYmFsKC5oZWFkZXIsIC5wdXp6bGUsIC5jb250cm9scykge1xuICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMS4yZW07XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIEBtZWRpYSAobWF4LWhlaWdodDogODAwcHgpIGFuZCAobWluLWhlaWdodDogNjAwcHgpIGFuZCAobWluLXdpZHRoOiAzNzBweCkge1xuICAgICAgICAgICAgICA6Z2xvYmFsKC5oZWFkZXIsIC5wdXp6bGUsIC5jb250cm9scykge1xuICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMWVtO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBAbWVkaWEgKG1heC13aWR0aDogMzcwcHgpIHtcbiAgICAgICAgICAgICAgOmdsb2JhbCguaGVhZGVyLCAucHV6emxlLCAuY29udHJvbHMpIHtcbiAgICAgICAgICAgICAgICBmb250LXNpemU6IDAuOGVtO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBAbWVkaWEgKG1heC1oZWlnaHQ6IDYwMHB4KSB7XG4gICAgICAgICAgICAgIDpnbG9iYWwoLmhlYWRlciwgLnB1enpsZSwgLmNvbnRyb2xzKSB7XG4gICAgICAgICAgICAgICAgZm9udC1zaXplOiAwLjhlbTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgOmdsb2JhbChib2R5KSB7XG4gICAgICAgICAgICAgIG1hcmdpbjogMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC5yb290ZXIge1xuICAgICAgICAgICAgICBwb3NpdGlvbjogZml4ZWQ7XG4gICAgICAgICAgICAgIGJvdHRvbTogMDtcbiAgICAgICAgICAgICAgZm9udC1zaXplOiAwLjhlbTtcbiAgICAgICAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICBgfVxuICAgICAgICA8L3N0eWxlPlxuICAgICAgICA8c3R5bGUganN4IGdsb2JhbD5cbiAgICAgICAgICB7UmFuZ2VTdHlsZX1cbiAgICAgICAgPC9zdHlsZT5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn1cbiJdfQ== */\n/*@ sourceURL=pages/index.js */"
        }),
        __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_0_styled_jsx_style___default.a, {
          styleId: __WEBPACK_IMPORTED_MODULE_7__input_range_style__["a" /* default */].__hash,
          css: __WEBPACK_IMPORTED_MODULE_7__input_range_style__["a" /* default */]
        })
      );
    }
  }, {
    key: "__reactstandin__regenerateByEval",
    value: function __reactstandin__regenerateByEval(key, code) {
      this[key] = eval(code);
    }
  }]);

  return Index;
}(__WEBPACK_IMPORTED_MODULE_1_react__["Component"]);

var _default = Index;
/* harmony default export */ __webpack_exports__["default"] = (_default);
;

(function () {
  var reactHotLoader = __webpack_require__("./node_modules/react-hot-loader/patch.js").default;

  var leaveModule = __webpack_require__("./node_modules/react-hot-loader/patch.js").leaveModule;

  if (!reactHotLoader) {
    return;
  }

  reactHotLoader.register(Description, "Description", "/Users/duylinh196tb/WORK/Learn/React/react-sudoku-game/pages/index.js");
  reactHotLoader.register(cellWidth, "cellWidth", "/Users/duylinh196tb/WORK/Learn/React/react-sudoku-game/pages/index.js");
  reactHotLoader.register(LightBlue100, "LightBlue100", "/Users/duylinh196tb/WORK/Learn/React/react-sudoku-game/pages/index.js");
  reactHotLoader.register(LightBlue200, "LightBlue200", "/Users/duylinh196tb/WORK/Learn/React/react-sudoku-game/pages/index.js");
  reactHotLoader.register(LightBlue300, "LightBlue300", "/Users/duylinh196tb/WORK/Learn/React/react-sudoku-game/pages/index.js");
  reactHotLoader.register(Indigo700, "Indigo700", "/Users/duylinh196tb/WORK/Learn/React/react-sudoku-game/pages/index.js");
  reactHotLoader.register(DeepOrange200, "DeepOrange200", "/Users/duylinh196tb/WORK/Learn/React/react-sudoku-game/pages/index.js");
  reactHotLoader.register(DeepOrange600, "DeepOrange600", "/Users/duylinh196tb/WORK/Learn/React/react-sudoku-game/pages/index.js");
  reactHotLoader.register(ControlNumberColor, "ControlNumberColor", "/Users/duylinh196tb/WORK/Learn/React/react-sudoku-game/pages/index.js");
  reactHotLoader.register(CellStyle, "CellStyle", "/Users/duylinh196tb/WORK/Learn/React/react-sudoku-game/pages/index.js");
  reactHotLoader.register(ActionsStyle, "ActionsStyle", "/Users/duylinh196tb/WORK/Learn/React/react-sudoku-game/pages/index.js");
  reactHotLoader.register(ControlStyle, "ControlStyle", "/Users/duylinh196tb/WORK/Learn/React/react-sudoku-game/pages/index.js");
  reactHotLoader.register(NumberControlStyle, "NumberControlStyle", "/Users/duylinh196tb/WORK/Learn/React/react-sudoku-game/pages/index.js");
  reactHotLoader.register(PuzzleStyle, "PuzzleStyle", "/Users/duylinh196tb/WORK/Learn/React/react-sudoku-game/pages/index.js");
  reactHotLoader.register(CirculuarProgressStyle, "CirculuarProgressStyle", "/Users/duylinh196tb/WORK/Learn/React/react-sudoku-game/pages/index.js");
  reactHotLoader.register(CircularPathD, "CircularPathD", "/Users/duylinh196tb/WORK/Learn/React/react-sudoku-game/pages/index.js");
  reactHotLoader.register(getBackGroundColor, "getBackGroundColor", "/Users/duylinh196tb/WORK/Learn/React/react-sudoku-game/pages/index.js");
  reactHotLoader.register(getFontColor, "getFontColor", "/Users/duylinh196tb/WORK/Learn/React/react-sudoku-game/pages/index.js");
  reactHotLoader.register(GenerationUI, "GenerationUI", "/Users/duylinh196tb/WORK/Learn/React/react-sudoku-game/pages/index.js");
  reactHotLoader.register(NumberControl, "NumberControl", "/Users/duylinh196tb/WORK/Learn/React/react-sudoku-game/pages/index.js");
  reactHotLoader.register(Cell, "Cell", "/Users/duylinh196tb/WORK/Learn/React/react-sudoku-game/pages/index.js");
  reactHotLoader.register(CirclularProgress, "CirclularProgress", "/Users/duylinh196tb/WORK/Learn/React/react-sudoku-game/pages/index.js");
  reactHotLoader.register(getClickHandler, "getClickHandler", "/Users/duylinh196tb/WORK/Learn/React/react-sudoku-game/pages/index.js");
  reactHotLoader.register(makeCountObject, "makeCountObject", "/Users/duylinh196tb/WORK/Learn/React/react-sudoku-game/pages/index.js");
  reactHotLoader.register(makeBoard, "makeBoard", "/Users/duylinh196tb/WORK/Learn/React/react-sudoku-game/pages/index.js");
  reactHotLoader.register(updateBoardWithNumber, "updateBoardWithNumber", "/Users/duylinh196tb/WORK/Learn/React/react-sudoku-game/pages/index.js");
  reactHotLoader.register(getNumberOfGroupsAssignedForNumber, "getNumberOfGroupsAssignedForNumber", "/Users/duylinh196tb/WORK/Learn/React/react-sudoku-game/pages/index.js");
  reactHotLoader.register(Index, "Index", "/Users/duylinh196tb/WORK/Learn/React/react-sudoku-game/pages/index.js");
  reactHotLoader.register(_default, "default", "/Users/duylinh196tb/WORK/Learn/React/react-sudoku-game/pages/index.js");
  leaveModule(module);
})();

;
    (function (Component, route) {
      if(!Component) return
      if (false) return
      module.hot.accept()
      Component.__route = route

      if (module.hot.status() === 'idle') return

      var components = next.router.components
      for (var r in components) {
        if (!components.hasOwnProperty(r)) continue

        if (components[r].Component.__route === route) {
          next.router.update(r, Component)
        }
      }
    })(typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__.default : (module.exports.default || module.exports), "/")
  
/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__("./node_modules/webpack/buildin/harmony-module.js")(module)))

/***/ })

})
//# sourceMappingURL=4.65d64d0afc9b89affdb5.hot-update.js.map